#pragma once

#include "gen_datatypes.h"

namespace autosar {

// This enum must match the enum Dir defined in the ISigals/types.hal
enum class Dir : uint16_t {
    IN = 0,
    OUT = 1,
    INTERNAL = 2
};

struct DataElemInfo {
    virtual ~DataElemInfo() = default;
    virtual const char* name() const=0;
    virtual const char* typeName() const=0;
    virtual Dir direction() const=0;
};

/*!
 * \brief Provide compile time info if a data-element is in or out
 */
class InTag {
};

class OutTag {
};

class InternalTag : public InTag, public OutTag {
};


{% macro get_dirtag(is_internal, is_insignal) -%}
{%- if is_internal -%}
    InternalTag
{%- else -%}
    {%- if is_insignal -%}
        InTag
    {%- else -%}
        OutTag
    {%- endif -%}
{%- endif -%}
{%- endmacro %}

{% for de_de in all_dataelements %}

/*!
 * \brief Signal {{de_de.de_dataelementname}}{{escape_cpp_comment_including_prefix_if_nonempty(de_de.description.strip(), "\n * ")}}
 */
struct {{de_de.de_dataelementname}}_info : {{get_dirtag(de_de.is_internal, de_de.is_insignal)}}, public DataElemInfo {
    using data_elem_type = {{de_de.cpp_type}}; {{create_cpp_brief_comment_if_nonempty(de_de.range_comment)}}

    static const char* Name();
    static const char* TypeName();
    static Dir Direction();

    const char* name() const override;
    const char* typeName() const override;
    Dir direction() const override;
};
{% endfor %}

} // namespace autosar