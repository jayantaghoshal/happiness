/*===========================================================================*\
 * Copyright 2017 Delphi Technologies, Inc., All Rights Reserved.
 * Delphi Confidential
\*===========================================================================*/
#ifndef _CONNECTIVITY_LIBIPCOMMANDBUS_VCCIPCMD_H_
#define _CONNECTIVITY_LIBIPCOMMANDBUS_VCCIPCMD_H_

/*
 * This file is automatically generated from the template 'VccIpCmdApi.h.in'
 */

#include <cstddef>
#include <cstdint>
#include <functional>
#include <string>

namespace Connectivity {
/**
 * Namespace for VCC IP Command
 */
namespace VccIpCmd {
/**
 * Service IDs
 * Autogenerated with content from the following files:
 * 'VDR-NOTE-SWRS-31844378-02-9_VCC_IP_CommandBus_Infotainment_Platform_IP18_SPA.doc', 'VDR-NOTE-SWRS-31841985-02-21
 * Infotainment IP Command Bus_IP606_SPA.doc'
 */
enum class ServiceId : std::uint16_t {
    Undefined = 0x0000,
    Telematics = 0x00A1,
    Connectivity = 0x00A3,
    WLAN = 0x00A4,
    CommonPSIMPhoneConnectivity = 0x00A5,
    CommonPhoneTelematics = 0x00A7,
    CommonAll = 0x00A8,
    Positioning = 0x00A9,
    DiagnosticManagement = 0x00AA,
    OTA = 0x00AB,
    TVM = 0x00AC,
    InfotainmentPlatform = 0x00BA,
    LM = 0xFFFF
};

/**
 * Operation IDs
 * Autogenerated with content from the following files:
 * 'VDR-NOTE-SWRS-31844378-02-9_VCC_IP_CommandBus_Infotainment_Platform_IP18_SPA.doc', 'VDR-NOTE-SWRS-31841985-02-21
 * Infotainment IP Command Bus_IP606_SPA.doc'
 */
enum class OperationId : std::uint16_t {
    Undefined = 0x0000,                     // Undefined (0x0000)
    SVTStatus = 0x0102,                     // Telematics (0x00A1)
    TNStatus = 0x0103,                      // Telematics (0x00A1)
    TelematicSettings = 0x0104,             // Telematics (0x00A1)
    PositionData = 0x0105,                  // Telematics (0x00A1)
    TextMessage = 0x0106,                   // Telematics (0x00A1)
    SubscriptionActivation = 0x0107,        // Telematics (0x00A1)
    ServiceActivation = 0x0108,             // Telematics (0x00A1)
    RescueStatus = 0x010A,                  // Telematics (0x00A1)
    IHUSystemInfo = 0x010B,                 // Telematics (0x00A1)
    UserPrivacySettings = 0x010C,           // Telematics (0x00A1)
    SendToCar = 0x010D,                     // Telematics (0x00A1)
    SendToCarConfirmation = 0x010E,         // Telematics (0x00A1)
    ClimateTimers = 0x010F,                 // Telematics (0x00A1)
    ServiceBooking = 0x0110,                // Telematics (0x00A1)
    SoHWarning = 0x0111,                    // Telematics (0x00A1)
    SoHPacketSend = 0x0112,                 // Telematics (0x00A1)
    SoHPackageUploaded = 0x0113,            // Telematics (0x00A1)
    GenericSettingSynch = 0x0114,           // Telematics (0x00A1)
    EcallSettings = 0x0115,                 // Telematics (0x00A1)
    PSIMDataCounter = 0x0302,               // Connectivity (0x00A3)
    PSIMResetDataCounter = 0x0303,          // Connectivity (0x00A3)
    PSIMNetworkConfiguration = 0x0304,      // Connectivity (0x00A3)
    PSIMConnect = 0x0305,                   // Connectivity (0x00A3)
    PSIMConnectionStatus = 0x0306,          // Connectivity (0x00A3)
    PSIMRoamingConfiguration = 0x0307,      // Connectivity (0x00A3)
    InternetGateway = 0x0308,               // Connectivity (0x00A3)
    ConnectivityStatus = 0x030A,            // Connectivity (0x00A3)
    ConnectWorkshopWlan = 0x030B,           // Connectivity (0x00A3)
    WorkshopWlanDetected = 0x030C,          // Connectivity (0x00A3)
    AccessRightPinCode = 0x030D,            // Connectivity (0x00A3)
    FactoryDefaultRestore = 0x030E,         // Connectivity (0x00A3)
    CurrentInternetSource = 0x030F,         // Connectivity (0x00A3)
    InternetSourceCtrlBT = 0x0310,          // Connectivity (0x00A3)
    InternetSourceCtrlUSB = 0x0311,         // Connectivity (0x00A3)
    PSIMMessage = 0x0312,                   // Connectivity (0x00A3)
    WLANMode = 0x0400,                      // WLAN (0x00A4)
    WLANFreqBandSelect = 0x0401,            // WLAN (0x00A4)
    WLANChannelFreqInfo = 0x0402,           // WLAN (0x00A4)
    WLANAPSSID = 0x0404,                    // WLAN (0x00A4)
    WLANAPPasswd = 0x0405,                  // WLAN (0x00A4)
    WLANAPConnDev = 0x0406,                 // WLAN (0x00A4)
    WLANSTAConnect = 0x0408,                // WLAN (0x00A4)
    WLANSTADisconnect = 0x0409,             // WLAN (0x00A4)
    WLANAPStatusSettings = 0x040B,          // WLAN (0x00A4)
    WLANSTAStatus = 0x040D,                 // WLAN (0x00A4)
    WLANSTARememberedNetwks = 0x040E,       // WLAN (0x00A4)
    WLANSTAForgetRememberedNetwk = 0x040F,  // WLAN (0x00A4)
    PSIMSecurity = 0x0501,                  // CommonPSIMPhoneConnectivity (0x00A5)
    PSIMEnterCode = 0x0502,                 // CommonPSIMPhoneConnectivity (0x00A5)
    PSIMRegisterState = 0x0503,             // CommonPSIMPhoneConnectivity (0x00A5)
    PSIMNetworkOperators = 0x0504,          // CommonPSIMPhoneConnectivity (0x00A5)
    PSIMNetworkOperatorCommand = 0x0505,    // CommonPSIMPhoneConnectivity (0x00A5)
    PSIMState = 0x0506,                     // CommonPSIMPhoneConnectivity (0x00A5)
    PSIMPhoneOperationMode = 0x0507,        // CommonPSIMPhoneConnectivity (0x00A5)
    PSIMSignalStrength = 0x0508,            // CommonPSIMPhoneConnectivity (0x00A5)
    PSIMUssd = 0x0509,                      // CommonPSIMPhoneConnectivity (0x00A5)
    PremiumAudio = 0x0702,                  // CommonPhoneTelematics (0x00A7)
    CallHandling = 0x0703,                  // CommonPhoneTelematics (0x00A7)
    TEMIdentification = 0x0801,             // CommonAll (0x00A8)
    TEMRadioMode = 0x0803,                  // CommonAll (0x00A8)
    TunerFrequencies = 0x0804,              // CommonAll (0x00A8)
    DLCConnectedSignal = 0x0805,            // CommonAll (0x00A8)
    DeadReckonedPosition = 0x0901,          // Positioning (0x00A9)
    GNSSPositionData = 0x0902,              // Positioning (0x00A9)
    GNSSPositionDataAccuracy = 0x0903,      // Positioning (0x00A9)
    RemoteDiagnosticLink = 0x0A01,          // DiagnosticManagement (0x00AA)
    RemoteDiagnosticInfo = 0x0A02,          // DiagnosticManagement (0x00AA)
    RequestUserAuthentication = 0x0A03,     // DiagnosticManagement (0x00AA)
    TextFromOperatorToUser = 0x0A04,        // DiagnosticManagement (0x00AA)
    CurrentJ2534Session = 0x0A05,           // DiagnosticManagement (0x00AA)
    CurrentDoIPState = 0x0A06,              // DiagnosticManagement (0x00AA)
    CurrentDoIPConnection = 0x0A07,         // DiagnosticManagement (0x00AA)
    TextFromUserToOperator = 0x0A08,        // DiagnosticManagement (0x00AA)
    RequestRemoteDiagnostics = 0x0A09,      // DiagnosticManagement (0x00AA)
    AbortRemoteDiagnostics = 0x0A0A,        // DiagnosticManagement (0x00AA)
    UpdateDaCMode = 0x0A0B,                 // DiagnosticManagement (0x00AA)
    ApprovalStatus = 0x0A0C,                // DiagnosticManagement (0x00AA)
    DownloadStatus = 0x0B01,                // OTA (0x00AB)
    DownloadSoftware = 0x0B02,              // OTA (0x00AB)
    DeletedSoftware = 0x0B03,               // OTA (0x00AB)
    DeviceInstall = 0x0B04,                 // OTA (0x00AB)
    CancelDownload = 0x0B05,                // OTA (0x00AB)
    LocalStorage = 0x0B06,                  // OTA (0x00AB)
    TvmVehicleInfo = 0x0C01,                // TVM (0x00AC)
    DimFullAppScreenUpdate = 0x0A01,        // InfotainmentPlatform (0x00BA)
    DimItemUpdatePartial = 0x0A02,          // InfotainmentPlatform (0x00BA)
    IHUSteerWheelSwitch = 0x0A03,           // InfotainmentPlatform (0x00BA)
    DIMNotification = 0x0A04,               // InfotainmentPlatform (0x00BA)
    DIMCurrentlyActiveSoundArea = 0x0A05,   // InfotainmentPlatform (0x00BA)
    DIMTbTArea = 0x0A06,                    // InfotainmentPlatform (0x00BA)
    IHUDIMResponse = 0x0A07,                // InfotainmentPlatform (0x00BA)
    DIMHitlist = 0x0A08,                    // InfotainmentPlatform (0x00BA)
    IpActivity = 0xFF01,                    // LM (0xFFFF)
};

/**
 * Possible Operation Types
 * Reference: VDR-NOTE-SWRS-31843799-INS-01-14 VCCIP.pdf [VCC IP Prot: 0020/;-1]
 */
enum class OperationType : std::uint8_t {
    REQUEST = 0x00,
    SETREQUEST_NORETURN = 0x01,
    SETREQUEST = 0x02,
    NOTIFICATION_REQUEST = 0x03,
    RESPONSE = 0x04,
    NOTIFICATION = 0x05,
    NOTIFICATION_CYCLIC = 0x06,
    ACK = 0x70,
    ERROR = 0xE0,
    UNDEFINED = 0xFF,
};

/**
 * Possible Data Types, i.e. type of data payload.
 * Reference: VDR-NOTE-SWRS-31843799-INS-01-14 VCCIP.pdf [VCC IP Prot: 0094/;-0]
 */
enum class DataType : std::uint8_t {
    ENCODED = 0x00,
    NOT_ENCODED = 0x01,
    UNDEFINED = 0xFF,
};

typedef std::uint32_t SenderHandleId;

struct CombinedId {
    CombinedId(ServiceId _sid, OperationId _oid);

    bool operator==(const CombinedId &id) const;

    const ServiceId serviceId;
    const OperationId operationId;
};

bool ServiceIdIsValid(ServiceId id);

/**
 * Returns the string literal for the passed enumerations.
 */
std::string toString(ServiceId si);
std::string toString(ServiceId si, OperationId oi, const char *separator = ".");
std::string toString(const CombinedId &id, const char *separator = ".");

/**
 * Returns the string literal for the passed enumeration.
 */
const char *toString(OperationType ot);

/**
 * Returns the string literal for the passed enumeration.
 */
const char *toString(DataType dt);

}  // VccIpCmd
}  // Connectivity

#endif  //_CONNECTIVITY_LIBIPCOMMANDBUS_VCCIPCMD_H_
