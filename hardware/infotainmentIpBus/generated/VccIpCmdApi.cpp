/*
 * Copyright 2017 Volvo Car Corporation
 * This file is covered by LICENSE file in the root of this project
 */

#include "include/VccIpCmdApi.h"

/*
 * This file is automatically generated from the template 'VccIpCmdApi.cpp.in'
 */

#include <cstdio>
#include <vector>

namespace Connectivity {
namespace VccIpCmd {
bool ServiceIdIsValid(ServiceId id) {
    switch (id) {
        case ServiceId::Telematics:
        case ServiceId::Connectivity:
        case ServiceId::WLAN:
        case ServiceId::CommonPSIMPhoneConnectivity:
        case ServiceId::CommonPhoneTelematics:
        case ServiceId::CommonAll:
        case ServiceId::Positioning:
        case ServiceId::DiagnosticManagement:
        case ServiceId::OTA:
        case ServiceId::TVM:
        case ServiceId::InfotainmentPlatform:
        case ServiceId::LM:
            return true;
        case ServiceId::Undefined:
        default:
            return false;
    }
}

CombinedId::CombinedId(ServiceId _sid, OperationId _oid) : serviceId{_sid}, operationId{_oid} {}

bool CombinedId::operator==(const CombinedId &id) const {
    return (id.serviceId == serviceId && id.operationId == operationId);
}

std::string toString(ServiceId sid) {
    struct ServiceIdStringMapping {
        ServiceId id;
        const char *serviceIdString;
    };

    static const std::vector<ServiceIdStringMapping> serviceIdStringMapping = {
            {ServiceId::Undefined, "Undefined"},
            {ServiceId::Telematics, "Telematics"},
            {ServiceId::Connectivity, "Connectivity"},
            {ServiceId::WLAN, "WLAN"},
            {ServiceId::CommonPSIMPhoneConnectivity, "CommonPSIMPhoneConnectivity"},
            {ServiceId::CommonPhoneTelematics, "CommonPhoneTelematics"},
            {ServiceId::CommonAll, "CommonAll"},
            {ServiceId::Positioning, "Positioning"},
            {ServiceId::DiagnosticManagement, "DiagnosticManagement"},
            {ServiceId::OTA, "OTA"},
            {ServiceId::TVM, "TVM"},
            {ServiceId::InfotainmentPlatform, "InfotainmentPlatform"},
            {ServiceId::LM, "LM"},
    };

    std::string idString = std::string("ServiceId=") + std::to_string(static_cast<std::uint16_t>(sid));
    for (const ServiceIdStringMapping &element : serviceIdStringMapping) {
        if (element.id == sid) {
            idString = element.serviceIdString;
            break;
        }
    }
    return idString;
}

std::string toString(ServiceId sid, OperationId oid, const char *separator) {
    struct OperationIdStringMapping {
        CombinedId id;
        const char *operationIdString;
    };

    static const std::vector<OperationIdStringMapping> operationIdStringMapping = {
            {CombinedId(ServiceId::Undefined, OperationId::Undefined), "Undefined"},
            {CombinedId(ServiceId::Telematics, OperationId::Undefined), "Undefined"},
            {CombinedId(ServiceId::Telematics, OperationId::SVTStatus), "SVTStatus"},
            {CombinedId(ServiceId::Telematics, OperationId::TNStatus), "TNStatus"},
            {CombinedId(ServiceId::Telematics, OperationId::TelematicSettings), "TelematicSettings"},
            {CombinedId(ServiceId::Telematics, OperationId::PositionData), "PositionData"},
            {CombinedId(ServiceId::Telematics, OperationId::TextMessage), "TextMessage"},
            {CombinedId(ServiceId::Telematics, OperationId::SubscriptionActivation), "SubscriptionActivation"},
            {CombinedId(ServiceId::Telematics, OperationId::ServiceActivation), "ServiceActivation"},
            {CombinedId(ServiceId::Telematics, OperationId::RescueStatus), "RescueStatus"},
            {CombinedId(ServiceId::Telematics, OperationId::IHUSystemInfo), "IHUSystemInfo"},
            {CombinedId(ServiceId::Telematics, OperationId::UserPrivacySettings), "UserPrivacySettings"},
            {CombinedId(ServiceId::Telematics, OperationId::SendToCar), "SendToCar"},
            {CombinedId(ServiceId::Telematics, OperationId::SendToCarConfirmation), "SendToCarConfirmation"},
            {CombinedId(ServiceId::Telematics, OperationId::ClimateTimers), "ClimateTimers"},
            {CombinedId(ServiceId::Telematics, OperationId::ServiceBooking), "ServiceBooking"},
            {CombinedId(ServiceId::Telematics, OperationId::SoHWarning), "SoHWarning"},
            {CombinedId(ServiceId::Telematics, OperationId::SoHPacketSend), "SoHPacketSend"},
            {CombinedId(ServiceId::Telematics, OperationId::SoHPackageUploaded), "SoHPackageUploaded"},
            {CombinedId(ServiceId::Telematics, OperationId::GenericSettingSynch), "GenericSettingSynch"},
            {CombinedId(ServiceId::Telematics, OperationId::EcallSettings), "EcallSettings"},
            {CombinedId(ServiceId::Connectivity, OperationId::Undefined), "Undefined"},
            {CombinedId(ServiceId::Connectivity, OperationId::PSIMDataCounter), "PSIMDataCounter"},
            {CombinedId(ServiceId::Connectivity, OperationId::PSIMResetDataCounter), "PSIMResetDataCounter"},
            {CombinedId(ServiceId::Connectivity, OperationId::PSIMNetworkConfiguration), "PSIMNetworkConfiguration"},
            {CombinedId(ServiceId::Connectivity, OperationId::PSIMConnect), "PSIMConnect"},
            {CombinedId(ServiceId::Connectivity, OperationId::PSIMConnectionStatus), "PSIMConnectionStatus"},
            {CombinedId(ServiceId::Connectivity, OperationId::PSIMRoamingConfiguration), "PSIMRoamingConfiguration"},
            {CombinedId(ServiceId::Connectivity, OperationId::InternetGateway), "InternetGateway"},
            {CombinedId(ServiceId::Connectivity, OperationId::ConnectivityStatus), "ConnectivityStatus"},
            {CombinedId(ServiceId::Connectivity, OperationId::ConnectWorkshopWlan), "ConnectWorkshopWlan"},
            {CombinedId(ServiceId::Connectivity, OperationId::WorkshopWlanDetected), "WorkshopWlanDetected"},
            {CombinedId(ServiceId::Connectivity, OperationId::AccessRightPinCode), "AccessRightPinCode"},
            {CombinedId(ServiceId::Connectivity, OperationId::FactoryDefaultRestore), "FactoryDefaultRestore"},
            {CombinedId(ServiceId::Connectivity, OperationId::CurrentInternetSource), "CurrentInternetSource"},
            {CombinedId(ServiceId::Connectivity, OperationId::InternetSourceCtrlBT), "InternetSourceCtrlBT"},
            {CombinedId(ServiceId::Connectivity, OperationId::InternetSourceCtrlUSB), "InternetSourceCtrlUSB"},
            {CombinedId(ServiceId::Connectivity, OperationId::PSIMMessage), "PSIMMessage"},
            {CombinedId(ServiceId::WLAN, OperationId::Undefined), "Undefined"},
            {CombinedId(ServiceId::WLAN, OperationId::WLANMode), "WLANMode"},
            {CombinedId(ServiceId::WLAN, OperationId::WLANFreqBandSelect), "WLANFreqBandSelect"},
            {CombinedId(ServiceId::WLAN, OperationId::WLANChannelFreqInfo), "WLANChannelFreqInfo"},
            {CombinedId(ServiceId::WLAN, OperationId::WLANAPSSID), "WLANAPSSID"},
            {CombinedId(ServiceId::WLAN, OperationId::WLANAPPasswd), "WLANAPPasswd"},
            {CombinedId(ServiceId::WLAN, OperationId::WLANAPConnDev), "WLANAPConnDev"},
            {CombinedId(ServiceId::WLAN, OperationId::WLANSTAConnect), "WLANSTAConnect"},
            {CombinedId(ServiceId::WLAN, OperationId::WLANSTADisconnect), "WLANSTADisconnect"},
            {CombinedId(ServiceId::WLAN, OperationId::WLANAPStatusSettings), "WLANAPStatusSettings"},
            {CombinedId(ServiceId::WLAN, OperationId::WLANSTAStatus), "WLANSTAStatus"},
            {CombinedId(ServiceId::WLAN, OperationId::WLANSTARememberedNetwks), "WLANSTARememberedNetwks"},
            {CombinedId(ServiceId::WLAN, OperationId::WLANSTAForgetRememberedNetwk), "WLANSTAForgetRememberedNetwk"},
            {CombinedId(ServiceId::CommonPSIMPhoneConnectivity, OperationId::Undefined), "Undefined"},
            {CombinedId(ServiceId::CommonPSIMPhoneConnectivity, OperationId::PSIMSecurity), "PSIMSecurity"},
            {CombinedId(ServiceId::CommonPSIMPhoneConnectivity, OperationId::PSIMEnterCode), "PSIMEnterCode"},
            {CombinedId(ServiceId::CommonPSIMPhoneConnectivity, OperationId::PSIMRegisterState), "PSIMRegisterState"},
            {CombinedId(ServiceId::CommonPSIMPhoneConnectivity, OperationId::PSIMNetworkOperators),
             "PSIMNetworkOperators"},
            {CombinedId(ServiceId::CommonPSIMPhoneConnectivity, OperationId::PSIMNetworkOperatorCommand),
             "PSIMNetworkOperatorCommand"},
            {CombinedId(ServiceId::CommonPSIMPhoneConnectivity, OperationId::PSIMState), "PSIMState"},
            {CombinedId(ServiceId::CommonPSIMPhoneConnectivity, OperationId::PSIMPhoneOperationMode),
             "PSIMPhoneOperationMode"},
            {CombinedId(ServiceId::CommonPSIMPhoneConnectivity, OperationId::PSIMSignalStrength), "PSIMSignalStrength"},
            {CombinedId(ServiceId::CommonPSIMPhoneConnectivity, OperationId::PSIMUssd), "PSIMUssd"},
            {CombinedId(ServiceId::CommonPhoneTelematics, OperationId::Undefined), "Undefined"},
            {CombinedId(ServiceId::CommonPhoneTelematics, OperationId::PremiumAudio), "PremiumAudio"},
            {CombinedId(ServiceId::CommonPhoneTelematics, OperationId::CallHandling), "CallHandling"},
            {CombinedId(ServiceId::CommonAll, OperationId::Undefined), "Undefined"},
            {CombinedId(ServiceId::CommonAll, OperationId::TEMIdentification), "TEMIdentification"},
            {CombinedId(ServiceId::CommonAll, OperationId::TEMRadioMode), "TEMRadioMode"},
            {CombinedId(ServiceId::CommonAll, OperationId::TunerFrequencies), "TunerFrequencies"},
            {CombinedId(ServiceId::CommonAll, OperationId::DLCConnectedSignal), "DLCConnectedSignal"},
            {CombinedId(ServiceId::Positioning, OperationId::Undefined), "Undefined"},
            {CombinedId(ServiceId::Positioning, OperationId::DeadReckonedPosition), "DeadReckonedPosition"},
            {CombinedId(ServiceId::Positioning, OperationId::GNSSPositionData), "GNSSPositionData"},
            {CombinedId(ServiceId::Positioning, OperationId::GNSSPositionDataAccuracy), "GNSSPositionDataAccuracy"},
            {CombinedId(ServiceId::DiagnosticManagement, OperationId::Undefined), "Undefined"},
            {CombinedId(ServiceId::DiagnosticManagement, OperationId::RemoteDiagnosticLink), "RemoteDiagnosticLink"},
            {CombinedId(ServiceId::DiagnosticManagement, OperationId::RemoteDiagnosticInfo), "RemoteDiagnosticInfo"},
            {CombinedId(ServiceId::DiagnosticManagement, OperationId::RequestUserAuthentication),
             "RequestUserAuthentication"},
            {CombinedId(ServiceId::DiagnosticManagement, OperationId::TextFromOperatorToUser),
             "TextFromOperatorToUser"},
            {CombinedId(ServiceId::DiagnosticManagement, OperationId::CurrentJ2534Session), "CurrentJ2534Session"},
            {CombinedId(ServiceId::DiagnosticManagement, OperationId::CurrentDoIPState), "CurrentDoIPState"},
            {CombinedId(ServiceId::DiagnosticManagement, OperationId::CurrentDoIPConnection), "CurrentDoIPConnection"},
            {CombinedId(ServiceId::DiagnosticManagement, OperationId::TextFromUserToOperator),
             "TextFromUserToOperator"},
            {CombinedId(ServiceId::DiagnosticManagement, OperationId::RequestRemoteDiagnostics),
             "RequestRemoteDiagnostics"},
            {CombinedId(ServiceId::DiagnosticManagement, OperationId::AbortRemoteDiagnostics),
             "AbortRemoteDiagnostics"},
            {CombinedId(ServiceId::DiagnosticManagement, OperationId::UpdateDaCMode), "UpdateDaCMode"},
            {CombinedId(ServiceId::DiagnosticManagement, OperationId::ApprovalStatus), "ApprovalStatus"},
            {CombinedId(ServiceId::OTA, OperationId::Undefined), "Undefined"},
            {CombinedId(ServiceId::OTA, OperationId::DownloadStatus), "DownloadStatus"},
            {CombinedId(ServiceId::OTA, OperationId::DownloadSoftware), "DownloadSoftware"},
            {CombinedId(ServiceId::OTA, OperationId::DeletedSoftware), "DeletedSoftware"},
            {CombinedId(ServiceId::OTA, OperationId::DeviceInstall), "DeviceInstall"},
            {CombinedId(ServiceId::OTA, OperationId::CancelDownload), "CancelDownload"},
            {CombinedId(ServiceId::OTA, OperationId::LocalStorage), "LocalStorage"},
            {CombinedId(ServiceId::TVM, OperationId::Undefined), "Undefined"},
            {CombinedId(ServiceId::TVM, OperationId::TvmVehicleInfo), "TvmVehicleInfo"},
            {CombinedId(ServiceId::InfotainmentPlatform, OperationId::Undefined), "Undefined"},
            {CombinedId(ServiceId::InfotainmentPlatform, OperationId::DimFullAppScreenUpdate),
             "DimFullAppScreenUpdate"},
            {CombinedId(ServiceId::InfotainmentPlatform, OperationId::DimItemUpdatePartial), "DimItemUpdatePartial"},
            {CombinedId(ServiceId::InfotainmentPlatform, OperationId::IHUSteerWheelSwitch), "IHUSteerWheelSwitch"},
            {CombinedId(ServiceId::InfotainmentPlatform, OperationId::DIMNotification), "DIMNotification"},
            {CombinedId(ServiceId::InfotainmentPlatform, OperationId::DIMCurrentlyActiveSoundArea),
             "DIMCurrentlyActiveSoundArea"},
            {CombinedId(ServiceId::InfotainmentPlatform, OperationId::DIMTbTArea), "DIMTbTArea"},
            {CombinedId(ServiceId::InfotainmentPlatform, OperationId::IHUDIMResponse), "IHUDIMResponse"},
            {CombinedId(ServiceId::InfotainmentPlatform, OperationId::DIMHitlist), "DIMHitlist"},
            {CombinedId(ServiceId::LM, OperationId::Undefined), "Undefined"},
            {CombinedId(ServiceId::LM, OperationId::IpActivity), "IpActivity"},
    };

    std::string idString = toString(sid);
    for (const OperationIdStringMapping &element : operationIdStringMapping) {
        if (element.id.serviceId == sid && element.id.operationId == oid) {
            idString += separator;
            idString += element.operationIdString;
            break;
        }
    }

    return idString;
}

std::string toString(const CombinedId &id, const char *separator) {
    return toString(id.serviceId, id.operationId, separator);
}

const char *toString(OperationType ot) {
    switch (ot) {
        case OperationType::REQUEST:
            return "REQUEST";
        case OperationType::SETREQUEST_NORETURN:
            return "SETREQUEST_NORETURN";
        case OperationType::SETREQUEST:
            return "SETREQUEST";
        case OperationType::NOTIFICATION_REQUEST:
            return "NOTIFICATION_REQUEST";
        case OperationType::RESPONSE:
            return "RESPONSE";
        case OperationType::NOTIFICATION:
            return "NOTIFICATION";
        case OperationType::NOTIFICATION_CYCLIC:
            return "NOTIFICATION_CYCLIC";
        case OperationType::ACK:
            return "ACK";
        case OperationType::ERROR:
            return "ERROR";
        case OperationType::UNDEFINED:
            return "UNDEFINED";
        default:
            return "<Unknown>";
    }
}

const char *toString(DataType dt) {
    switch (dt) {
        case DataType::ENCODED:
            return "ENCODED";
        case DataType::NOT_ENCODED:
            return "NOT_ENCODED";
        case DataType::UNDEFINED:
            return "UNDEFINED";
        default:
            return "<Unknown>";
    }
}

}  // VccIpCmd
}  // Connectivity
