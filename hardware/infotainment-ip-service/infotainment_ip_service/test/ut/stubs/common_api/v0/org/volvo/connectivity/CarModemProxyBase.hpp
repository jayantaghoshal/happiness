/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This is the CarModem interface on IP Command Bus
 */
#ifndef V0_ORG_VOLVO_CONNECTIVITY_Car_Modem_PROXY_BASE_HPP_
#define V0_ORG_VOLVO_CONNECTIVITY_Car_Modem_PROXY_BASE_HPP_

#include <v0/org/volvo/connectivity/CarModem.hpp>


#include <v0/org/volvo/connectivity/IpCommandBusTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace volvo {
namespace connectivity {

class CarModemProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::org::volvo::connectivity::CarModem::CarModem_ApnConfigurationStatus> CarModemCurrentApnConfigurationAttribute;
    typedef CommonAPI::Event<
        ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_ConnectionStatus
    > CarModemConnectionStatusNotificationEvent;
    typedef CommonAPI::Event<
        ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_RegistrationStatus
    > CarModemNetworkRegistrationStatusNotificationEvent;
    typedef CommonAPI::Event<
        ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMCardStatus
    > CarModemPSIMStateNotificationEvent;
    typedef CommonAPI::Event<
        uint8_t
    > CarModemSignalStrengthChangedNotificationEvent;
    typedef CommonAPI::Event<
        ::v0::org::volvo::connectivity::CarModem::CarModem_UssdStatus, std::string
    > CarModemUssdNotificationEvent;
    typedef CommonAPI::Event<
        ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_OperatorSelection, ::v0::org::volvo::connectivity::IpCommandBusTypes::GenericOkStatus
    > CarModemNetworkSelectionNotificationEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors&, const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_ConnectionStatus&)> GetCarModemConnectionStatusAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors&, const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_RegistrationStatus&)> GetCarModemRegistrationStatusAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors&, const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMCardStatus&)> GetCarModemPSIMStatusAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors&, const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMDataCounter&)> GetCarModemPSIMDataCounterAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors&, const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_ResetSIMDataCounter&)> ResetCarModemPSIMDataCounterAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors&, const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMSecuritySetting&)> SetCarModemPSIMSecurityAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors&, const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMSecuritySetting&)> GetCarModemPSIMSecurityAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors&)> EnterCarModemPSIMCodeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors&, const bool&)> GetCarModemRoamingConfigAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors&, const bool&)> SetCarModemRoamingConfigAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors&, const bool&)> GetCarModemChangePINMenuAvailabilityAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors&)> RequestCarModemApnConfigurationAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors&, const CarModem::CarModem_UssdStatus&, const std::string&)> SendCarModemUssdRequestAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors&, const std::vector<::v0::org::volvo::connectivity::IpCommandBusTypes::NetworkOperator>&)> RequestCarModemNetworkScanAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors&, const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_OperatorSelection&, const ::v0::org::volvo::connectivity::IpCommandBusTypes::GenericOkStatus&)> SetCarModemNetworkSelectionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors&, const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_OperatorSelection&, const ::v0::org::volvo::connectivity::IpCommandBusTypes::GenericOkStatus&)> GetCarModemNetworkSelectionAsyncCallback;

    virtual CarModemCurrentApnConfigurationAttribute& getCarModemCurrentApnConfigurationAttribute() = 0;

    /**
     * description: PSIM Connection Status notification
     */
    virtual CarModemConnectionStatusNotificationEvent& getCarModemConnectionStatusNotificationEvent() = 0;
    /**
     * description: CarModem Registration Status notification
     */
    virtual CarModemNetworkRegistrationStatusNotificationEvent& getCarModemNetworkRegistrationStatusNotificationEvent() = 0;
    virtual CarModemPSIMStateNotificationEvent& getCarModemPSIMStateNotificationEvent() = 0;
    virtual CarModemSignalStrengthChangedNotificationEvent& getCarModemSignalStrengthChangedNotificationEvent() = 0;
    /**
     * description: Notification generated when USSD notification is received from Modem hosting Ecu
     */
    virtual CarModemUssdNotificationEvent& getCarModemUssdNotificationEvent() = 0;
    /**
     * description: Notification generated when Network Operation Selection notification is
     *   received from Modem hosting Ecu
     */
    virtual CarModemNetworkSelectionNotificationEvent& getCarModemNetworkSelectionNotificationEvent() = 0;

    /**
     * description: Get the current CarModem Connection Status.  This method returns
     *   ConnectionStatus for PSIM and cellular technology in use
     */
    virtual void GetCarModemConnectionStatus(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_ConnectionStatus &_outConnectionStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetCarModemConnectionStatusAsync(GetCarModemConnectionStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Get the current Network registration status
     */
    virtual void GetCarModemRegistrationStatus(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_RegistrationStatus &_outRegistrationStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetCarModemRegistrationStatusAsync(GetCarModemRegistrationStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Get current state of SIM card
     */
    virtual void GetCarModemPSIMStatus(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMCardStatus &_outSIMCardStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetCarModemPSIMStatusAsync(GetCarModemPSIMStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Get PSIM data counter
     */
    virtual void GetCarModemPSIMDataCounter(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMDataCounter &_outSIMDataCounter, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetCarModemPSIMDataCounterAsync(GetCarModemPSIMDataCounterAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Reset PSIM data counter
     */
    virtual void ResetCarModemPSIMDataCounter(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_ResetSIMDataCounter &_outSIMDataCounter, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> ResetCarModemPSIMDataCounterAsync(ResetCarModemPSIMDataCounterAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Set PSIM Security
     */
    virtual void SetCarModemPSIMSecurity(const std::string &_pin, const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMSecuritySetting &_setting, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMSecuritySetting &_outSIMSecuritySetting, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SetCarModemPSIMSecurityAsync(const std::string &_pin, const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMSecuritySetting &_setting, SetCarModemPSIMSecurityAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Get PSIM Security
     */
    virtual void GetCarModemPSIMSecurity(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMSecuritySetting &_outSIMSecuritySetting, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetCarModemPSIMSecurityAsync(GetCarModemPSIMSecurityAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: PSIMEnterCode-SetRequest
     */
    virtual void EnterCarModemPSIMCode(const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_PinPukCommand &_command, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> EnterCarModemPSIMCodeAsync(const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_PinPukCommand &_command, EnterCarModemPSIMCodeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void GetCarModemRoamingConfig(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, bool &_roamingStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetCarModemRoamingConfigAsync(GetCarModemRoamingConfigAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void SetCarModemRoamingConfig(const bool &_roamingStatus, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, bool &_currentRoamingStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SetCarModemRoamingConfigAsync(const bool &_roamingStatus, SetCarModemRoamingConfigAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Get whether the change PIN menu should be available
     */
    virtual void GetCarModemChangePINMenuAvailability(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, bool &_menuVisibility, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetCarModemChangePINMenuAvailabilityAsync(GetCarModemChangePINMenuAvailabilityAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void RequestCarModemApnConfiguration(const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_ApnConfiguration &_requestedApnConfiguration, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> RequestCarModemApnConfigurationAsync(const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_ApnConfiguration &_requestedApnConfiguration, RequestCarModemApnConfigurationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Send USSD (Unstructured Supplementary Service Data) to network
     */
    virtual void SendCarModemUssdRequest(const std::string &_ussdCode, const std::string &_languageCode, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, CarModem::CarModem_UssdStatus &_ussdStatus, std::string &_ussdReturnCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SendCarModemUssdRequestAsync(const std::string &_ussdCode, const std::string &_languageCode, SendCarModemUssdRequestAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Request NetworkOperators scanning
     */
    virtual void RequestCarModemNetworkScan(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, std::vector<::v0::org::volvo::connectivity::IpCommandBusTypes::NetworkOperator> &_outNetworkOperators, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> RequestCarModemNetworkScanAsync(RequestCarModemNetworkScanAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: PSIMNetworkOperatorCommand-SetRequest
     */
    virtual void SetCarModemNetworkSelection(const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_OperatorSelection &_inOperator, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_OperatorSelection &_outStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::GenericOkStatus &_operatorSelectionResult, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SetCarModemNetworkSelectionAsync(const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_OperatorSelection &_inOperator, SetCarModemNetworkSelectionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: PSIMNetworkOperatorCommand-Request
     */
    virtual void GetCarModemNetworkSelection(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_OperatorSelection &_outStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::GenericOkStatus &_operatorSelectionResult, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetCarModemNetworkSelectionAsync(GetCarModemNetworkSelectionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace connectivity
} // namespace volvo
} // namespace org
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVO_CONNECTIVITY_Car_Modem_PROXY_BASE_HPP_
