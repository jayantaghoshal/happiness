/*===========================================================================*\
 * Copyright 2017 Delphi Technologies, Inc., All Rights Reserved.
 * Delphi Confidential
\*===========================================================================*/
/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201512091508.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This is the telematics service franca interface
 */
#ifndef MOCK_TELEMATICS_SERVICE_STUB_H
#define MOCK_TELEMATICS_SERVICE_STUB_H

#include <sstream>

#include <gmock/gmock.h>
#include <gtest/gtest.h>
#include <v0/org/volvo/connectivity/IpCommandBusTypes.hpp>
#include <v0/org/volvo/connectivity/TelematicsStub.hpp>

#include "services/telematics_service_stub.h"

namespace v0_conn = v0::org::volvo::connectivity;

/**
 * Provides a default implementation for MockTelematicsStubRemoteEvent and
 * MockTelematicsStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class MockTelematicsStub : public Connectivity::TelematicsStub
{
public:
    MockTelematicsStub() : TelematicsStub(nullptr)
    {
    }

    MockTelematicsStub(Connectivity::ITelematicsService *service) : Connectivity::TelematicsStub(service)
    {
    }

    MOCK_METHOD2(fireSoHPackageUploadedNotificationEvent,
                 void(const std::string &_packetId, const v0_conn::IpCommandBusTypes::GenericOkStatus &_result));

    MOCK_METHOD1(fireSubscriptionActivationNotificationEvent,
                 void(const v0_conn::IpCommandBusTypes::TEM_ActivationStatus &_status));

    MOCK_METHOD9(fireRescueStatusNotificationEvent,
                 void(const v0_conn::IpCommandBusTypes::TEM_RescueStatus &_raStatus,
                      const v0_conn::IpCommandBusTypes::TEM_RescueStatus &_eaStatus,
                      const v0_conn::IpCommandBusTypes::TEM_RescueStatus &_sdnStatus,
                      const v0_conn::IpCommandBusTypes::TEM_VoiceStatus &_voiceStatus,
                      const v0_conn::IpCommandBusTypes::SourceStatus &_voiceSource,
                      const v0_conn::IpCommandBusTypes::TEM_MessageStatus &_messageStatus,
                      const v0_conn::IpCommandBusTypes::TEM_ButtonStatus &_buttonStatus,
                      const v0_conn::IpCommandBusTypes::TEM_PSAPStatus &_psapConfirmStatus,
                      const v0_conn::IpCommandBusTypes::GenericOkStatus &_backupAudioStatus));

    MOCK_METHOD1(fireSVTStatusNotificationEvent, void(const v0_conn::IpCommandBusTypes::SecurityStatus &_svtStatus));

    MOCK_METHOD1(fireTNStatusNotificationEvent, void(const v0_conn::IpCommandBusTypes::SecurityStatus &_tnStatus));
};

#endif  // MOCK_TELEMATICS_SERVICE_STUB_H
