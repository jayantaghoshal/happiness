/*===========================================================================*\
 * Copyright 2017 Delphi Technologies, Inc., All Rights Reserved.
 * Delphi Confidential
\*===========================================================================*/
/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include "mock_wlan_service_stub.h"
#include <assert.h>

namespace gen_conn = v0::org::volvo::connectivity;

namespace Connectivity
{
WlanStub::WlanStub(IWlanService *service)
    : remoteEventHandler_(this), interfaceVersion_(CommonAPI::Version(0, 1)), service_(service)
{
}

WlanStub::RemoteEventHandler::RemoteEventHandler(WlanStub *_defaultStub) : defaultStub_(_defaultStub)
{
}

const CommonAPI::Version &WlanStub::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client)
{
    (void)_client;
    return interfaceVersion_;
}

gen_conn::WlanStubRemoteEvent *WlanStub::initStubAdapter(const std::shared_ptr<gen_conn::WlanStubAdapter> &_adapter)
{
    CommonAPI::Stub<gen_conn::WlanStubAdapter, gen_conn::WlanStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}

/**
 * description: (0x040D WLANSTAStatus.Request)
 */
void WlanStub::WlanStaStatus(const std::shared_ptr<CommonAPI::ClientId> _client, WlanStaStatusReply_t _reply)
{
    fprintf(stderr, "Not supposed to reach this stage in service layer tests...");
    assert(0);
}

/**
 * description: (0x0400 WLANMode.Request)
    Request for the current WLAN mode.
 */
void WlanStub::WlanModeRequest(const std::shared_ptr<CommonAPI::ClientId> _client, WlanModeRequestReply_t _reply)
{
    fprintf(stderr, "Not supposed to reach this stage in service layer tests...");
    assert(0);
}

/**
 * description: (0x0400 WLANMode.SetRequest)
    Requests to set a new WLAN mode, and confirms
 *   the success of this action with a response containing the mode.
 */
void WlanStub::WlanModeSetRequest(
    const std::shared_ptr<CommonAPI::ClientId> _client,
    ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanMode _inWlanMode,
    WlanModeSetRequestReply_t _reply)
{
    fprintf(stderr, "Not supposed to reach this stage in service layer tests...");
    assert(0);
}

/**
 * description: (0x0408 WLANSTAConnect.SetRequest)
        Connect to a WiFi network.
 */
void WlanStub::WlanStaConnectSetRequest(
    const std::shared_ptr<CommonAPI::ClientId> _client,
    ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Ssid _inSsid,
    ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanExternalPassword _inWlanPassword,
    WlanStaConnectSetRequestReply_t _reply)
{
    fprintf(stderr, "Not supposed to reach this stage in service layer tests...");
    assert(0);
}

/**
 * description: (0x0409 WLANSTADisconnect.OpGeneric-Request)
        The client requests VCM
 *   (Wi-Fi STA) to disconnect from the currently connected external AP.
 */
void WlanStub::WlanStaDisconnectRequest(const std::shared_ptr<CommonAPI::ClientId> _client,
                                        WlanStaDisconnectRequestReply_t _reply)
{
    fprintf(stderr, "Not supposed to reach this stage in service layer tests...");
    assert(0);
}

/**
 * description: (0x040E WLANSTARememberedNetwks.OpGeneric-Request)
        When Wi-Fi STA gets
 *   successfully connected to an external network for the first time,
        the
 *   external network automatically becomes a remembered network.
        VCM
 *   (Wi-Fi STA) shall provide the remembered network list to IHU HMI on request.

 *          Remembered network list is ordered by most recent remembered network on
 *   the top and so on.
        The list at maximum can contain 50 networks.

 *      The oldest remembered network will be dropped to accommodate the latest
 *   remembered network if the maximum number has already reached.
 */
void WlanStub::WlanStaRememberedNetwksRequest(const std::shared_ptr<CommonAPI::ClientId> _client,
                                              WlanStaRememberedNetwksRequestReply_t _reply)
{
    fprintf(stderr, "Not supposed to reach this stage in service layer tests...");
    assert(0);
}

/**
 * description: (0x040F WLANSTAForgetRememberedNetwk.SetRequest)
        This operation is
 *   used when user request VCM (Wi-Fi) to forget a remembered network.

 *   VCM (Wi-Fi) forgets the network by deleting login information and removing it
 *   from the remembered networks list.
        The information will be shown in
 *   HMI.
        There are two scenarios related to this operation:
        - If
 *   the network is an available network in network list, it will still be
 *   displayed as available.
        - If user wishes to forget a remembered
 *   network to which the Wi-Fi STA is currently connected, Wi-Fi STA will be
 *   disconnected as well.
 */
void WlanStub::WlanStaForgetRememberedNetwkSetRequest(
    const std::shared_ptr<CommonAPI::ClientId> _client,
    ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Ssid _inSsidToForget,
    WlanStaForgetRememberedNetwkSetRequestReply_t _reply)
{
    fprintf(stderr, "Not supposed to reach this stage in service layer tests...");
    assert(0);
}

/**
 * description: (0x040D WLANSTAStatus.Notification)
 */
void WlanStub::fireWlanStaStatusNotificationEvent(
    const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanConnectStatus
        &_outWlanConnectionStatus,
    const std::vector<
        ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_AvailableNetworkInformation>
        &_outAvailableNetworkInfoList)
{
    static_cast<MockWlanStub *>(this)->fireWlanStaStatusNotificationEvent(_outWlanConnectionStatus,
                                                                          _outAvailableNetworkInfoList);
}

/**
 * description: (0x0408 WLANSTAConnect.)
 *              Event based notification of WLAN STA Connect
 */
void WlanStub::fireWlanStaConnectNotificationEvent(
    const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Ssid &_outCurrentSsid,
    const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanConnectStatus
        &_outCurrentWlanConnectStatus)
{
    static_cast<MockWlanStub *>(this)->fireWlanStaConnectNotificationEvent(_outCurrentSsid,
                                                                           _outCurrentWlanConnectStatus);
}

/**
 * description: (0x0402 WLANChannelFreqInfo)
 */
void WlanStub::fireWlanChannelFreqInfoAttributeChanged(
    const ::v0::org::volvo::connectivity::Wlan::WlanChannelFreqInfo &wlanChannelFreqInfo)
{
    channel_freq_info_ = wlanChannelFreqInfo;
    static_cast<MockWlanStub *>(this)->fireWlanChannelFreqInfoAttributeChanged(wlanChannelFreqInfo);
}

const ::v0::org::volvo::connectivity::Wlan::WlanChannelFreqInfo &WlanStub::getWlanChannelFreqInfoAttribute(
    const std::shared_ptr<CommonAPI::ClientId> _client)
{
    return static_cast<MockWlanStub *>(this)->getWlanChannelFreqInfoAttribute(_client);
}

/**
 * description: (0x0400 WLANMode.Notification)
    Event based notification of current WLAN
 *   mode.
 */
void WlanStub::fireWlanModeNotificationEvent(
    const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanMode &_wlanMode)
{
    static_cast<MockWlanStub *>(this)->fireWlanModeNotificationEvent(_wlanMode);
}

// All other methods are virtual so no more glue needed.

}  // namespace Connectivity
