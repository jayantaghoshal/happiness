/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201512091508.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: For source documentation of types and variables see infotainmentIpBus.asn
 */
#ifndef V0_ORG_VOLVO_CONNECTIVITY_Ip_Command_Bus_Types_HPP_
#define V0_ORG_VOLVO_CONNECTIVITY_Ip_Command_Bus_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace volvo {
namespace connectivity {

struct IpCommandBusTypes {
    
    struct Infotainment_IP_bus_Errors : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            OK = 0,
            GENERIC_ERROR = 1,
            TIMEOUT = 2,
            BUSY = 3,
            DECODE_ERROR = 4,
            REMOTE_ERROR = 5
        };
        
        Infotainment_IP_bus_Errors() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::OK)) {}
        Infotainment_IP_bus_Errors(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::OK):
                case static_cast<int32_t>(Literal::GENERIC_ERROR):
                case static_cast<int32_t>(Literal::TIMEOUT):
                case static_cast<int32_t>(Literal::BUSY):
                case static_cast<int32_t>(Literal::DECODE_ERROR):
                case static_cast<int32_t>(Literal::REMOTE_ERROR):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Infotainment_IP_bus_Errors &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Infotainment_IP_bus_Errors &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Infotainment_IP_bus_Errors &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Infotainment_IP_bus_Errors &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Infotainment_IP_bus_Errors &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Infotainment_IP_bus_Errors &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct Infotainment_IP_bus_GPSSystemTime : CommonAPI::Struct<uint32_t, uint32_t> {
    	
    	Infotainment_IP_bus_GPSSystemTime() {
    	}
    	Infotainment_IP_bus_GPSSystemTime(const uint32_t &_weekNumber, const uint32_t &_timeOfWeek)
    	{
    		std::get<0>(values_) = _weekNumber;
    		std::get<1>(values_) = _timeOfWeek;
    	}
    	/**
    	 * description: the GPS week number
    	 */
    	inline const uint32_t &getWeekNumber() const { return std::get<0>(values_); }
    	inline void setWeekNumber(const uint32_t &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: time of week in 1/1000 s
    	 */
    	inline const uint32_t &getTimeOfWeek() const { return std::get<1>(values_); }
    	inline void setTimeOfWeek(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const Infotainment_IP_bus_GPSSystemTime& _other) const {
                return (getWeekNumber() == _other.getWeekNumber() && getTimeOfWeek() == _other.getTimeOfWeek());
        }
    	inline bool operator!=(const Infotainment_IP_bus_GPSSystemTime &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct Infotainment_IP_bus_DateTime : CommonAPI::Struct<uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t> {
    	
    	Infotainment_IP_bus_DateTime() {
    	}
    	Infotainment_IP_bus_DateTime(const uint32_t &_year, const uint32_t &_month, const uint32_t &_day, const uint32_t &_hour, const uint32_t &_minute, const uint32_t &_second)
    	{
    		std::get<0>(values_) = _year;
    		std::get<1>(values_) = _month;
    		std::get<2>(values_) = _day;
    		std::get<3>(values_) = _hour;
    		std::get<4>(values_) = _minute;
    		std::get<5>(values_) = _second;
    	}
    	inline const uint32_t &getYear() const { return std::get<0>(values_); }
    	inline void setYear(const uint32_t &_value) { std::get<0>(values_) = _value; }
    	inline const uint32_t &getMonth() const { return std::get<1>(values_); }
    	inline void setMonth(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	inline const uint32_t &getDay() const { return std::get<2>(values_); }
    	inline void setDay(const uint32_t &_value) { std::get<2>(values_) = _value; }
    	inline const uint32_t &getHour() const { return std::get<3>(values_); }
    	inline void setHour(const uint32_t &_value) { std::get<3>(values_) = _value; }
    	inline const uint32_t &getMinute() const { return std::get<4>(values_); }
    	inline void setMinute(const uint32_t &_value) { std::get<4>(values_) = _value; }
    	inline const uint32_t &getSecond() const { return std::get<5>(values_); }
    	inline void setSecond(const uint32_t &_value) { std::get<5>(values_) = _value; }
    	inline bool operator==(const Infotainment_IP_bus_DateTime& _other) const {
                return (getYear() == _other.getYear() && getMonth() == _other.getMonth() && getDay() == _other.getDay() && getHour() == _other.getHour() && getMinute() == _other.getMinute() && getSecond() == _other.getSecond());
        }
    	inline bool operator!=(const Infotainment_IP_bus_DateTime &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct Infotainment_IP_bus_CoordinatesLongLat_WGS84 : CommonAPI::Struct<double, double> {
    	
    	Infotainment_IP_bus_CoordinatesLongLat_WGS84() {
    	}
    	Infotainment_IP_bus_CoordinatesLongLat_WGS84(const double &_longitude, const double &_latitude)
    	{
    		std::get<0>(values_) = _longitude;
    		std::get<1>(values_) = _latitude;
    	}
    	/**
    	 * description: longitude in decimal degrees notation
    	 */
    	inline const double &getLongitude() const { return std::get<0>(values_); }
    	inline void setLongitude(const double &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: latitude in decimal degrees notation
    	 */
    	inline const double &getLatitude() const { return std::get<1>(values_); }
    	inline void setLatitude(const double &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const Infotainment_IP_bus_CoordinatesLongLat_WGS84& _other) const {
                return (getLongitude() == _other.getLongitude() && getLatitude() == _other.getLatitude());
        }
    	inline bool operator!=(const Infotainment_IP_bus_CoordinatesLongLat_WGS84 &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct Infotainment_IP_bus_GeographicalPosition_WGS84 : CommonAPI::Struct<Infotainment_IP_bus_CoordinatesLongLat_WGS84, double> {
    	
    	Infotainment_IP_bus_GeographicalPosition_WGS84() {
    	}
    	Infotainment_IP_bus_GeographicalPosition_WGS84(const Infotainment_IP_bus_CoordinatesLongLat_WGS84 &_longLat, const double &_altitude)
    	{
    		std::get<0>(values_) = _longLat;
    		std::get<1>(values_) = _altitude;
    	}
    	inline const Infotainment_IP_bus_CoordinatesLongLat_WGS84 &getLongLat() const { return std::get<0>(values_); }
    	inline void setLongLat(const Infotainment_IP_bus_CoordinatesLongLat_WGS84 &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: altitude above mean sea level in metres
    	 */
    	inline const double &getAltitude() const { return std::get<1>(values_); }
    	inline void setAltitude(const double &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const Infotainment_IP_bus_GeographicalPosition_WGS84& _other) const {
                return (getLongLat() == _other.getLongLat() && getAltitude() == _other.getAltitude());
        }
    	inline bool operator!=(const Infotainment_IP_bus_GeographicalPosition_WGS84 &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct Infotainment_IP_bus_Velocity : CommonAPI::Struct<uint32_t, uint32_t, int32_t> {
    	
    	Infotainment_IP_bus_Velocity() {
    	}
    	Infotainment_IP_bus_Velocity(const uint32_t &_speed, const uint32_t &_horizontalVelocity, const int32_t &_verticalVelocity)
    	{
    		std::get<0>(values_) = _speed;
    		std::get<1>(values_) = _horizontalVelocity;
    		std::get<2>(values_) = _verticalVelocity;
    	}
    	/**
    	 * description: speed in 1/1000 m/s (mm/s)
    	 */
    	inline const uint32_t &getSpeed() const { return std::get<0>(values_); }
    	inline void setSpeed(const uint32_t &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: horizontal velocity in 1/1000 m/s (mm/s)
    	 */
    	inline const uint32_t &getHorizontalVelocity() const { return std::get<1>(values_); }
    	inline void setHorizontalVelocity(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: vertical velocity in 1/1000 m/s (mm/s)
    	 */
    	inline const int32_t &getVerticalVelocity() const { return std::get<2>(values_); }
    	inline void setVerticalVelocity(const int32_t &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const Infotainment_IP_bus_Velocity& _other) const {
                return (getSpeed() == _other.getSpeed() && getHorizontalVelocity() == _other.getHorizontalVelocity() && getVerticalVelocity() == _other.getVerticalVelocity());
        }
    	inline bool operator!=(const Infotainment_IP_bus_Velocity &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct Infotainment_IP_bus_GNSSUsage : CommonAPI::Struct<bool, bool, bool, bool, bool, bool> {
    	
    	Infotainment_IP_bus_GNSSUsage() {
    		std::get<0>(values_) = false;
    		std::get<1>(values_) = false;
    		std::get<2>(values_) = false;
    		std::get<3>(values_) = false;
    		std::get<4>(values_) = false;
    		std::get<5>(values_) = false;
    	}
    	Infotainment_IP_bus_GNSSUsage(const bool &_gpsIsUsed, const bool &_glonassIsUsed, const bool &_galileoIsUsed, const bool &_sbasIsUsed, const bool &_qzssL1IsUsed, const bool &_qzssL1SAIFIsUsed)
    	{
    		std::get<0>(values_) = _gpsIsUsed;
    		std::get<1>(values_) = _glonassIsUsed;
    		std::get<2>(values_) = _galileoIsUsed;
    		std::get<3>(values_) = _sbasIsUsed;
    		std::get<4>(values_) = _qzssL1IsUsed;
    		std::get<5>(values_) = _qzssL1SAIFIsUsed;
    	}
    	/**
    	 * description: used(True)/not used(False)
    	 */
    	inline const bool &getGpsIsUsed() const { return std::get<0>(values_); }
    	inline void setGpsIsUsed(const bool _value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: used(True)/not used(False)
    	 */
    	inline const bool &getGlonassIsUsed() const { return std::get<1>(values_); }
    	inline void setGlonassIsUsed(const bool _value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: used(True)/not used(False)
    	 */
    	inline const bool &getGalileoIsUsed() const { return std::get<2>(values_); }
    	inline void setGalileoIsUsed(const bool _value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: used(True)/not used(False)
    	 */
    	inline const bool &getSbasIsUsed() const { return std::get<3>(values_); }
    	inline void setSbasIsUsed(const bool _value) { std::get<3>(values_) = _value; }
    	/**
    	 * description: used(True)/not used(False)
    	 */
    	inline const bool &getQzssL1IsUsed() const { return std::get<4>(values_); }
    	inline void setQzssL1IsUsed(const bool _value) { std::get<4>(values_) = _value; }
    	/**
    	 * description: used(True)/not used(False)
    	 */
    	inline const bool &getQzssL1SAIFIsUsed() const { return std::get<5>(values_); }
    	inline void setQzssL1SAIFIsUsed(const bool _value) { std::get<5>(values_) = _value; }
    	inline bool operator==(const Infotainment_IP_bus_GNSSUsage& _other) const {
                return (getGpsIsUsed() == _other.getGpsIsUsed() && getGlonassIsUsed() == _other.getGlonassIsUsed() && getGalileoIsUsed() == _other.getGalileoIsUsed() && getSbasIsUsed() == _other.getSbasIsUsed() && getQzssL1IsUsed() == _other.getQzssL1IsUsed() && getQzssL1SAIFIsUsed() == _other.getQzssL1SAIFIsUsed());
        }
    	inline bool operator!=(const Infotainment_IP_bus_GNSSUsage &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct Infotainment_IP_bus_GnssFixType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kGnssFixType_notAvailable = 0,
            kGnssFixType_noFix = 1,
            kGnssFixType_fix2D = 2,
            kGnssFixType_fix3D = 3,
            kGnssFixType_startupMode = 4
        };
        
        Infotainment_IP_bus_GnssFixType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kGnssFixType_notAvailable)) {}
        Infotainment_IP_bus_GnssFixType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kGnssFixType_notAvailable):
                case static_cast<int32_t>(Literal::kGnssFixType_noFix):
                case static_cast<int32_t>(Literal::kGnssFixType_fix2D):
                case static_cast<int32_t>(Literal::kGnssFixType_fix3D):
                case static_cast<int32_t>(Literal::kGnssFixType_startupMode):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Infotainment_IP_bus_GnssFixType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Infotainment_IP_bus_GnssFixType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Infotainment_IP_bus_GnssFixType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Infotainment_IP_bus_GnssFixType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Infotainment_IP_bus_GnssFixType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Infotainment_IP_bus_GnssFixType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct Infotainment_IP_bus_GNSSStatus : CommonAPI::Struct<Infotainment_IP_bus_GnssFixType, bool, bool> {
    	
    	Infotainment_IP_bus_GNSSStatus() {
    		std::get<1>(values_) = false;
    		std::get<2>(values_) = false;
    	}
    	Infotainment_IP_bus_GNSSStatus(const Infotainment_IP_bus_GnssFixType &_fixType, const bool &_dgpsIsUsed, const bool &_selfEphemerisDataUsage)
    	{
    		std::get<0>(values_) = _fixType;
    		std::get<1>(values_) = _dgpsIsUsed;
    		std::get<2>(values_) = _selfEphemerisDataUsage;
    	}
    	/**
    	 * description: Specifies the current GNSS fix
    	 */
    	inline const Infotainment_IP_bus_GnssFixType &getFixType() const { return std::get<0>(values_); }
    	inline void setFixType(const Infotainment_IP_bus_GnssFixType &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: DGPS used(True)/not used(False)
    	 */
    	inline const bool &getDgpsIsUsed() const { return std::get<1>(values_); }
    	inline void setDgpsIsUsed(const bool _value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: Self ephemeris data used(True)/not used(False)
    	 */
    	inline const bool &getSelfEphemerisDataUsage() const { return std::get<2>(values_); }
    	inline void setSelfEphemerisDataUsage(const bool _value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const Infotainment_IP_bus_GNSSStatus& _other) const {
                return (getFixType() == _other.getFixType() && getDgpsIsUsed() == _other.getDgpsIsUsed() && getSelfEphemerisDataUsage() == _other.getSelfEphemerisDataUsage());
        }
    	inline bool operator!=(const Infotainment_IP_bus_GNSSStatus &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct Infotainment_IP_bus_NrOfSatellitesPerSystem : CommonAPI::Struct<uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t> {
    	
    	Infotainment_IP_bus_NrOfSatellitesPerSystem() {
    	}
    	Infotainment_IP_bus_NrOfSatellitesPerSystem(const uint32_t &_gps, const uint32_t &_glonass, const uint32_t &_galileo, const uint32_t &_sbas, const uint32_t &_qzssL1, const uint32_t &_qzssL1SAIF)
    	{
    		std::get<0>(values_) = _gps;
    		std::get<1>(values_) = _glonass;
    		std::get<2>(values_) = _galileo;
    		std::get<3>(values_) = _sbas;
    		std::get<4>(values_) = _qzssL1;
    		std::get<5>(values_) = _qzssL1SAIF;
    	}
    	/**
    	 * description: nbr of GPS satellites, 31=unknown
    	 */
    	inline const uint32_t &getGps() const { return std::get<0>(values_); }
    	inline void setGps(const uint32_t &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: nbr of GLONASS satellites, 31=unknown
    	 */
    	inline const uint32_t &getGlonass() const { return std::get<1>(values_); }
    	inline void setGlonass(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: nbr of Galileo satellites, 31=unknown
    	 */
    	inline const uint32_t &getGalileo() const { return std::get<2>(values_); }
    	inline void setGalileo(const uint32_t &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: nbr of SBAS satellites, 31=unknown
    	 */
    	inline const uint32_t &getSbas() const { return std::get<3>(values_); }
    	inline void setSbas(const uint32_t &_value) { std::get<3>(values_) = _value; }
    	/**
    	 * description: nbr of QZSS L1 satellites, 31=unknown
    	 */
    	inline const uint32_t &getQzssL1() const { return std::get<4>(values_); }
    	inline void setQzssL1(const uint32_t &_value) { std::get<4>(values_) = _value; }
    	/**
    	 * description: nbr of QZSS L1-SAIF satellites, 31=unknown
    	 */
    	inline const uint32_t &getQzssL1SAIF() const { return std::get<5>(values_); }
    	inline void setQzssL1SAIF(const uint32_t &_value) { std::get<5>(values_) = _value; }
    	inline bool operator==(const Infotainment_IP_bus_NrOfSatellitesPerSystem& _other) const {
                return (getGps() == _other.getGps() && getGlonass() == _other.getGlonass() && getGalileo() == _other.getGalileo() && getSbas() == _other.getSbas() && getQzssL1() == _other.getQzssL1() && getQzssL1SAIF() == _other.getQzssL1SAIF());
        }
    	inline bool operator!=(const Infotainment_IP_bus_NrOfSatellitesPerSystem &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct Infotainment_IP_bus_SatelliteUsage : CommonAPI::Struct<Infotainment_IP_bus_NrOfSatellitesPerSystem, Infotainment_IP_bus_NrOfSatellitesPerSystem> {
    	
    	Infotainment_IP_bus_SatelliteUsage() {
    	}
    	Infotainment_IP_bus_SatelliteUsage(const Infotainment_IP_bus_NrOfSatellitesPerSystem &_nrOfSatellitesVisible, const Infotainment_IP_bus_NrOfSatellitesPerSystem &_nrOfSatellitesUsed)
    	{
    		std::get<0>(values_) = _nrOfSatellitesVisible;
    		std::get<1>(values_) = _nrOfSatellitesUsed;
    	}
    	inline const Infotainment_IP_bus_NrOfSatellitesPerSystem &getNrOfSatellitesVisible() const { return std::get<0>(values_); }
    	inline void setNrOfSatellitesVisible(const Infotainment_IP_bus_NrOfSatellitesPerSystem &_value) { std::get<0>(values_) = _value; }
    	inline const Infotainment_IP_bus_NrOfSatellitesPerSystem &getNrOfSatellitesUsed() const { return std::get<1>(values_); }
    	inline void setNrOfSatellitesUsed(const Infotainment_IP_bus_NrOfSatellitesPerSystem &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const Infotainment_IP_bus_SatelliteUsage& _other) const {
                return (getNrOfSatellitesVisible() == _other.getNrOfSatellitesVisible() && getNrOfSatellitesUsed() == _other.getNrOfSatellitesUsed());
        }
    	inline bool operator!=(const Infotainment_IP_bus_SatelliteUsage &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct Infotainment_IP_bus_DOPValues : CommonAPI::Struct<uint32_t, uint32_t, uint32_t, uint32_t> {
    	
    	Infotainment_IP_bus_DOPValues() {
    	}
    	Infotainment_IP_bus_DOPValues(const uint32_t &_hdop, const uint32_t &_vdop, const uint32_t &_pdop, const uint32_t &_tdop)
    	{
    		std::get<0>(values_) = _hdop;
    		std::get<1>(values_) = _vdop;
    		std::get<2>(values_) = _pdop;
    		std::get<3>(values_) = _tdop;
    	}
    	/**
    	 * description: HDOP in 1/10. 255=unknown or >25.4
    	 */
    	inline const uint32_t &getHdop() const { return std::get<0>(values_); }
    	inline void setHdop(const uint32_t &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: VDOP in 1/10. 255=unknown or >25.4
    	 */
    	inline const uint32_t &getVdop() const { return std::get<1>(values_); }
    	inline void setVdop(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: PDOP in 1/10. 255=unknown or >25.4
    	 */
    	inline const uint32_t &getPdop() const { return std::get<2>(values_); }
    	inline void setPdop(const uint32_t &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: TDOP in 1/10. 255=unknown or >25.4
    	 */
    	inline const uint32_t &getTdop() const { return std::get<3>(values_); }
    	inline void setTdop(const uint32_t &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const Infotainment_IP_bus_DOPValues& _other) const {
                return (getHdop() == _other.getHdop() && getVdop() == _other.getVdop() && getPdop() == _other.getPdop() && getTdop() == _other.getTdop());
        }
    	inline bool operator!=(const Infotainment_IP_bus_DOPValues &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct Infotainment_IP_bus_ChannelCorrectionData : CommonAPI::Struct<int32_t, uint32_t, int32_t, int32_t, uint32_t> {
    	
    	Infotainment_IP_bus_ChannelCorrectionData() {
    	}
    	Infotainment_IP_bus_ChannelCorrectionData(const int32_t &_pseudoRangeMetres, const uint32_t &_pseudoRangeMillimetres, const int32_t &_rangeRate, const int32_t &_pseudoRangeCorrectionData, const uint32_t &_selfEphemerisPredictionTime)
    	{
    		std::get<0>(values_) = _pseudoRangeMetres;
    		std::get<1>(values_) = _pseudoRangeMillimetres;
    		std::get<2>(values_) = _rangeRate;
    		std::get<3>(values_) = _pseudoRangeCorrectionData;
    		std::get<4>(values_) = _selfEphemerisPredictionTime;
    	}
    	/**
    	 * description: mm
    	 */
    	inline const int32_t &getPseudoRangeMetres() const { return std::get<0>(values_); }
    	inline void setPseudoRangeMetres(const int32_t &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: the pseudo range is expressed in two parameters (due to 32 bit data type
    	 *   limitation),
    	        one in metres range and one in millimetre range. They
    	 *   need to be combined for full precision.
    	        E.g if pseudoRangeMetres =
    	 *   15123 and pseudoRangeMillimetres = 50, then the pseudeRange is 15123050 mm.
    	 */
    	inline const uint32_t &getPseudoRangeMillimetres() const { return std::get<1>(values_); }
    	inline void setPseudoRangeMillimetres(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: mm/s
    	 */
    	inline const int32_t &getRangeRate() const { return std::get<2>(values_); }
    	inline void setRangeRate(const int32_t &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: mm
    	 */
    	inline const int32_t &getPseudoRangeCorrectionData() const { return std::get<3>(values_); }
    	inline void setPseudoRangeCorrectionData(const int32_t &_value) { std::get<3>(values_) = _value; }
    	/**
    	 * description: 0=se data not used
    	 */
    	inline const uint32_t &getSelfEphemerisPredictionTime() const { return std::get<4>(values_); }
    	inline void setSelfEphemerisPredictionTime(const uint32_t &_value) { std::get<4>(values_) = _value; }
    	inline bool operator==(const Infotainment_IP_bus_ChannelCorrectionData& _other) const {
                return (getPseudoRangeMetres() == _other.getPseudoRangeMetres() && getPseudoRangeMillimetres() == _other.getPseudoRangeMillimetres() && getRangeRate() == _other.getRangeRate() && getPseudoRangeCorrectionData() == _other.getPseudoRangeCorrectionData() && getSelfEphemerisPredictionTime() == _other.getSelfEphemerisPredictionTime());
        }
    	inline bool operator!=(const Infotainment_IP_bus_ChannelCorrectionData &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct Infotainment_IP_bus_ExtendedChannelData_Choices : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kInfotainment_IP_bus_ExtendedChannelData_notSupported = 0,
            kInfotainment_IP_bus_ExtendedChannelData_data = 1
        };
        
        Infotainment_IP_bus_ExtendedChannelData_Choices() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kInfotainment_IP_bus_ExtendedChannelData_notSupported)) {}
        Infotainment_IP_bus_ExtendedChannelData_Choices(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kInfotainment_IP_bus_ExtendedChannelData_notSupported):
                case static_cast<int32_t>(Literal::kInfotainment_IP_bus_ExtendedChannelData_data):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Infotainment_IP_bus_ExtendedChannelData_Choices &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Infotainment_IP_bus_ExtendedChannelData_Choices &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Infotainment_IP_bus_ExtendedChannelData_Choices &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Infotainment_IP_bus_ExtendedChannelData_Choices &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Infotainment_IP_bus_ExtendedChannelData_Choices &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Infotainment_IP_bus_ExtendedChannelData_Choices &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct Infotainment_IP_bus_ExtendedChannelData : CommonAPI::Struct<Infotainment_IP_bus_ExtendedChannelData_Choices, Infotainment_IP_bus_ChannelCorrectionData> {
    	
    	Infotainment_IP_bus_ExtendedChannelData() {
    	}
    	Infotainment_IP_bus_ExtendedChannelData(const Infotainment_IP_bus_ExtendedChannelData_Choices &_choice, const Infotainment_IP_bus_ChannelCorrectionData &_data)
    	{
    		std::get<0>(values_) = _choice;
    		std::get<1>(values_) = _data;
    	}
    	inline const Infotainment_IP_bus_ExtendedChannelData_Choices &getChoice() const { return std::get<0>(values_); }
    	inline void setChoice(const Infotainment_IP_bus_ExtendedChannelData_Choices &_value) { std::get<0>(values_) = _value; }
    	inline const Infotainment_IP_bus_ChannelCorrectionData &getData() const { return std::get<1>(values_); }
    	inline void setData(const Infotainment_IP_bus_ChannelCorrectionData &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const Infotainment_IP_bus_ExtendedChannelData& _other) const {
                return (getChoice() == _other.getChoice() && getData() == _other.getData());
        }
    	inline bool operator!=(const Infotainment_IP_bus_ExtendedChannelData &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct Infotainment_IP_bus_SatelliteTrackingStatusType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kInfotainment_IP_bus_SatelliteTrackingStatusType_searching = 0,
            kInfotainment_IP_bus_SatelliteTrackingStatusType_tracking = 1,
            kInfotainment_IP_bus_SatelliteTrackingStatusType_collectedAndNotUsed = 2,
            kInfotainment_IP_bus_SatelliteTrackingStatusType_collectedAndUsed = 3
        };
        
        Infotainment_IP_bus_SatelliteTrackingStatusType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kInfotainment_IP_bus_SatelliteTrackingStatusType_searching)) {}
        Infotainment_IP_bus_SatelliteTrackingStatusType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kInfotainment_IP_bus_SatelliteTrackingStatusType_searching):
                case static_cast<int32_t>(Literal::kInfotainment_IP_bus_SatelliteTrackingStatusType_tracking):
                case static_cast<int32_t>(Literal::kInfotainment_IP_bus_SatelliteTrackingStatusType_collectedAndNotUsed):
                case static_cast<int32_t>(Literal::kInfotainment_IP_bus_SatelliteTrackingStatusType_collectedAndUsed):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Infotainment_IP_bus_SatelliteTrackingStatusType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Infotainment_IP_bus_SatelliteTrackingStatusType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Infotainment_IP_bus_SatelliteTrackingStatusType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Infotainment_IP_bus_SatelliteTrackingStatusType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Infotainment_IP_bus_SatelliteTrackingStatusType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Infotainment_IP_bus_SatelliteTrackingStatusType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct Infotainment_IP_bus_ChannelData : CommonAPI::Struct<uint32_t, Infotainment_IP_bus_SatelliteTrackingStatusType, uint32_t, uint32_t, uint32_t, uint32_t, Infotainment_IP_bus_ExtendedChannelData> {
    	
    	Infotainment_IP_bus_ChannelData() {
    	}
    	Infotainment_IP_bus_ChannelData(const uint32_t &_prn, const Infotainment_IP_bus_SatelliteTrackingStatusType &_trackingStatus, const uint32_t &_svacc, const uint32_t &_snr, const uint32_t &_azimuthAngle, const uint32_t &_elevationAngle, const Infotainment_IP_bus_ExtendedChannelData &_extendedData)
    	{
    		std::get<0>(values_) = _prn;
    		std::get<1>(values_) = _trackingStatus;
    		std::get<2>(values_) = _svacc;
    		std::get<3>(values_) = _snr;
    		std::get<4>(values_) = _azimuthAngle;
    		std::get<5>(values_) = _elevationAngle;
    		std::get<6>(values_) = _extendedData;
    	}
    	inline const uint32_t &getPrn() const { return std::get<0>(values_); }
    	inline void setPrn(const uint32_t &_value) { std::get<0>(values_) = _value; }
    	inline const Infotainment_IP_bus_SatelliteTrackingStatusType &getTrackingStatus() const { return std::get<1>(values_); }
    	inline void setTrackingStatus(const Infotainment_IP_bus_SatelliteTrackingStatusType &_value) { std::get<1>(values_) = _value; }
    	inline const uint32_t &getSvacc() const { return std::get<2>(values_); }
    	inline void setSvacc(const uint32_t &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: signal to noise ratio, dB
    	 */
    	inline const uint32_t &getSnr() const { return std::get<3>(values_); }
    	inline void setSnr(const uint32_t &_value) { std::get<3>(values_) = _value; }
    	/**
    	 * description: azimuth angle, 360/256 deg
    	 */
    	inline const uint32_t &getAzimuthAngle() const { return std::get<4>(values_); }
    	inline void setAzimuthAngle(const uint32_t &_value) { std::get<4>(values_) = _value; }
    	/**
    	 * description: elevation angle, 180/256 deg
    	 */
    	inline const uint32_t &getElevationAngle() const { return std::get<5>(values_); }
    	inline void setElevationAngle(const uint32_t &_value) { std::get<5>(values_) = _value; }
    	inline const Infotainment_IP_bus_ExtendedChannelData &getExtendedData() const { return std::get<6>(values_); }
    	inline void setExtendedData(const Infotainment_IP_bus_ExtendedChannelData &_value) { std::get<6>(values_) = _value; }
    	inline bool operator==(const Infotainment_IP_bus_ChannelData& _other) const {
                return (getPrn() == _other.getPrn() && getTrackingStatus() == _other.getTrackingStatus() && getSvacc() == _other.getSvacc() && getSnr() == _other.getSnr() && getAzimuthAngle() == _other.getAzimuthAngle() && getElevationAngle() == _other.getElevationAngle() && getExtendedData() == _other.getExtendedData());
        }
    	inline bool operator!=(const Infotainment_IP_bus_ChannelData &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct Infotainment_IP_bus_WlanMode : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kOff = 0,
            kSta = 1,
            kAp = 2,
            kStaWs = 3
        };
        
        Infotainment_IP_bus_WlanMode() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kOff)) {}
        Infotainment_IP_bus_WlanMode(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kOff):
                case static_cast<int32_t>(Literal::kSta):
                case static_cast<int32_t>(Literal::kAp):
                case static_cast<int32_t>(Literal::kStaWs):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Infotainment_IP_bus_WlanMode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Infotainment_IP_bus_WlanMode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Infotainment_IP_bus_WlanMode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Infotainment_IP_bus_WlanMode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Infotainment_IP_bus_WlanMode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Infotainment_IP_bus_WlanMode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Infotainment_IP_bus_WlanConnectStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kDisconnected = 0,
            kConnected = 1,
            kWrongPassword = 2
        };
        
        Infotainment_IP_bus_WlanConnectStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kDisconnected)) {}
        Infotainment_IP_bus_WlanConnectStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kDisconnected):
                case static_cast<int32_t>(Literal::kConnected):
                case static_cast<int32_t>(Literal::kWrongPassword):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Infotainment_IP_bus_WlanConnectStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Infotainment_IP_bus_WlanConnectStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Infotainment_IP_bus_WlanConnectStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Infotainment_IP_bus_WlanConnectStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Infotainment_IP_bus_WlanConnectStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Infotainment_IP_bus_WlanConnectStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Infotainment_IP_bus_WlanFrequencyBand : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kLowFrequencyBand = 0,
            kHighFrequencyBand = 1
        };
        
        Infotainment_IP_bus_WlanFrequencyBand() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kLowFrequencyBand)) {}
        Infotainment_IP_bus_WlanFrequencyBand(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kLowFrequencyBand):
                case static_cast<int32_t>(Literal::kHighFrequencyBand):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Infotainment_IP_bus_WlanFrequencyBand &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Infotainment_IP_bus_WlanFrequencyBand &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Infotainment_IP_bus_WlanFrequencyBand &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Infotainment_IP_bus_WlanFrequencyBand &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Infotainment_IP_bus_WlanFrequencyBand &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Infotainment_IP_bus_WlanFrequencyBand &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Infotainment_IP_bus_WlanApCurrentStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kDisabled = 0,
            kEnabled = 1
        };
        
        Infotainment_IP_bus_WlanApCurrentStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kDisabled)) {}
        Infotainment_IP_bus_WlanApCurrentStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kDisabled):
                case static_cast<int32_t>(Literal::kEnabled):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Infotainment_IP_bus_WlanApCurrentStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Infotainment_IP_bus_WlanApCurrentStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Infotainment_IP_bus_WlanApCurrentStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Infotainment_IP_bus_WlanApCurrentStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Infotainment_IP_bus_WlanApCurrentStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Infotainment_IP_bus_WlanApCurrentStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Infotainment_IP_bus_WlanSecurityType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kOpen = 0,
            kWepOpen = 1,
            kWepSharedKey = 2,
            kWpaEapTls = 3,
            kWpaPsk = 4,
            kWpa2Psk = 5,
            kWpa2EapTls = 6
        };
        
        Infotainment_IP_bus_WlanSecurityType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kOpen)) {}
        Infotainment_IP_bus_WlanSecurityType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kOpen):
                case static_cast<int32_t>(Literal::kWepOpen):
                case static_cast<int32_t>(Literal::kWepSharedKey):
                case static_cast<int32_t>(Literal::kWpaEapTls):
                case static_cast<int32_t>(Literal::kWpaPsk):
                case static_cast<int32_t>(Literal::kWpa2Psk):
                case static_cast<int32_t>(Literal::kWpa2EapTls):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Infotainment_IP_bus_WlanSecurityType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Infotainment_IP_bus_WlanSecurityType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Infotainment_IP_bus_WlanSecurityType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Infotainment_IP_bus_WlanSecurityType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Infotainment_IP_bus_WlanSecurityType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Infotainment_IP_bus_WlanSecurityType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    typedef std::string Infotainment_IP_bus_Ssid;
    /**
     * description: Contains a sequence of (SSID, SignalStrength and WLAN SecurityType)
     */
    struct Infotainment_IP_bus_AvailableNetworkInformation : CommonAPI::Struct<Infotainment_IP_bus_Ssid, uint32_t, Infotainment_IP_bus_WlanSecurityType, bool> {
    	
    	Infotainment_IP_bus_AvailableNetworkInformation() {
    		std::get<3>(values_) = false;
    	}
    	Infotainment_IP_bus_AvailableNetworkInformation(const Infotainment_IP_bus_Ssid &_ssid, const uint32_t &_signalStrength, const Infotainment_IP_bus_WlanSecurityType &_securityType, const bool &_rememberedSsid)
    	{
    		std::get<0>(values_) = _ssid;
    		std::get<1>(values_) = _signalStrength;
    		std::get<2>(values_) = _securityType;
    		std::get<3>(values_) = _rememberedSsid;
    	}
    	/**
    	 * description: SSID
    	 */
    	inline const Infotainment_IP_bus_Ssid &getSsid() const { return std::get<0>(values_); }
    	inline void setSsid(const Infotainment_IP_bus_Ssid &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: The received signal strength indicatior of the AP. 0-100.
    	 */
    	inline const uint32_t &getSignalStrength() const { return std::get<1>(values_); }
    	inline void setSignalStrength(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: Open, WEP, WPA, WPA2
    	 */
    	inline const Infotainment_IP_bus_WlanSecurityType &getSecurityType() const { return std::get<2>(values_); }
    	inline void setSecurityType(const Infotainment_IP_bus_WlanSecurityType &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: true if remembered, false if non-remembered network. Default false.
    	 */
    	inline const bool &getRememberedSsid() const { return std::get<3>(values_); }
    	inline void setRememberedSsid(const bool _value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const Infotainment_IP_bus_AvailableNetworkInformation& _other) const {
                return (getSsid() == _other.getSsid() && getSignalStrength() == _other.getSignalStrength() && getSecurityType() == _other.getSecurityType() && getRememberedSsid() == _other.getRememberedSsid());
        }
    	inline bool operator!=(const Infotainment_IP_bus_AvailableNetworkInformation &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::string Infotainment_IP_bus_WlanExternalPassword;
    
    struct Infotainment_IP_bus_InternetSource : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kNone = 1,
            kPSim = 2,
            kBluetooth = 3,
            kUsb = 4,
            kError = 5
        };
        
        Infotainment_IP_bus_InternetSource() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kNone)) {}
        Infotainment_IP_bus_InternetSource(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kNone):
                case static_cast<int32_t>(Literal::kPSim):
                case static_cast<int32_t>(Literal::kBluetooth):
                case static_cast<int32_t>(Literal::kUsb):
                case static_cast<int32_t>(Literal::kError):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Infotainment_IP_bus_InternetSource &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Infotainment_IP_bus_InternetSource &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Infotainment_IP_bus_InternetSource &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Infotainment_IP_bus_InternetSource &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Infotainment_IP_bus_InternetSource &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Infotainment_IP_bus_InternetSource &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Infotainment_IP_bus_Ecu : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kNone = 0,
            kIhu = 1,
            kVcm = 2,
            kTem = 3
        };
        
        Infotainment_IP_bus_Ecu() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kNone)) {}
        Infotainment_IP_bus_Ecu(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kNone):
                case static_cast<int32_t>(Literal::kIhu):
                case static_cast<int32_t>(Literal::kVcm):
                case static_cast<int32_t>(Literal::kTem):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Infotainment_IP_bus_Ecu &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Infotainment_IP_bus_Ecu &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Infotainment_IP_bus_Ecu &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Infotainment_IP_bus_Ecu &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Infotainment_IP_bus_Ecu &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Infotainment_IP_bus_Ecu &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Infotainment_IP_bus_OnOffSetting : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kOff = 0,
            kOn = 1
        };
        
        Infotainment_IP_bus_OnOffSetting() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kOff)) {}
        Infotainment_IP_bus_OnOffSetting(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kOff):
                case static_cast<int32_t>(Literal::kOn):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Infotainment_IP_bus_OnOffSetting &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Infotainment_IP_bus_OnOffSetting &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Infotainment_IP_bus_OnOffSetting &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Infotainment_IP_bus_OnOffSetting &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Infotainment_IP_bus_OnOffSetting &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Infotainment_IP_bus_OnOffSetting &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.volvo.connectivity.IpCommandBusTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(0, 1);
}

}; // struct IpCommandBusTypes

} // namespace connectivity
} // namespace volvo
} // namespace org
} // namespace v0

namespace CommonAPI {
}


namespace std {
    //Hash for Infotainment_IP_bus_Errors
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors& infotainment_IP_bus_Errors) const {
            return static_cast<int32_t>(infotainment_IP_bus_Errors);
        }
    };
    //Hash for Infotainment_IP_bus_GnssFixType
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_GnssFixType> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_GnssFixType& infotainment_IP_bus_GnssFixType) const {
            return static_cast<int32_t>(infotainment_IP_bus_GnssFixType);
        }
    };
    //Hash for Infotainment_IP_bus_SatelliteTrackingStatusType
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_SatelliteTrackingStatusType> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_SatelliteTrackingStatusType& infotainment_IP_bus_SatelliteTrackingStatusType) const {
            return static_cast<int32_t>(infotainment_IP_bus_SatelliteTrackingStatusType);
        }
    };
    //Hash for Infotainment_IP_bus_ExtendedChannelData_Choices
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_ExtendedChannelData_Choices> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_ExtendedChannelData_Choices& infotainment_IP_bus_ExtendedChannelData_Choices) const {
            return static_cast<int32_t>(infotainment_IP_bus_ExtendedChannelData_Choices);
        }
    };
    //Hash for Infotainment_IP_bus_WlanMode
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanMode> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanMode& infotainment_IP_bus_WlanMode) const {
            return static_cast<int32_t>(infotainment_IP_bus_WlanMode);
        }
    };
    //Hash for Infotainment_IP_bus_WlanConnectStatus
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanConnectStatus> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanConnectStatus& infotainment_IP_bus_WlanConnectStatus) const {
            return static_cast<int32_t>(infotainment_IP_bus_WlanConnectStatus);
        }
    };
    //Hash for Infotainment_IP_bus_WlanFrequencyBand
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanFrequencyBand> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanFrequencyBand& infotainment_IP_bus_WlanFrequencyBand) const {
            return static_cast<int32_t>(infotainment_IP_bus_WlanFrequencyBand);
        }
    };
    //Hash for Infotainment_IP_bus_WlanApCurrentStatus
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanApCurrentStatus> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanApCurrentStatus& infotainment_IP_bus_WlanApCurrentStatus) const {
            return static_cast<int32_t>(infotainment_IP_bus_WlanApCurrentStatus);
        }
    };
    //Hash for Infotainment_IP_bus_WlanSecurityType
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanSecurityType> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanSecurityType& infotainment_IP_bus_WlanSecurityType) const {
            return static_cast<int32_t>(infotainment_IP_bus_WlanSecurityType);
        }
    };
    //Hash for Infotainment_IP_bus_InternetSource
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_InternetSource> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_InternetSource& infotainment_IP_bus_InternetSource) const {
            return static_cast<int32_t>(infotainment_IP_bus_InternetSource);
        }
    };
    //Hash for Infotainment_IP_bus_Ecu
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Ecu> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Ecu& infotainment_IP_bus_Ecu) const {
            return static_cast<int32_t>(infotainment_IP_bus_Ecu);
        }
    };
    //Hash for Infotainment_IP_bus_OnOffSetting
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_OnOffSetting> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_OnOffSetting& infotainment_IP_bus_OnOffSetting) const {
            return static_cast<int32_t>(infotainment_IP_bus_OnOffSetting);
        }
    };
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVO_CONNECTIVITY_Ip_Command_Bus_Types_HPP_
