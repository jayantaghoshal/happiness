/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201512091508.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This is the FB OTA interface on IP Command Bus
 */
#ifndef V0_ORG_VOLVO_CONNECTIVITY_OTA_PROXY_BASE_HPP_
#define V0_ORG_VOLVO_CONNECTIVITY_OTA_PROXY_BASE_HPP_

#include <v0/org/volvo/connectivity/OTA.hpp>


#include <v0/org/volvo/connectivity/IpCommandBusTypes.hpp>
#include <v0/org/volvo/connectivity/OTATypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace volvo {
namespace connectivity {

class OTAProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        ::v0::org::volvo::connectivity::OTATypes::DownloadStatus, std::vector<::v0::org::volvo::connectivity::OTATypes::SoftwareProduct>
    > DownloadStatusNotificationEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors&, const ::v0::org::volvo::connectivity::OTATypes::DownloadStatus&, const std::vector<::v0::org::volvo::connectivity::OTATypes::SoftwareProduct>&)> DownloadStatusRequestAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<::v0::org::volvo::connectivity::OTATypes::UUID>&)> DownloadSoftwareSetRequestAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors&, const std::vector<::v0::org::volvo::connectivity::OTATypes::PartIdentifier>&)> DeleteStatusSetRequestAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors&, const ::v0::org::volvo::connectivity::OTATypes::GenericOkStatus&)> CancelDownloadSetRequestAsyncCallback;


    virtual DownloadStatusNotificationEvent& getDownloadStatusNotificationEvent() = 0;

    /**
     * description: DownloadStatus (0x0B01)
                          This signal is sent by the VCM
     *   when status of current
                          download or installation is
     *   changed. It shall be used to
                          populate the OTA HMI.
     */
    virtual void DownloadStatusRequest(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::OTATypes::DownloadStatus &_downloadStatus, std::vector<::v0::org::volvo::connectivity::OTATypes::SoftwareProduct> &_downloadList, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> DownloadStatusRequestAsync(DownloadStatusRequestAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: DownloadSoftware (0x0B02)
                          This operation is used when IHU
     *   HMI requests VCM to start
                          downloading software.
     */
    virtual void DownloadSoftwareSetRequest(CommonAPI::CallStatus &_internalCallStatus, std::vector<::v0::org::volvo::connectivity::OTATypes::UUID> &_downloadList, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> DownloadSoftwareSetRequestAsync(DownloadSoftwareSetRequestAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: DeletedSoftware (0x0B03)
                          This operation is used when IHU
     *   requests VCM to inform
                          VCC back end systems that
     *   software has been deleted.
     */
    virtual void DeleteStatusSetRequest(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, std::vector<::v0::org::volvo::connectivity::OTATypes::PartIdentifier> &_deletedSoftware, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> DeleteStatusSetRequestAsync(DeleteStatusSetRequestAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: CancelDownload (0x0B05)
             This operation is used when IHU HMI requests
     *   VCM to cancel a currently ongoing download of software.
     */
    virtual void CancelDownloadSetRequest(const ::v0::org::volvo::connectivity::OTATypes::UUID &_software, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::OTATypes::GenericOkStatus &_status, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> CancelDownloadSetRequestAsync(const ::v0::org::volvo::connectivity::OTATypes::UUID &_software, CancelDownloadSetRequestAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace connectivity
} // namespace volvo
} // namespace org
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVO_CONNECTIVITY_OTA_PROXY_BASE_HPP_
