/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201512091512.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This is the FB OTA interface on IP Command Bus
 */
#include <v0/org/volvo/connectivity/OTADBusProxy.hpp>

namespace v0 {
namespace org {
namespace volvo {
namespace connectivity {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createOTADBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<OTADBusProxy>(_address, _connection);
}

INITIALIZER(registerOTADBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		OTA::getInterface(),
		&createOTADBusProxy);
}

OTADBusProxy::OTADBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		downloadStatusNotification_(*this, "DownloadStatusNotification", "ia((s)iq)", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<::v0::org::volvo::connectivity::OTATypes_::SoftwareProductDeployment_t>*>(nullptr)))
{
}


OTADBusProxy::DownloadStatusNotificationEvent& OTADBusProxy::getDownloadStatusNotificationEvent() {
    return downloadStatusNotification_;
}
    
    /**
     * description: DownloadStatus (0x0B01)
                          This signal is sent by the VCM
     *   when status of current
                          download or installation is
     *   changed. It shall be used to
                          populate the OTA HMI.
     */
    void OTADBusProxy::DownloadStatusRequest(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::OTATypes::DownloadStatus &_downloadStatus, std::vector<::v0::org::volvo::connectivity::OTATypes::SoftwareProduct> &_downloadList, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<::v0::org::volvo::connectivity::OTATypes::DownloadStatus, CommonAPI::EmptyDeployment> deploy_downloadStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v0::org::volvo::connectivity::OTATypes::SoftwareProduct>, CommonAPI::DBus::ArrayDeployment<::v0::org::volvo::connectivity::OTATypes_::SoftwareProductDeployment_t>> deploy_downloadList(static_cast<CommonAPI::DBus::ArrayDeployment<::v0::org::volvo::connectivity::OTATypes_::SoftwareProductDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors, CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::org::volvo::connectivity::OTATypes::DownloadStatus,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::vector<::v0::org::volvo::connectivity::OTATypes::SoftwareProduct>,CommonAPI::DBus::ArrayDeployment<::v0::org::volvo::connectivity::OTATypes_::SoftwareProductDeployment_t>>
            >
        	>::callMethodWithReply(
        *this,
        "DownloadStatusRequest",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_error,
deploy_downloadStatus, deploy_downloadList);
_error = deploy_error.getValue();
_downloadStatus = deploy_downloadStatus.getValue();
_downloadList = deploy_downloadList.getValue();
}
    std::future<CommonAPI::CallStatus> OTADBusProxy::DownloadStatusRequestAsync(DownloadStatusRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<::v0::org::volvo::connectivity::OTATypes::DownloadStatus, CommonAPI::EmptyDeployment> deploy_downloadStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v0::org::volvo::connectivity::OTATypes::SoftwareProduct>, CommonAPI::DBus::ArrayDeployment<::v0::org::volvo::connectivity::OTATypes_::SoftwareProductDeployment_t>> deploy_downloadList(static_cast<CommonAPI::DBus::ArrayDeployment<::v0::org::volvo::connectivity::OTATypes_::SoftwareProductDeployment_t>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors, CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::org::volvo::connectivity::OTATypes::DownloadStatus,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::vector<::v0::org::volvo::connectivity::OTATypes::SoftwareProduct>,CommonAPI::DBus::ArrayDeployment<::v0::org::volvo::connectivity::OTATypes_::SoftwareProductDeployment_t>>
            >
        	>::callMethodAsync(
        *this,
        "DownloadStatusRequest",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors, CommonAPI::EmptyDeployment> _deploy_error, CommonAPI::Deployable<::v0::org::volvo::connectivity::OTATypes::DownloadStatus, CommonAPI::EmptyDeployment> _downloadStatus, CommonAPI::Deployable<std::vector<::v0::org::volvo::connectivity::OTATypes::SoftwareProduct>, CommonAPI::DBus::ArrayDeployment<::v0::org::volvo::connectivity::OTATypes_::SoftwareProductDeployment_t>> _downloadList) {
        	if (_callback)
        		_callback(_internalCallStatus, _deploy_error.getValue(), _downloadStatus.getValue(), _downloadList.getValue());
        },
        std::make_tuple(deploy_error, deploy_downloadStatus, deploy_downloadList));
    }
    /**
     * description: DownloadSoftware (0x0B02)
                          This operation is used when IHU
     *   HMI requests VCM to start
                          downloading software.
     */
    void OTADBusProxy::DownloadSoftwareSetRequest(CommonAPI::CallStatus &_internalCallStatus, std::vector<::v0::org::volvo::connectivity::OTATypes::UUID> &_downloadList, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<::v0::org::volvo::connectivity::OTATypes::UUID>, CommonAPI::DBus::ArrayDeployment<::v0::org::volvo::connectivity::OTATypes_::UUIDDeployment_t>> deploy_downloadList(static_cast<CommonAPI::DBus::ArrayDeployment<::v0::org::volvo::connectivity::OTATypes_::UUIDDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v0::org::volvo::connectivity::OTATypes::UUID>,CommonAPI::DBus::ArrayDeployment<::v0::org::volvo::connectivity::OTATypes_::UUIDDeployment_t>>
            >
        	>::callMethodWithReply(
        *this,
        "DownloadSoftwareSetRequest",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_downloadList);
_downloadList = deploy_downloadList.getValue();
}
    std::future<CommonAPI::CallStatus> OTADBusProxy::DownloadSoftwareSetRequestAsync(DownloadSoftwareSetRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<::v0::org::volvo::connectivity::OTATypes::UUID>, CommonAPI::DBus::ArrayDeployment<::v0::org::volvo::connectivity::OTATypes_::UUIDDeployment_t>> deploy_downloadList(static_cast<CommonAPI::DBus::ArrayDeployment<::v0::org::volvo::connectivity::OTATypes_::UUIDDeployment_t>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v0::org::volvo::connectivity::OTATypes::UUID>,CommonAPI::DBus::ArrayDeployment<::v0::org::volvo::connectivity::OTATypes_::UUIDDeployment_t>>
            >
        	>::callMethodAsync(
        *this,
        "DownloadSoftwareSetRequest",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<::v0::org::volvo::connectivity::OTATypes::UUID>, CommonAPI::DBus::ArrayDeployment<::v0::org::volvo::connectivity::OTATypes_::UUIDDeployment_t>> _downloadList) {
        	if (_callback)
        		_callback(_internalCallStatus, _downloadList.getValue());
        },
        std::make_tuple(deploy_downloadList));
    }
    /**
     * description: DeletedSoftware (0x0B03)
                          This operation is used when IHU
     *   requests VCM to inform
                          VCC back end systems that
     *   software has been deleted.
     */
    void OTADBusProxy::DeleteStatusSetRequest(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, std::vector<::v0::org::volvo::connectivity::OTATypes::PartIdentifier> &_deletedSoftware, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<std::vector<::v0::org::volvo::connectivity::OTATypes::PartIdentifier>, CommonAPI::DBus::ArrayDeployment<::v0::org::volvo::connectivity::OTATypes_::PartIdentifierDeployment_t>> deploy_deletedSoftware(static_cast<CommonAPI::DBus::ArrayDeployment<::v0::org::volvo::connectivity::OTATypes_::PartIdentifierDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors, CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::vector<::v0::org::volvo::connectivity::OTATypes::PartIdentifier>,CommonAPI::DBus::ArrayDeployment<::v0::org::volvo::connectivity::OTATypes_::PartIdentifierDeployment_t>>
            >
        	>::callMethodWithReply(
        *this,
        "DeleteStatusSetRequest",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_error,
deploy_deletedSoftware);
_error = deploy_error.getValue();
_deletedSoftware = deploy_deletedSoftware.getValue();
}
    std::future<CommonAPI::CallStatus> OTADBusProxy::DeleteStatusSetRequestAsync(DeleteStatusSetRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<std::vector<::v0::org::volvo::connectivity::OTATypes::PartIdentifier>, CommonAPI::DBus::ArrayDeployment<::v0::org::volvo::connectivity::OTATypes_::PartIdentifierDeployment_t>> deploy_deletedSoftware(static_cast<CommonAPI::DBus::ArrayDeployment<::v0::org::volvo::connectivity::OTATypes_::PartIdentifierDeployment_t>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors, CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::vector<::v0::org::volvo::connectivity::OTATypes::PartIdentifier>,CommonAPI::DBus::ArrayDeployment<::v0::org::volvo::connectivity::OTATypes_::PartIdentifierDeployment_t>>
            >
        	>::callMethodAsync(
        *this,
        "DeleteStatusSetRequest",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors, CommonAPI::EmptyDeployment> _deploy_error, CommonAPI::Deployable<std::vector<::v0::org::volvo::connectivity::OTATypes::PartIdentifier>, CommonAPI::DBus::ArrayDeployment<::v0::org::volvo::connectivity::OTATypes_::PartIdentifierDeployment_t>> _deletedSoftware) {
        	if (_callback)
        		_callback(_internalCallStatus, _deploy_error.getValue(), _deletedSoftware.getValue());
        },
        std::make_tuple(deploy_error, deploy_deletedSoftware));
    }
    /**
     * description: CancelDownload (0x0B05)
             This operation is used when IHU HMI requests
     *   VCM to cancel a currently ongoing download of software.
     */
    void OTADBusProxy::CancelDownloadSetRequest(const ::v0::org::volvo::connectivity::OTATypes::UUID &_software, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::OTATypes::GenericOkStatus &_status, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<::v0::org::volvo::connectivity::OTATypes::UUID, ::v0::org::volvo::connectivity::OTATypes_::UUIDDeployment_t> deploy_software(_software, static_cast<::v0::org::volvo::connectivity::OTATypes_::UUIDDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v0::org::volvo::connectivity::OTATypes::GenericOkStatus, CommonAPI::EmptyDeployment> deploy_status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::org::volvo::connectivity::OTATypes::UUID, ::v0::org::volvo::connectivity::OTATypes_::UUIDDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors, CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::org::volvo::connectivity::OTATypes::GenericOkStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "CancelDownloadSetRequest",
        "(s)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_software,
_internalCallStatus,
deploy_error,
deploy_status);
_error = deploy_error.getValue();
_status = deploy_status.getValue();
}
    std::future<CommonAPI::CallStatus> OTADBusProxy::CancelDownloadSetRequestAsync(const ::v0::org::volvo::connectivity::OTATypes::UUID &_software, CancelDownloadSetRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<::v0::org::volvo::connectivity::OTATypes::UUID, ::v0::org::volvo::connectivity::OTATypes_::UUIDDeployment_t> deploy_software(_software, static_cast<::v0::org::volvo::connectivity::OTATypes_::UUIDDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v0::org::volvo::connectivity::OTATypes::GenericOkStatus, CommonAPI::EmptyDeployment> deploy_status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::org::volvo::connectivity::OTATypes::UUID, ::v0::org::volvo::connectivity::OTATypes_::UUIDDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors, CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::org::volvo::connectivity::OTATypes::GenericOkStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "CancelDownloadSetRequest",
        "(s)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_software,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors, CommonAPI::EmptyDeployment> _deploy_error, CommonAPI::Deployable<::v0::org::volvo::connectivity::OTATypes::GenericOkStatus, CommonAPI::EmptyDeployment> _status) {
        	if (_callback)
        		_callback(_internalCallStatus, _deploy_error.getValue(), _status.getValue());
        },
        std::make_tuple(deploy_error, deploy_status));
    }


void OTADBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 0;
          ownVersionMinor = 1;
      }

      } // namespace connectivity
      } // namespace volvo
      } // namespace org
      } // namespace v0
