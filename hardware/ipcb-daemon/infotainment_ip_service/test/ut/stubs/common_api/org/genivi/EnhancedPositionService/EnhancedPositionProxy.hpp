/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: EnhancedPosition = This interface offers functionalities to retrieve the
 *   enhanced position of the vehicle
 */
#ifndef V0_ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Enhanced_Position_PROXY_HPP_
#define V0_ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Enhanced_Position_PROXY_HPP_

#include <org/genivi/EnhancedPositionService/EnhancedPositionProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace EnhancedPositionService {

template <typename ... _AttributeExtensions>
class EnhancedPositionProxy
    : virtual public EnhancedPositionProxyBase,
      virtual public _AttributeExtensions... {
public:
    EnhancedPositionProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~EnhancedPositionProxy();


    /**
     * description: PositionUpdate = This signal is called to notify a client application of a
     *   position change. The update frequency is implementation specific. The maximal
     *   allowed frequency is 10Hz
     */
    /**
     * Returns the wrapper class that provides access to the broadcast PositionUpdate.
     */
    virtual PositionUpdateEvent& getPositionUpdateEvent() {
        return delegate_->getPositionUpdateEvent();
    }

    /**
     * description: GetVersion = This method returns the API version implemented by the server
     *   application
     * Calls GetVersion with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetVersion(CommonAPI::CallStatus &_internalCallStatus, ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::Version &_version, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetVersion with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetVersionAsync(GetVersionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: GetPositionInfo = This method returns a given set of positioning data (e.g.
     *   Position, Course, Accuracy, Status, ... )            Note: If a requested
     *   value is invalid, it's not returned to the client application
     * Calls GetPositionInfo with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetPositionInfo(const ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::Bitmask &_valuesToReturn, CommonAPI::CallStatus &_internalCallStatus, ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::Timestamp &_timestamp, ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::PositionInfo &_data, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetPositionInfo with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetPositionInfoAsync(const ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::Bitmask &_valuesToReturn, GetPositionInfoAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: GetSatelliteInfo = This method returns information about the current satellite
     *   constellation         Note: If a requested value is invalid, it's not returned
     *   to the client application
     * Calls GetSatelliteInfo with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetSatelliteInfo(CommonAPI::CallStatus &_internalCallStatus, ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::Timestamp &_timestamp, ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::SatelliteInfo &_satelliteInfo, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetSatelliteInfo with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetSatelliteInfoAsync(GetSatelliteInfoAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: GetTime = This method returns UTC time and date.             Note: If a
     *   requested value is invalid, it's not returned to the client application
     * Calls GetTime with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetTime(CommonAPI::CallStatus &_internalCallStatus, ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::Timestamp &_timestamp, ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::TimeInfo &_time, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetTime with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetTimeAsync(GetTimeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<EnhancedPositionProxyBase> delegate_;
};

typedef EnhancedPositionProxy<> EnhancedPositionProxyDefault;


//
// EnhancedPositionProxy Implementation
//
template <typename ... _AttributeExtensions>
EnhancedPositionProxy<_AttributeExtensions...>::EnhancedPositionProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<EnhancedPositionProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<EnhancedPositionProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
EnhancedPositionProxy<_AttributeExtensions...>::~EnhancedPositionProxy() {
}

/**
 * description: GetVersion = This method returns the API version implemented by the server
 *   application
 */
template <typename ... _AttributeExtensions>
void EnhancedPositionProxy<_AttributeExtensions...>::GetVersion(CommonAPI::CallStatus &_internalCallStatus, ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::Version &_version, const CommonAPI::CallInfo *_info) {
    delegate_->GetVersion(_internalCallStatus, _version, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> EnhancedPositionProxy<_AttributeExtensions...>::GetVersionAsync(GetVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetVersionAsync(_callback, _info);
}
/**
 * description: GetPositionInfo = This method returns a given set of positioning data (e.g.
 *   Position, Course, Accuracy, Status, ... )            Note: If a requested
 *   value is invalid, it's not returned to the client application
 */
template <typename ... _AttributeExtensions>
void EnhancedPositionProxy<_AttributeExtensions...>::GetPositionInfo(const ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::Bitmask &_valuesToReturn, CommonAPI::CallStatus &_internalCallStatus, ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::Timestamp &_timestamp, ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::PositionInfo &_data, const CommonAPI::CallInfo *_info) {
    delegate_->GetPositionInfo(_valuesToReturn, _internalCallStatus, _timestamp, _data, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> EnhancedPositionProxy<_AttributeExtensions...>::GetPositionInfoAsync(const ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::Bitmask &_valuesToReturn, GetPositionInfoAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetPositionInfoAsync(_valuesToReturn, _callback, _info);
}
/**
 * description: GetSatelliteInfo = This method returns information about the current satellite
 *   constellation         Note: If a requested value is invalid, it's not returned
 *   to the client application
 */
template <typename ... _AttributeExtensions>
void EnhancedPositionProxy<_AttributeExtensions...>::GetSatelliteInfo(CommonAPI::CallStatus &_internalCallStatus, ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::Timestamp &_timestamp, ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::SatelliteInfo &_satelliteInfo, const CommonAPI::CallInfo *_info) {
    delegate_->GetSatelliteInfo(_internalCallStatus, _timestamp, _satelliteInfo, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> EnhancedPositionProxy<_AttributeExtensions...>::GetSatelliteInfoAsync(GetSatelliteInfoAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetSatelliteInfoAsync(_callback, _info);
}
/**
 * description: GetTime = This method returns UTC time and date.             Note: If a
 *   requested value is invalid, it's not returned to the client application
 */
template <typename ... _AttributeExtensions>
void EnhancedPositionProxy<_AttributeExtensions...>::GetTime(CommonAPI::CallStatus &_internalCallStatus, ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::Timestamp &_timestamp, ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::TimeInfo &_time, const CommonAPI::CallInfo *_info) {
    delegate_->GetTime(_internalCallStatus, _timestamp, _time, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> EnhancedPositionProxy<_AttributeExtensions...>::GetTimeAsync(GetTimeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetTimeAsync(_callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &EnhancedPositionProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool EnhancedPositionProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool EnhancedPositionProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& EnhancedPositionProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& EnhancedPositionProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace EnhancedPositionService
} // namespace genivi
} // namespace org




#endif // V0_ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Enhanced_Position_PROXY_HPP_
