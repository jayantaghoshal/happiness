/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: For source documentation of types and variables see infotainmentIpBus.asn
 */
#ifndef V0_ORG_VOLVO_CONNECTIVITY_Ip_Command_Bus_Types_HPP_
#define V0_ORG_VOLVO_CONNECTIVITY_Ip_Command_Bus_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <CommonAPI/Variant.hpp>
#include <cstdint>
#include <memory>
#include <string>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace volvo {
namespace connectivity {

struct IpCommandBusTypes {
    
    struct SBTrigger : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kTriggerDiagnostic = 0,
            kTriggerPredicted = 1,
            kTriggerWarning = 2,
            kTriggerManual = 3
        };
        
        SBTrigger() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kTriggerDiagnostic)) {}
        SBTrigger(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kTriggerDiagnostic):
                case static_cast<int32_t>(Literal::kTriggerPredicted):
                case static_cast<int32_t>(Literal::kTriggerWarning):
                case static_cast<int32_t>(Literal::kTriggerManual):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SBTrigger &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SBTrigger &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SBTrigger &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SBTrigger &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SBTrigger &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SBTrigger &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct SBWarning : CommonAPI::Struct<uint16_t, std::string> {
    	
    	SBWarning() {
    	}
    	SBWarning(const uint16_t &_id, const std::string &_message)
    	{
    		std::get<0>(values_) = _id;
    		std::get<1>(values_) = _message;
    	}
    	inline const uint16_t &getId() const { return std::get<0>(values_); }
    	inline void setId(const uint16_t &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: message size(0...100)
    	 */
    	inline const std::string &getMessage() const { return std::get<1>(values_); }
    	inline void setMessage(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const SBWarning& _other) const {
                return (getId() == _other.getId() && getMessage() == _other.getMessage());
        }
    	inline bool operator!=(const SBWarning &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct TEM_TelematicSettings : CommonAPI::Struct<bool> {
    	
    	TEM_TelematicSettings() {
    		std::get<0>(values_) = false;
    	}
    	TEM_TelematicSettings(const bool &_keylockEnabled)
    	{
    		std::get<0>(values_) = _keylockEnabled;
    	}
    	/**
    	 * description: OnCall/SOS button keylock enabled True (for blocking) or False(default, for not
    	 *   blocking).
    	 */
    	inline const bool &getKeylockEnabled() const { return std::get<0>(values_); }
    	inline void setKeylockEnabled(const bool _value) { std::get<0>(values_) = _value; }
    	inline bool operator==(const TEM_TelematicSettings& _other) const {
                return (getKeylockEnabled() == _other.getKeylockEnabled());
        }
    	inline bool operator!=(const TEM_TelematicSettings &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct TEM_PreferredEcalls : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kPublicSOS = 0,
            kVolvoOnCall = 1
        };
        
        TEM_PreferredEcalls() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kPublicSOS)) {}
        TEM_PreferredEcalls(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kPublicSOS):
                case static_cast<int32_t>(Literal::kVolvoOnCall):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TEM_PreferredEcalls &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TEM_PreferredEcalls &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TEM_PreferredEcalls &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TEM_PreferredEcalls &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TEM_PreferredEcalls &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TEM_PreferredEcalls &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct TEM_ActivationStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kDeactivated = 0,
            kActivatedProvisioned = 1,
            kPreActivatedUnprovisioned = 2,
            kActivatedUnprovisioned = 3,
            kRemoteProvisioningOngoing = 4,
            kProvisioningOngoing = 5
        };
        
        TEM_ActivationStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kDeactivated)) {}
        TEM_ActivationStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kDeactivated):
                case static_cast<int32_t>(Literal::kActivatedProvisioned):
                case static_cast<int32_t>(Literal::kPreActivatedUnprovisioned):
                case static_cast<int32_t>(Literal::kActivatedUnprovisioned):
                case static_cast<int32_t>(Literal::kRemoteProvisioningOngoing):
                case static_cast<int32_t>(Literal::kProvisioningOngoing):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TEM_ActivationStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TEM_ActivationStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TEM_ActivationStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TEM_ActivationStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TEM_ActivationStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TEM_ActivationStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct TEM_ActivationStatusChange : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kActivate = 0,
            kPreactivate = 1,
            kProvision = 2
        };
        
        TEM_ActivationStatusChange() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kActivate)) {}
        TEM_ActivationStatusChange(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kActivate):
                case static_cast<int32_t>(Literal::kPreactivate):
                case static_cast<int32_t>(Literal::kProvision):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TEM_ActivationStatusChange &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TEM_ActivationStatusChange &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TEM_ActivationStatusChange &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TEM_ActivationStatusChange &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TEM_ActivationStatusChange &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TEM_ActivationStatusChange &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Infotainment_IP_bus_DeadReckoningType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kNoDr = 0,
            kDrNoMapMatch = 1,
            kDrMapMatched = 2
        };
        
        Infotainment_IP_bus_DeadReckoningType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kNoDr)) {}
        Infotainment_IP_bus_DeadReckoningType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kNoDr):
                case static_cast<int32_t>(Literal::kDrNoMapMatch):
                case static_cast<int32_t>(Literal::kDrMapMatched):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Infotainment_IP_bus_DeadReckoningType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Infotainment_IP_bus_DeadReckoningType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Infotainment_IP_bus_DeadReckoningType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Infotainment_IP_bus_DeadReckoningType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Infotainment_IP_bus_DeadReckoningType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Infotainment_IP_bus_DeadReckoningType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct Infotainment_IP_bus_DateTime : CommonAPI::Struct<uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t> {
    	
    	Infotainment_IP_bus_DateTime() {
    	}
    	Infotainment_IP_bus_DateTime(const uint32_t &_year, const uint32_t &_month, const uint32_t &_day, const uint32_t &_hour, const uint32_t &_minute, const uint32_t &_second)
    	{
    		std::get<0>(values_) = _year;
    		std::get<1>(values_) = _month;
    		std::get<2>(values_) = _day;
    		std::get<3>(values_) = _hour;
    		std::get<4>(values_) = _minute;
    		std::get<5>(values_) = _second;
    	}
    	inline const uint32_t &getYear() const { return std::get<0>(values_); }
    	inline void setYear(const uint32_t &_value) { std::get<0>(values_) = _value; }
    	inline const uint32_t &getMonth() const { return std::get<1>(values_); }
    	inline void setMonth(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	inline const uint32_t &getDay() const { return std::get<2>(values_); }
    	inline void setDay(const uint32_t &_value) { std::get<2>(values_) = _value; }
    	inline const uint32_t &getHour() const { return std::get<3>(values_); }
    	inline void setHour(const uint32_t &_value) { std::get<3>(values_) = _value; }
    	inline const uint32_t &getMinute() const { return std::get<4>(values_); }
    	inline void setMinute(const uint32_t &_value) { std::get<4>(values_) = _value; }
    	inline const uint32_t &getSecond() const { return std::get<5>(values_); }
    	inline void setSecond(const uint32_t &_value) { std::get<5>(values_) = _value; }
    	inline bool operator==(const Infotainment_IP_bus_DateTime& _other) const {
                return (getYear() == _other.getYear() && getMonth() == _other.getMonth() && getDay() == _other.getDay() && getHour() == _other.getHour() && getMinute() == _other.getMinute() && getSecond() == _other.getSecond());
        }
    	inline bool operator!=(const Infotainment_IP_bus_DateTime &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct Infotainment_IP_bus_CoordinatesLongLat_WGS84 : CommonAPI::Struct<double, double> {
    	
    	Infotainment_IP_bus_CoordinatesLongLat_WGS84() {
    	}
    	Infotainment_IP_bus_CoordinatesLongLat_WGS84(const double &_longitude, const double &_latitude)
    	{
    		std::get<0>(values_) = _longitude;
    		std::get<1>(values_) = _latitude;
    	}
    	/**
    	 * description: longitude in decimal degrees notation
    	 */
    	inline const double &getLongitude() const { return std::get<0>(values_); }
    	inline void setLongitude(const double &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: latitude in decimal degrees notation
    	 */
    	inline const double &getLatitude() const { return std::get<1>(values_); }
    	inline void setLatitude(const double &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const Infotainment_IP_bus_CoordinatesLongLat_WGS84& _other) const {
                return (getLongitude() == _other.getLongitude() && getLatitude() == _other.getLatitude());
        }
    	inline bool operator!=(const Infotainment_IP_bus_CoordinatesLongLat_WGS84 &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct Infotainment_IP_bus_GnssFixType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kGnssFixType_notAvailable = 0,
            kGnssFixType_noFix = 1,
            kGnssFixType_fix2D = 2,
            kGnssFixType_fix3D = 3,
            kGnssFixType_startupMode = 4
        };
        
        Infotainment_IP_bus_GnssFixType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kGnssFixType_notAvailable)) {}
        Infotainment_IP_bus_GnssFixType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kGnssFixType_notAvailable):
                case static_cast<int32_t>(Literal::kGnssFixType_noFix):
                case static_cast<int32_t>(Literal::kGnssFixType_fix2D):
                case static_cast<int32_t>(Literal::kGnssFixType_fix3D):
                case static_cast<int32_t>(Literal::kGnssFixType_startupMode):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Infotainment_IP_bus_GnssFixType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Infotainment_IP_bus_GnssFixType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Infotainment_IP_bus_GnssFixType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Infotainment_IP_bus_GnssFixType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Infotainment_IP_bus_GnssFixType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Infotainment_IP_bus_GnssFixType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct TEM_WGS84SimplePositionData : CommonAPI::Struct<Infotainment_IP_bus_CoordinatesLongLat_WGS84, Infotainment_IP_bus_DateTime, Infotainment_IP_bus_GnssFixType, Infotainment_IP_bus_DeadReckoningType> {
    	
    	TEM_WGS84SimplePositionData() {
    	}
    	TEM_WGS84SimplePositionData(const Infotainment_IP_bus_CoordinatesLongLat_WGS84 &_longLat, const Infotainment_IP_bus_DateTime &_fixTime, const Infotainment_IP_bus_GnssFixType &_fixType, const Infotainment_IP_bus_DeadReckoningType &_drType)
    	{
    		std::get<0>(values_) = _longLat;
    		std::get<1>(values_) = _fixTime;
    		std::get<2>(values_) = _fixType;
    		std::get<3>(values_) = _drType;
    	}
    	inline const Infotainment_IP_bus_CoordinatesLongLat_WGS84 &getLongLat() const { return std::get<0>(values_); }
    	inline void setLongLat(const Infotainment_IP_bus_CoordinatesLongLat_WGS84 &_value) { std::get<0>(values_) = _value; }
    	inline const Infotainment_IP_bus_DateTime &getFixTime() const { return std::get<1>(values_); }
    	inline void setFixTime(const Infotainment_IP_bus_DateTime &_value) { std::get<1>(values_) = _value; }
    	inline const Infotainment_IP_bus_GnssFixType &getFixType() const { return std::get<2>(values_); }
    	inline void setFixType(const Infotainment_IP_bus_GnssFixType &_value) { std::get<2>(values_) = _value; }
    	inline const Infotainment_IP_bus_DeadReckoningType &getDrType() const { return std::get<3>(values_); }
    	inline void setDrType(const Infotainment_IP_bus_DeadReckoningType &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const TEM_WGS84SimplePositionData& _other) const {
                return (getLongLat() == _other.getLongLat() && getFixTime() == _other.getFixTime() && getFixType() == _other.getFixType() && getDrType() == _other.getDrType());
        }
    	inline bool operator!=(const TEM_WGS84SimplePositionData &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef CommonAPI::Variant<std::string, TEM_WGS84SimplePositionData>  TEM_SimpleVehiclePosition;
    
    struct TEM_RescueStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kDisabled = 0,
            kNotActive = 1,
            kServiceNotAvailable = 2,
            kActive = 3,
            kTerminated = 4
        };
        
        TEM_RescueStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kDisabled)) {}
        TEM_RescueStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kDisabled):
                case static_cast<int32_t>(Literal::kNotActive):
                case static_cast<int32_t>(Literal::kServiceNotAvailable):
                case static_cast<int32_t>(Literal::kActive):
                case static_cast<int32_t>(Literal::kTerminated):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TEM_RescueStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TEM_RescueStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TEM_RescueStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TEM_RescueStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TEM_RescueStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TEM_RescueStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct TEM_VoiceStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kNoConnection = 0,
            kConnectingCSC = 1,
            kConnectingPSAP = 2,
            kConnectedCSC = 3,
            kConnectedPSAP = 4,
            kIncomingCall = 5,
            kConnectedCall = 6,
            kConnectedIncoming = 7
        };
        
        TEM_VoiceStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kNoConnection)) {}
        TEM_VoiceStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kNoConnection):
                case static_cast<int32_t>(Literal::kConnectingCSC):
                case static_cast<int32_t>(Literal::kConnectingPSAP):
                case static_cast<int32_t>(Literal::kConnectedCSC):
                case static_cast<int32_t>(Literal::kConnectedPSAP):
                case static_cast<int32_t>(Literal::kIncomingCall):
                case static_cast<int32_t>(Literal::kConnectedCall):
                case static_cast<int32_t>(Literal::kConnectedIncoming):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TEM_VoiceStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TEM_VoiceStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TEM_VoiceStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TEM_VoiceStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TEM_VoiceStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TEM_VoiceStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct TEM_MessageStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kNotSent = 0,
            kSending = 1,
            kSent = 2,
            kAckUndefined = 3,
            kAckDefined = 4
        };
        
        TEM_MessageStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kNotSent)) {}
        TEM_MessageStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kNotSent):
                case static_cast<int32_t>(Literal::kSending):
                case static_cast<int32_t>(Literal::kSent):
                case static_cast<int32_t>(Literal::kAckUndefined):
                case static_cast<int32_t>(Literal::kAckDefined):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TEM_MessageStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TEM_MessageStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TEM_MessageStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TEM_MessageStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TEM_MessageStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TEM_MessageStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct TEM_ButtonStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kDisabled = 0,
            kOnCallPressed = 1,
            kOnCallReleased = 2,
            kSosPressed = 3,
            kSosReleased = 4,
            kAllReleased = 5
        };
        
        TEM_ButtonStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kDisabled)) {}
        TEM_ButtonStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kDisabled):
                case static_cast<int32_t>(Literal::kOnCallPressed):
                case static_cast<int32_t>(Literal::kOnCallReleased):
                case static_cast<int32_t>(Literal::kSosPressed):
                case static_cast<int32_t>(Literal::kSosReleased):
                case static_cast<int32_t>(Literal::kAllReleased):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TEM_ButtonStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TEM_ButtonStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TEM_ButtonStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TEM_ButtonStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TEM_ButtonStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TEM_ButtonStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct TEM_PSAPStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kConfirmRequired = 0,
            kConfirmNotRequired = 1
        };
        
        TEM_PSAPStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kConfirmRequired)) {}
        TEM_PSAPStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kConfirmRequired):
                case static_cast<int32_t>(Literal::kConfirmNotRequired):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TEM_PSAPStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TEM_PSAPStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TEM_PSAPStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TEM_PSAPStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TEM_PSAPStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TEM_PSAPStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct TEM_OnCallService : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kEmergencyAssist = 0,
            kRoadsideAssist = 1
        };
        
        TEM_OnCallService() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kEmergencyAssist)) {}
        TEM_OnCallService(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kEmergencyAssist):
                case static_cast<int32_t>(Literal::kRoadsideAssist):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TEM_OnCallService &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TEM_OnCallService &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TEM_OnCallService &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TEM_OnCallService &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TEM_OnCallService &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TEM_OnCallService &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct TEM_OnOffSetting : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kOff = 0,
            kOn = 1
        };
        
        TEM_OnOffSetting() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kOff)) {}
        TEM_OnOffSetting(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kOff):
                case static_cast<int32_t>(Literal::kOn):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TEM_OnOffSetting &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TEM_OnOffSetting &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TEM_OnOffSetting &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TEM_OnOffSetting &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TEM_OnOffSetting &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TEM_OnOffSetting &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Infotainment_IP_bus_Errors : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            OK = 0,
            GENERIC_ERROR = 1,
            TIMEOUT = 2,
            BUSY = 3,
            DECODE_ERROR = 4,
            REMOTE_ERROR = 5
        };
        
        Infotainment_IP_bus_Errors() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::OK)) {}
        Infotainment_IP_bus_Errors(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::OK):
                case static_cast<int32_t>(Literal::GENERIC_ERROR):
                case static_cast<int32_t>(Literal::TIMEOUT):
                case static_cast<int32_t>(Literal::BUSY):
                case static_cast<int32_t>(Literal::DECODE_ERROR):
                case static_cast<int32_t>(Literal::REMOTE_ERROR):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Infotainment_IP_bus_Errors &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Infotainment_IP_bus_Errors &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Infotainment_IP_bus_Errors &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Infotainment_IP_bus_Errors &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Infotainment_IP_bus_Errors &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Infotainment_IP_bus_Errors &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct Infotainment_IP_bus_GPSSystemTime : CommonAPI::Struct<uint32_t, uint32_t> {
    	
    	Infotainment_IP_bus_GPSSystemTime() {
    	}
    	Infotainment_IP_bus_GPSSystemTime(const uint32_t &_weekNumber, const uint32_t &_timeOfWeek)
    	{
    		std::get<0>(values_) = _weekNumber;
    		std::get<1>(values_) = _timeOfWeek;
    	}
    	/**
    	 * description: the GPS week number
    	 */
    	inline const uint32_t &getWeekNumber() const { return std::get<0>(values_); }
    	inline void setWeekNumber(const uint32_t &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: time of week in 1/1000 s
    	 */
    	inline const uint32_t &getTimeOfWeek() const { return std::get<1>(values_); }
    	inline void setTimeOfWeek(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const Infotainment_IP_bus_GPSSystemTime& _other) const {
                return (getWeekNumber() == _other.getWeekNumber() && getTimeOfWeek() == _other.getTimeOfWeek());
        }
    	inline bool operator!=(const Infotainment_IP_bus_GPSSystemTime &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct Infotainment_IP_bus_GeographicalPosition_WGS84 : CommonAPI::Struct<Infotainment_IP_bus_CoordinatesLongLat_WGS84, double> {
    	
    	Infotainment_IP_bus_GeographicalPosition_WGS84() {
    	}
    	Infotainment_IP_bus_GeographicalPosition_WGS84(const Infotainment_IP_bus_CoordinatesLongLat_WGS84 &_longLat, const double &_altitude)
    	{
    		std::get<0>(values_) = _longLat;
    		std::get<1>(values_) = _altitude;
    	}
    	inline const Infotainment_IP_bus_CoordinatesLongLat_WGS84 &getLongLat() const { return std::get<0>(values_); }
    	inline void setLongLat(const Infotainment_IP_bus_CoordinatesLongLat_WGS84 &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: altitude above mean sea level in metres
    	 */
    	inline const double &getAltitude() const { return std::get<1>(values_); }
    	inline void setAltitude(const double &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const Infotainment_IP_bus_GeographicalPosition_WGS84& _other) const {
                return (getLongLat() == _other.getLongLat() && getAltitude() == _other.getAltitude());
        }
    	inline bool operator!=(const Infotainment_IP_bus_GeographicalPosition_WGS84 &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct Infotainment_IP_bus_Velocity : CommonAPI::Struct<uint32_t, uint32_t, int32_t> {
    	
    	Infotainment_IP_bus_Velocity() {
    	}
    	Infotainment_IP_bus_Velocity(const uint32_t &_speed, const uint32_t &_horizontalVelocity, const int32_t &_verticalVelocity)
    	{
    		std::get<0>(values_) = _speed;
    		std::get<1>(values_) = _horizontalVelocity;
    		std::get<2>(values_) = _verticalVelocity;
    	}
    	/**
    	 * description: speed in 1/1000 m/s (mm/s)
    	 */
    	inline const uint32_t &getSpeed() const { return std::get<0>(values_); }
    	inline void setSpeed(const uint32_t &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: horizontal velocity in 1/1000 m/s (mm/s)
    	 */
    	inline const uint32_t &getHorizontalVelocity() const { return std::get<1>(values_); }
    	inline void setHorizontalVelocity(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: vertical velocity in 1/1000 m/s (mm/s)
    	 */
    	inline const int32_t &getVerticalVelocity() const { return std::get<2>(values_); }
    	inline void setVerticalVelocity(const int32_t &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const Infotainment_IP_bus_Velocity& _other) const {
                return (getSpeed() == _other.getSpeed() && getHorizontalVelocity() == _other.getHorizontalVelocity() && getVerticalVelocity() == _other.getVerticalVelocity());
        }
    	inline bool operator!=(const Infotainment_IP_bus_Velocity &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct Infotainment_IP_bus_GNSSUsage : CommonAPI::Struct<bool, bool, bool, bool, bool, bool> {
    	
    	Infotainment_IP_bus_GNSSUsage() {
    		std::get<0>(values_) = false;
    		std::get<1>(values_) = false;
    		std::get<2>(values_) = false;
    		std::get<3>(values_) = false;
    		std::get<4>(values_) = false;
    		std::get<5>(values_) = false;
    	}
    	Infotainment_IP_bus_GNSSUsage(const bool &_gpsIsUsed, const bool &_glonassIsUsed, const bool &_galileoIsUsed, const bool &_sbasIsUsed, const bool &_qzssL1IsUsed, const bool &_qzssL1SAIFIsUsed)
    	{
    		std::get<0>(values_) = _gpsIsUsed;
    		std::get<1>(values_) = _glonassIsUsed;
    		std::get<2>(values_) = _galileoIsUsed;
    		std::get<3>(values_) = _sbasIsUsed;
    		std::get<4>(values_) = _qzssL1IsUsed;
    		std::get<5>(values_) = _qzssL1SAIFIsUsed;
    	}
    	/**
    	 * description: used(True)/not used(False)
    	 */
    	inline const bool &getGpsIsUsed() const { return std::get<0>(values_); }
    	inline void setGpsIsUsed(const bool _value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: used(True)/not used(False)
    	 */
    	inline const bool &getGlonassIsUsed() const { return std::get<1>(values_); }
    	inline void setGlonassIsUsed(const bool _value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: used(True)/not used(False)
    	 */
    	inline const bool &getGalileoIsUsed() const { return std::get<2>(values_); }
    	inline void setGalileoIsUsed(const bool _value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: used(True)/not used(False)
    	 */
    	inline const bool &getSbasIsUsed() const { return std::get<3>(values_); }
    	inline void setSbasIsUsed(const bool _value) { std::get<3>(values_) = _value; }
    	/**
    	 * description: used(True)/not used(False)
    	 */
    	inline const bool &getQzssL1IsUsed() const { return std::get<4>(values_); }
    	inline void setQzssL1IsUsed(const bool _value) { std::get<4>(values_) = _value; }
    	/**
    	 * description: used(True)/not used(False)
    	 */
    	inline const bool &getQzssL1SAIFIsUsed() const { return std::get<5>(values_); }
    	inline void setQzssL1SAIFIsUsed(const bool _value) { std::get<5>(values_) = _value; }
    	inline bool operator==(const Infotainment_IP_bus_GNSSUsage& _other) const {
                return (getGpsIsUsed() == _other.getGpsIsUsed() && getGlonassIsUsed() == _other.getGlonassIsUsed() && getGalileoIsUsed() == _other.getGalileoIsUsed() && getSbasIsUsed() == _other.getSbasIsUsed() && getQzssL1IsUsed() == _other.getQzssL1IsUsed() && getQzssL1SAIFIsUsed() == _other.getQzssL1SAIFIsUsed());
        }
    	inline bool operator!=(const Infotainment_IP_bus_GNSSUsage &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct Infotainment_IP_bus_GNSSStatus : CommonAPI::Struct<Infotainment_IP_bus_GnssFixType, bool, bool> {
    	
    	Infotainment_IP_bus_GNSSStatus() {
    		std::get<1>(values_) = false;
    		std::get<2>(values_) = false;
    	}
    	Infotainment_IP_bus_GNSSStatus(const Infotainment_IP_bus_GnssFixType &_fixType, const bool &_dgpsIsUsed, const bool &_selfEphemerisDataUsage)
    	{
    		std::get<0>(values_) = _fixType;
    		std::get<1>(values_) = _dgpsIsUsed;
    		std::get<2>(values_) = _selfEphemerisDataUsage;
    	}
    	/**
    	 * description: Specifies the current GNSS fix
    	 */
    	inline const Infotainment_IP_bus_GnssFixType &getFixType() const { return std::get<0>(values_); }
    	inline void setFixType(const Infotainment_IP_bus_GnssFixType &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: DGPS used(True)/not used(False)
    	 */
    	inline const bool &getDgpsIsUsed() const { return std::get<1>(values_); }
    	inline void setDgpsIsUsed(const bool _value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: Self ephemeris data used(True)/not used(False)
    	 */
    	inline const bool &getSelfEphemerisDataUsage() const { return std::get<2>(values_); }
    	inline void setSelfEphemerisDataUsage(const bool _value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const Infotainment_IP_bus_GNSSStatus& _other) const {
                return (getFixType() == _other.getFixType() && getDgpsIsUsed() == _other.getDgpsIsUsed() && getSelfEphemerisDataUsage() == _other.getSelfEphemerisDataUsage());
        }
    	inline bool operator!=(const Infotainment_IP_bus_GNSSStatus &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct Infotainment_IP_bus_NrOfSatellitesPerSystem : CommonAPI::Struct<uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t> {
    	
    	Infotainment_IP_bus_NrOfSatellitesPerSystem() {
    	}
    	Infotainment_IP_bus_NrOfSatellitesPerSystem(const uint32_t &_gps, const uint32_t &_glonass, const uint32_t &_galileo, const uint32_t &_sbas, const uint32_t &_qzssL1, const uint32_t &_qzssL1SAIF)
    	{
    		std::get<0>(values_) = _gps;
    		std::get<1>(values_) = _glonass;
    		std::get<2>(values_) = _galileo;
    		std::get<3>(values_) = _sbas;
    		std::get<4>(values_) = _qzssL1;
    		std::get<5>(values_) = _qzssL1SAIF;
    	}
    	/**
    	 * description: nbr of GPS satellites, 31=unknown
    	 */
    	inline const uint32_t &getGps() const { return std::get<0>(values_); }
    	inline void setGps(const uint32_t &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: nbr of GLONASS satellites, 31=unknown
    	 */
    	inline const uint32_t &getGlonass() const { return std::get<1>(values_); }
    	inline void setGlonass(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: nbr of Galileo satellites, 31=unknown
    	 */
    	inline const uint32_t &getGalileo() const { return std::get<2>(values_); }
    	inline void setGalileo(const uint32_t &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: nbr of SBAS satellites, 31=unknown
    	 */
    	inline const uint32_t &getSbas() const { return std::get<3>(values_); }
    	inline void setSbas(const uint32_t &_value) { std::get<3>(values_) = _value; }
    	/**
    	 * description: nbr of QZSS L1 satellites, 31=unknown
    	 */
    	inline const uint32_t &getQzssL1() const { return std::get<4>(values_); }
    	inline void setQzssL1(const uint32_t &_value) { std::get<4>(values_) = _value; }
    	/**
    	 * description: nbr of QZSS L1-SAIF satellites, 31=unknown
    	 */
    	inline const uint32_t &getQzssL1SAIF() const { return std::get<5>(values_); }
    	inline void setQzssL1SAIF(const uint32_t &_value) { std::get<5>(values_) = _value; }
    	inline bool operator==(const Infotainment_IP_bus_NrOfSatellitesPerSystem& _other) const {
                return (getGps() == _other.getGps() && getGlonass() == _other.getGlonass() && getGalileo() == _other.getGalileo() && getSbas() == _other.getSbas() && getQzssL1() == _other.getQzssL1() && getQzssL1SAIF() == _other.getQzssL1SAIF());
        }
    	inline bool operator!=(const Infotainment_IP_bus_NrOfSatellitesPerSystem &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct Infotainment_IP_bus_SatelliteUsage : CommonAPI::Struct<Infotainment_IP_bus_NrOfSatellitesPerSystem, Infotainment_IP_bus_NrOfSatellitesPerSystem> {
    	
    	Infotainment_IP_bus_SatelliteUsage() {
    	}
    	Infotainment_IP_bus_SatelliteUsage(const Infotainment_IP_bus_NrOfSatellitesPerSystem &_nrOfSatellitesVisible, const Infotainment_IP_bus_NrOfSatellitesPerSystem &_nrOfSatellitesUsed)
    	{
    		std::get<0>(values_) = _nrOfSatellitesVisible;
    		std::get<1>(values_) = _nrOfSatellitesUsed;
    	}
    	inline const Infotainment_IP_bus_NrOfSatellitesPerSystem &getNrOfSatellitesVisible() const { return std::get<0>(values_); }
    	inline void setNrOfSatellitesVisible(const Infotainment_IP_bus_NrOfSatellitesPerSystem &_value) { std::get<0>(values_) = _value; }
    	inline const Infotainment_IP_bus_NrOfSatellitesPerSystem &getNrOfSatellitesUsed() const { return std::get<1>(values_); }
    	inline void setNrOfSatellitesUsed(const Infotainment_IP_bus_NrOfSatellitesPerSystem &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const Infotainment_IP_bus_SatelliteUsage& _other) const {
                return (getNrOfSatellitesVisible() == _other.getNrOfSatellitesVisible() && getNrOfSatellitesUsed() == _other.getNrOfSatellitesUsed());
        }
    	inline bool operator!=(const Infotainment_IP_bus_SatelliteUsage &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct Infotainment_IP_bus_DOPValues : CommonAPI::Struct<uint32_t, uint32_t, uint32_t, uint32_t> {
    	
    	Infotainment_IP_bus_DOPValues() {
    	}
    	Infotainment_IP_bus_DOPValues(const uint32_t &_hdop, const uint32_t &_vdop, const uint32_t &_pdop, const uint32_t &_tdop)
    	{
    		std::get<0>(values_) = _hdop;
    		std::get<1>(values_) = _vdop;
    		std::get<2>(values_) = _pdop;
    		std::get<3>(values_) = _tdop;
    	}
    	/**
    	 * description: HDOP in 1/10. 255=unknown or >25.4
    	 */
    	inline const uint32_t &getHdop() const { return std::get<0>(values_); }
    	inline void setHdop(const uint32_t &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: VDOP in 1/10. 255=unknown or >25.4
    	 */
    	inline const uint32_t &getVdop() const { return std::get<1>(values_); }
    	inline void setVdop(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: PDOP in 1/10. 255=unknown or >25.4
    	 */
    	inline const uint32_t &getPdop() const { return std::get<2>(values_); }
    	inline void setPdop(const uint32_t &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: TDOP in 1/10. 255=unknown or >25.4
    	 */
    	inline const uint32_t &getTdop() const { return std::get<3>(values_); }
    	inline void setTdop(const uint32_t &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const Infotainment_IP_bus_DOPValues& _other) const {
                return (getHdop() == _other.getHdop() && getVdop() == _other.getVdop() && getPdop() == _other.getPdop() && getTdop() == _other.getTdop());
        }
    	inline bool operator!=(const Infotainment_IP_bus_DOPValues &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct Infotainment_IP_bus_ChannelCorrectionData : CommonAPI::Struct<int32_t, uint32_t, int32_t, int32_t, uint32_t> {
    	
    	Infotainment_IP_bus_ChannelCorrectionData() {
    	}
    	Infotainment_IP_bus_ChannelCorrectionData(const int32_t &_pseudoRangeMetres, const uint32_t &_pseudoRangeMillimetres, const int32_t &_rangeRate, const int32_t &_pseudoRangeCorrectionData, const uint32_t &_selfEphemerisPredictionTime)
    	{
    		std::get<0>(values_) = _pseudoRangeMetres;
    		std::get<1>(values_) = _pseudoRangeMillimetres;
    		std::get<2>(values_) = _rangeRate;
    		std::get<3>(values_) = _pseudoRangeCorrectionData;
    		std::get<4>(values_) = _selfEphemerisPredictionTime;
    	}
    	/**
    	 * description: mm
    	 */
    	inline const int32_t &getPseudoRangeMetres() const { return std::get<0>(values_); }
    	inline void setPseudoRangeMetres(const int32_t &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: the pseudo range is expressed in two parameters (due to 32 bit data type
    	 *   limitation),
    	        one in metres range and one in millimetre range. They
    	 *   need to be combined for full precision.
    	        E.g if pseudoRangeMetres =
    	 *   15123 and pseudoRangeMillimetres = 50, then the pseudeRange is 15123050 mm.
    	 */
    	inline const uint32_t &getPseudoRangeMillimetres() const { return std::get<1>(values_); }
    	inline void setPseudoRangeMillimetres(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: mm/s
    	 */
    	inline const int32_t &getRangeRate() const { return std::get<2>(values_); }
    	inline void setRangeRate(const int32_t &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: mm
    	 */
    	inline const int32_t &getPseudoRangeCorrectionData() const { return std::get<3>(values_); }
    	inline void setPseudoRangeCorrectionData(const int32_t &_value) { std::get<3>(values_) = _value; }
    	/**
    	 * description: 0=se data not used
    	 */
    	inline const uint32_t &getSelfEphemerisPredictionTime() const { return std::get<4>(values_); }
    	inline void setSelfEphemerisPredictionTime(const uint32_t &_value) { std::get<4>(values_) = _value; }
    	inline bool operator==(const Infotainment_IP_bus_ChannelCorrectionData& _other) const {
                return (getPseudoRangeMetres() == _other.getPseudoRangeMetres() && getPseudoRangeMillimetres() == _other.getPseudoRangeMillimetres() && getRangeRate() == _other.getRangeRate() && getPseudoRangeCorrectionData() == _other.getPseudoRangeCorrectionData() && getSelfEphemerisPredictionTime() == _other.getSelfEphemerisPredictionTime());
        }
    	inline bool operator!=(const Infotainment_IP_bus_ChannelCorrectionData &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct Infotainment_IP_bus_ExtendedChannelData_Choices : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kInfotainment_IP_bus_ExtendedChannelData_notSupported = 0,
            kInfotainment_IP_bus_ExtendedChannelData_data = 1
        };
        
        Infotainment_IP_bus_ExtendedChannelData_Choices() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kInfotainment_IP_bus_ExtendedChannelData_notSupported)) {}
        Infotainment_IP_bus_ExtendedChannelData_Choices(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kInfotainment_IP_bus_ExtendedChannelData_notSupported):
                case static_cast<int32_t>(Literal::kInfotainment_IP_bus_ExtendedChannelData_data):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Infotainment_IP_bus_ExtendedChannelData_Choices &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Infotainment_IP_bus_ExtendedChannelData_Choices &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Infotainment_IP_bus_ExtendedChannelData_Choices &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Infotainment_IP_bus_ExtendedChannelData_Choices &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Infotainment_IP_bus_ExtendedChannelData_Choices &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Infotainment_IP_bus_ExtendedChannelData_Choices &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct Infotainment_IP_bus_ExtendedChannelData : CommonAPI::Struct<Infotainment_IP_bus_ExtendedChannelData_Choices, Infotainment_IP_bus_ChannelCorrectionData> {
    	
    	Infotainment_IP_bus_ExtendedChannelData() {
    	}
    	Infotainment_IP_bus_ExtendedChannelData(const Infotainment_IP_bus_ExtendedChannelData_Choices &_choice, const Infotainment_IP_bus_ChannelCorrectionData &_data)
    	{
    		std::get<0>(values_) = _choice;
    		std::get<1>(values_) = _data;
    	}
    	inline const Infotainment_IP_bus_ExtendedChannelData_Choices &getChoice() const { return std::get<0>(values_); }
    	inline void setChoice(const Infotainment_IP_bus_ExtendedChannelData_Choices &_value) { std::get<0>(values_) = _value; }
    	inline const Infotainment_IP_bus_ChannelCorrectionData &getData() const { return std::get<1>(values_); }
    	inline void setData(const Infotainment_IP_bus_ChannelCorrectionData &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const Infotainment_IP_bus_ExtendedChannelData& _other) const {
                return (getChoice() == _other.getChoice() && getData() == _other.getData());
        }
    	inline bool operator!=(const Infotainment_IP_bus_ExtendedChannelData &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct Infotainment_IP_bus_SatelliteTrackingStatusType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kInfotainment_IP_bus_SatelliteTrackingStatusType_searching = 0,
            kInfotainment_IP_bus_SatelliteTrackingStatusType_tracking = 1,
            kInfotainment_IP_bus_SatelliteTrackingStatusType_collectedAndNotUsed = 2,
            kInfotainment_IP_bus_SatelliteTrackingStatusType_collectedAndUsed = 3
        };
        
        Infotainment_IP_bus_SatelliteTrackingStatusType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kInfotainment_IP_bus_SatelliteTrackingStatusType_searching)) {}
        Infotainment_IP_bus_SatelliteTrackingStatusType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kInfotainment_IP_bus_SatelliteTrackingStatusType_searching):
                case static_cast<int32_t>(Literal::kInfotainment_IP_bus_SatelliteTrackingStatusType_tracking):
                case static_cast<int32_t>(Literal::kInfotainment_IP_bus_SatelliteTrackingStatusType_collectedAndNotUsed):
                case static_cast<int32_t>(Literal::kInfotainment_IP_bus_SatelliteTrackingStatusType_collectedAndUsed):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Infotainment_IP_bus_SatelliteTrackingStatusType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Infotainment_IP_bus_SatelliteTrackingStatusType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Infotainment_IP_bus_SatelliteTrackingStatusType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Infotainment_IP_bus_SatelliteTrackingStatusType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Infotainment_IP_bus_SatelliteTrackingStatusType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Infotainment_IP_bus_SatelliteTrackingStatusType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct Infotainment_IP_bus_ChannelData : CommonAPI::Struct<uint32_t, Infotainment_IP_bus_SatelliteTrackingStatusType, uint32_t, uint32_t, uint32_t, uint32_t, Infotainment_IP_bus_ExtendedChannelData> {
    	
    	Infotainment_IP_bus_ChannelData() {
    	}
    	Infotainment_IP_bus_ChannelData(const uint32_t &_prn, const Infotainment_IP_bus_SatelliteTrackingStatusType &_trackingStatus, const uint32_t &_svacc, const uint32_t &_snr, const uint32_t &_azimuthAngle, const uint32_t &_elevationAngle, const Infotainment_IP_bus_ExtendedChannelData &_extendedData)
    	{
    		std::get<0>(values_) = _prn;
    		std::get<1>(values_) = _trackingStatus;
    		std::get<2>(values_) = _svacc;
    		std::get<3>(values_) = _snr;
    		std::get<4>(values_) = _azimuthAngle;
    		std::get<5>(values_) = _elevationAngle;
    		std::get<6>(values_) = _extendedData;
    	}
    	inline const uint32_t &getPrn() const { return std::get<0>(values_); }
    	inline void setPrn(const uint32_t &_value) { std::get<0>(values_) = _value; }
    	inline const Infotainment_IP_bus_SatelliteTrackingStatusType &getTrackingStatus() const { return std::get<1>(values_); }
    	inline void setTrackingStatus(const Infotainment_IP_bus_SatelliteTrackingStatusType &_value) { std::get<1>(values_) = _value; }
    	inline const uint32_t &getSvacc() const { return std::get<2>(values_); }
    	inline void setSvacc(const uint32_t &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: signal to noise ratio, dB
    	 */
    	inline const uint32_t &getSnr() const { return std::get<3>(values_); }
    	inline void setSnr(const uint32_t &_value) { std::get<3>(values_) = _value; }
    	/**
    	 * description: azimuth angle, 360/256 deg
    	 */
    	inline const uint32_t &getAzimuthAngle() const { return std::get<4>(values_); }
    	inline void setAzimuthAngle(const uint32_t &_value) { std::get<4>(values_) = _value; }
    	/**
    	 * description: elevation angle, 180/256 deg
    	 */
    	inline const uint32_t &getElevationAngle() const { return std::get<5>(values_); }
    	inline void setElevationAngle(const uint32_t &_value) { std::get<5>(values_) = _value; }
    	inline const Infotainment_IP_bus_ExtendedChannelData &getExtendedData() const { return std::get<6>(values_); }
    	inline void setExtendedData(const Infotainment_IP_bus_ExtendedChannelData &_value) { std::get<6>(values_) = _value; }
    	inline bool operator==(const Infotainment_IP_bus_ChannelData& _other) const {
                return (getPrn() == _other.getPrn() && getTrackingStatus() == _other.getTrackingStatus() && getSvacc() == _other.getSvacc() && getSnr() == _other.getSnr() && getAzimuthAngle() == _other.getAzimuthAngle() && getElevationAngle() == _other.getElevationAngle() && getExtendedData() == _other.getExtendedData());
        }
    	inline bool operator!=(const Infotainment_IP_bus_ChannelData &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct Infotainment_IP_bus_WlanMode : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kOff = 0,
            kSta = 1,
            kAp = 2,
            kStaWs = 3
        };
        
        Infotainment_IP_bus_WlanMode() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kOff)) {}
        Infotainment_IP_bus_WlanMode(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kOff):
                case static_cast<int32_t>(Literal::kSta):
                case static_cast<int32_t>(Literal::kAp):
                case static_cast<int32_t>(Literal::kStaWs):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Infotainment_IP_bus_WlanMode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Infotainment_IP_bus_WlanMode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Infotainment_IP_bus_WlanMode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Infotainment_IP_bus_WlanMode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Infotainment_IP_bus_WlanMode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Infotainment_IP_bus_WlanMode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Infotainment_IP_bus_WlanConnectStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kDisconnected = 0,
            kConnected = 1,
            kWrongPassword = 2
        };
        
        Infotainment_IP_bus_WlanConnectStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kDisconnected)) {}
        Infotainment_IP_bus_WlanConnectStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kDisconnected):
                case static_cast<int32_t>(Literal::kConnected):
                case static_cast<int32_t>(Literal::kWrongPassword):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Infotainment_IP_bus_WlanConnectStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Infotainment_IP_bus_WlanConnectStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Infotainment_IP_bus_WlanConnectStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Infotainment_IP_bus_WlanConnectStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Infotainment_IP_bus_WlanConnectStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Infotainment_IP_bus_WlanConnectStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Infotainment_IP_bus_WlanFrequencyBand : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kLowFrequencyBand = 0,
            kHighFrequencyBand = 1
        };
        
        Infotainment_IP_bus_WlanFrequencyBand() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kLowFrequencyBand)) {}
        Infotainment_IP_bus_WlanFrequencyBand(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kLowFrequencyBand):
                case static_cast<int32_t>(Literal::kHighFrequencyBand):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Infotainment_IP_bus_WlanFrequencyBand &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Infotainment_IP_bus_WlanFrequencyBand &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Infotainment_IP_bus_WlanFrequencyBand &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Infotainment_IP_bus_WlanFrequencyBand &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Infotainment_IP_bus_WlanFrequencyBand &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Infotainment_IP_bus_WlanFrequencyBand &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Infotainment_IP_bus_WlanApCurrentStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kDisabled = 0,
            kEnabled = 1
        };
        
        Infotainment_IP_bus_WlanApCurrentStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kDisabled)) {}
        Infotainment_IP_bus_WlanApCurrentStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kDisabled):
                case static_cast<int32_t>(Literal::kEnabled):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Infotainment_IP_bus_WlanApCurrentStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Infotainment_IP_bus_WlanApCurrentStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Infotainment_IP_bus_WlanApCurrentStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Infotainment_IP_bus_WlanApCurrentStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Infotainment_IP_bus_WlanApCurrentStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Infotainment_IP_bus_WlanApCurrentStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Infotainment_IP_bus_WlanSecurityType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kOpen = 0,
            kWepOpen = 1,
            kWepSharedKey = 2,
            kWpaEapTls = 3,
            kWpaPsk = 4,
            kWpa2Psk = 5,
            kWpa2EapTls = 6
        };
        
        Infotainment_IP_bus_WlanSecurityType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kOpen)) {}
        Infotainment_IP_bus_WlanSecurityType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kOpen):
                case static_cast<int32_t>(Literal::kWepOpen):
                case static_cast<int32_t>(Literal::kWepSharedKey):
                case static_cast<int32_t>(Literal::kWpaEapTls):
                case static_cast<int32_t>(Literal::kWpaPsk):
                case static_cast<int32_t>(Literal::kWpa2Psk):
                case static_cast<int32_t>(Literal::kWpa2EapTls):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Infotainment_IP_bus_WlanSecurityType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Infotainment_IP_bus_WlanSecurityType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Infotainment_IP_bus_WlanSecurityType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Infotainment_IP_bus_WlanSecurityType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Infotainment_IP_bus_WlanSecurityType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Infotainment_IP_bus_WlanSecurityType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    typedef std::string Infotainment_IP_bus_Ssid;
    /**
     * description: Contains a sequence of (SSID, SignalStrength and WLAN SecurityType)
     */
    struct Infotainment_IP_bus_AvailableNetworkInformation : CommonAPI::Struct<Infotainment_IP_bus_Ssid, uint32_t, Infotainment_IP_bus_WlanSecurityType, bool> {
    	
    	Infotainment_IP_bus_AvailableNetworkInformation() {
    		std::get<3>(values_) = false;
    	}
    	Infotainment_IP_bus_AvailableNetworkInformation(const Infotainment_IP_bus_Ssid &_ssid, const uint32_t &_signalStrength, const Infotainment_IP_bus_WlanSecurityType &_securityType, const bool &_rememberedSsid)
    	{
    		std::get<0>(values_) = _ssid;
    		std::get<1>(values_) = _signalStrength;
    		std::get<2>(values_) = _securityType;
    		std::get<3>(values_) = _rememberedSsid;
    	}
    	/**
    	 * description: SSID
    	 */
    	inline const Infotainment_IP_bus_Ssid &getSsid() const { return std::get<0>(values_); }
    	inline void setSsid(const Infotainment_IP_bus_Ssid &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: The received signal strength indicatior of the AP. 0-100.
    	 */
    	inline const uint32_t &getSignalStrength() const { return std::get<1>(values_); }
    	inline void setSignalStrength(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: Open, WEP, WPA, WPA2
    	 */
    	inline const Infotainment_IP_bus_WlanSecurityType &getSecurityType() const { return std::get<2>(values_); }
    	inline void setSecurityType(const Infotainment_IP_bus_WlanSecurityType &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: true if remembered, false if non-remembered network. Default false.
    	 */
    	inline const bool &getRememberedSsid() const { return std::get<3>(values_); }
    	inline void setRememberedSsid(const bool _value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const Infotainment_IP_bus_AvailableNetworkInformation& _other) const {
                return (getSsid() == _other.getSsid() && getSignalStrength() == _other.getSignalStrength() && getSecurityType() == _other.getSecurityType() && getRememberedSsid() == _other.getRememberedSsid());
        }
    	inline bool operator!=(const Infotainment_IP_bus_AvailableNetworkInformation &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::string Infotainment_IP_bus_WlanExternalPassword;
    typedef std::string Infotainment_IP_bus_WlanAPPassword;
    typedef std::string Infotainment_IP_bus_WLANConnDevice;
    
    struct Infotainment_IP_bus_InternetSource : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kNone = 1,
            kPSim = 2,
            kBluetooth = 3,
            kUsb = 4,
            kError = 5
        };
        
        Infotainment_IP_bus_InternetSource() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kNone)) {}
        Infotainment_IP_bus_InternetSource(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kNone):
                case static_cast<int32_t>(Literal::kPSim):
                case static_cast<int32_t>(Literal::kBluetooth):
                case static_cast<int32_t>(Literal::kUsb):
                case static_cast<int32_t>(Literal::kError):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Infotainment_IP_bus_InternetSource &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Infotainment_IP_bus_InternetSource &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Infotainment_IP_bus_InternetSource &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Infotainment_IP_bus_InternetSource &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Infotainment_IP_bus_InternetSource &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Infotainment_IP_bus_InternetSource &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct DiagMgm_RemoteDiagInfo : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            closed = 0,
            started = 1,
            failed = 2
        };
        
        DiagMgm_RemoteDiagInfo() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::closed)) {}
        DiagMgm_RemoteDiagInfo(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::closed):
                case static_cast<int32_t>(Literal::started):
                case static_cast<int32_t>(Literal::failed):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DiagMgm_RemoteDiagInfo &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DiagMgm_RemoteDiagInfo &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DiagMgm_RemoteDiagInfo &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DiagMgm_RemoteDiagInfo &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DiagMgm_RemoteDiagInfo &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DiagMgm_RemoteDiagInfo &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct DiagMgm_DoIPPhase : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            none = 0,
            announcement = 1,
            activation = 2,
            session = 3
        };
        
        DiagMgm_DoIPPhase() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::none)) {}
        DiagMgm_DoIPPhase(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::none):
                case static_cast<int32_t>(Literal::announcement):
                case static_cast<int32_t>(Literal::activation):
                case static_cast<int32_t>(Literal::session):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DiagMgm_DoIPPhase &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DiagMgm_DoIPPhase &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DiagMgm_DoIPPhase &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DiagMgm_DoIPPhase &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DiagMgm_DoIPPhase &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DiagMgm_DoIPPhase &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct DiagMgm_DoIPMode : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            none = 0,
            local = 1,
            remote = 2
        };
        
        DiagMgm_DoIPMode() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::none)) {}
        DiagMgm_DoIPMode(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::none):
                case static_cast<int32_t>(Literal::local):
                case static_cast<int32_t>(Literal::remote):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DiagMgm_DoIPMode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DiagMgm_DoIPMode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DiagMgm_DoIPMode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DiagMgm_DoIPMode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DiagMgm_DoIPMode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DiagMgm_DoIPMode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct DiagMgm_CurrentDoIPConn : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            none = 0,
            ethernetp2p = 1,
            ethernetlan = 2,
            wlan = 3,
            phone = 4
        };
        
        DiagMgm_CurrentDoIPConn() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::none)) {}
        DiagMgm_CurrentDoIPConn(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::none):
                case static_cast<int32_t>(Literal::ethernetp2p):
                case static_cast<int32_t>(Literal::ethernetlan):
                case static_cast<int32_t>(Literal::wlan):
                case static_cast<int32_t>(Literal::phone):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DiagMgm_CurrentDoIPConn &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DiagMgm_CurrentDoIPConn &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DiagMgm_CurrentDoIPConn &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DiagMgm_CurrentDoIPConn &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DiagMgm_CurrentDoIPConn &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DiagMgm_CurrentDoIPConn &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct DiagMgm_UpdateDacMode : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            automatic = 0,
            semiautomatic = 1,
            manual = 2
        };
        
        DiagMgm_UpdateDacMode() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::automatic)) {}
        DiagMgm_UpdateDacMode(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::automatic):
                case static_cast<int32_t>(Literal::semiautomatic):
                case static_cast<int32_t>(Literal::manual):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DiagMgm_UpdateDacMode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DiagMgm_UpdateDacMode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DiagMgm_UpdateDacMode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DiagMgm_UpdateDacMode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DiagMgm_UpdateDacMode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DiagMgm_UpdateDacMode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct DiagMgm_DoIPState : CommonAPI::Struct<bool, DiagMgm_DoIPMode, DiagMgm_DoIPPhase> {
    	
    	DiagMgm_DoIPState() {
    		std::get<0>(values_) = false;
    	}
    	DiagMgm_DoIPState(const bool &_doIPState, const DiagMgm_DoIPMode &_doIPMode, const DiagMgm_DoIPPhase &_doIPPhase)
    	{
    		std::get<0>(values_) = _doIPState;
    		std::get<1>(values_) = _doIPMode;
    		std::get<2>(values_) = _doIPPhase;
    	}
    	inline const bool &getDoIPState() const { return std::get<0>(values_); }
    	inline void setDoIPState(const bool _value) { std::get<0>(values_) = _value; }
    	inline const DiagMgm_DoIPMode &getDoIPMode() const { return std::get<1>(values_); }
    	inline void setDoIPMode(const DiagMgm_DoIPMode &_value) { std::get<1>(values_) = _value; }
    	inline const DiagMgm_DoIPPhase &getDoIPPhase() const { return std::get<2>(values_); }
    	inline void setDoIPPhase(const DiagMgm_DoIPPhase &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const DiagMgm_DoIPState& _other) const {
                return (getDoIPState() == _other.getDoIPState() && getDoIPMode() == _other.getDoIPMode() && getDoIPPhase() == _other.getDoIPPhase());
        }
    	inline bool operator!=(const DiagMgm_DoIPState &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct DiagMgm_UserAuthCredentials : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            reject = 0,
            accept = 1
        };
        
        DiagMgm_UserAuthCredentials() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::reject)) {}
        DiagMgm_UserAuthCredentials(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::reject):
                case static_cast<int32_t>(Literal::accept):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DiagMgm_UserAuthCredentials &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DiagMgm_UserAuthCredentials &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DiagMgm_UserAuthCredentials &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DiagMgm_UserAuthCredentials &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DiagMgm_UserAuthCredentials &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DiagMgm_UserAuthCredentials &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PSIMConnectionStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kConnectedHome = 0,
            kConnectedRoaming = 1,
            kConnecting = 2,
            kDisconnected = 3,
            kProhibited = 4
        };
        
        PSIMConnectionStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kConnectedHome)) {}
        PSIMConnectionStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kConnectedHome):
                case static_cast<int32_t>(Literal::kConnectedRoaming):
                case static_cast<int32_t>(Literal::kConnecting):
                case static_cast<int32_t>(Literal::kDisconnected):
                case static_cast<int32_t>(Literal::kProhibited):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PSIMConnectionStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PSIMConnectionStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PSIMConnectionStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PSIMConnectionStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PSIMConnectionStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PSIMConnectionStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct WirelessTechnology : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kUnknown = 0,
            kGprs = 1,
            kEdge = 2,
            kUmts = 10,
            kHsdpa = 11,
            kHsupa = 12,
            kLte = 30
        };
        
        WirelessTechnology() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kUnknown)) {}
        WirelessTechnology(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kUnknown):
                case static_cast<int32_t>(Literal::kGprs):
                case static_cast<int32_t>(Literal::kEdge):
                case static_cast<int32_t>(Literal::kUmts):
                case static_cast<int32_t>(Literal::kHsdpa):
                case static_cast<int32_t>(Literal::kHsupa):
                case static_cast<int32_t>(Literal::kLte):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const WirelessTechnology &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const WirelessTechnology &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const WirelessTechnology &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const WirelessTechnology &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const WirelessTechnology &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const WirelessTechnology &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct CarModem_ConnectionStatus : CommonAPI::Struct<PSIMConnectionStatus, WirelessTechnology> {
    	
    	CarModem_ConnectionStatus() {
    	}
    	CarModem_ConnectionStatus(const PSIMConnectionStatus &_connectionStatus, const WirelessTechnology &_wirelessTechnology)
    	{
    		std::get<0>(values_) = _connectionStatus;
    		std::get<1>(values_) = _wirelessTechnology;
    	}
    	inline const PSIMConnectionStatus &getConnectionStatus() const { return std::get<0>(values_); }
    	inline void setConnectionStatus(const PSIMConnectionStatus &_value) { std::get<0>(values_) = _value; }
    	inline const WirelessTechnology &getWirelessTechnology() const { return std::get<1>(values_); }
    	inline void setWirelessTechnology(const WirelessTechnology &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const CarModem_ConnectionStatus& _other) const {
                return (getConnectionStatus() == _other.getConnectionStatus() && getWirelessTechnology() == _other.getWirelessTechnology());
        }
    	inline bool operator!=(const CarModem_ConnectionStatus &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct NetworkRegistrationStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kRegistered = 0,
            kRegistered_Roaming = 1,
            kNotRegistedSearching = 2,
            kNotRegistedNotSearching = 3,
            kRegistrationDenied = 4
        };
        
        NetworkRegistrationStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kRegistered)) {}
        NetworkRegistrationStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kRegistered):
                case static_cast<int32_t>(Literal::kRegistered_Roaming):
                case static_cast<int32_t>(Literal::kNotRegistedSearching):
                case static_cast<int32_t>(Literal::kNotRegistedNotSearching):
                case static_cast<int32_t>(Literal::kRegistrationDenied):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const NetworkRegistrationStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const NetworkRegistrationStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const NetworkRegistrationStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const NetworkRegistrationStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const NetworkRegistrationStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const NetworkRegistrationStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct CarModem_RegistrationStatus : CommonAPI::Struct<NetworkRegistrationStatus, std::string> {
    	
    	CarModem_RegistrationStatus() {
    	}
    	CarModem_RegistrationStatus(const NetworkRegistrationStatus &_registrationStatus, const std::string &_operatorName)
    	{
    		std::get<0>(values_) = _registrationStatus;
    		std::get<1>(values_) = _operatorName;
    	}
    	/**
    	 * description: current network registration status
    	 */
    	inline const NetworkRegistrationStatus &getRegistrationStatus() const { return std::get<0>(values_); }
    	inline void setRegistrationStatus(const NetworkRegistrationStatus &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Name of the network registered upon.
    	            NOTE: Operator name is valid
    	 *   (not a empty string) only if registration status is either kRegistered or
    	 *   kRegistered_Roaming
    	 */
    	inline const std::string &getOperatorName() const { return std::get<1>(values_); }
    	inline void setOperatorName(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const CarModem_RegistrationStatus& _other) const {
                return (getRegistrationStatus() == _other.getRegistrationStatus() && getOperatorName() == _other.getOperatorName());
        }
    	inline bool operator!=(const CarModem_RegistrationStatus &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct PSIMCardStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kNotInUse = 0,
            kNotAvailable = 1,
            kPukBlocked = 2,
            kPinBlocked = 3,
            kPinRequired = 4,
            kInitializing = 5,
            kReadyForSettings = 6
        };
        
        PSIMCardStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kNotInUse)) {}
        PSIMCardStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kNotInUse):
                case static_cast<int32_t>(Literal::kNotAvailable):
                case static_cast<int32_t>(Literal::kPukBlocked):
                case static_cast<int32_t>(Literal::kPinBlocked):
                case static_cast<int32_t>(Literal::kPinRequired):
                case static_cast<int32_t>(Literal::kInitializing):
                case static_cast<int32_t>(Literal::kReadyForSettings):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PSIMCardStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PSIMCardStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PSIMCardStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PSIMCardStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PSIMCardStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PSIMCardStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PSIMRemainingPINTrials : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kUnknown = 0,
            kOneRemaining = 1,
            kTwoRemaining = 2,
            kThreeRemaining = 3
        };
        
        PSIMRemainingPINTrials() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kUnknown)) {}
        PSIMRemainingPINTrials(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kUnknown):
                case static_cast<int32_t>(Literal::kOneRemaining):
                case static_cast<int32_t>(Literal::kTwoRemaining):
                case static_cast<int32_t>(Literal::kThreeRemaining):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PSIMRemainingPINTrials &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PSIMRemainingPINTrials &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PSIMRemainingPINTrials &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PSIMRemainingPINTrials &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PSIMRemainingPINTrials &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PSIMRemainingPINTrials &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PSIMRemainingPUKTrials : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kUnknown = 0,
            kOneRemaining = 1,
            kTwoRemaining = 2,
            kThreeRemaining = 3,
            kFourRemaining = 4,
            kFiveRemaining = 5,
            kSixRemaining = 6,
            kSevenRemaining = 7,
            kEightRemaining = 8,
            kNineRemaining = 9,
            kTenRemaining = 10
        };
        
        PSIMRemainingPUKTrials() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kUnknown)) {}
        PSIMRemainingPUKTrials(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kUnknown):
                case static_cast<int32_t>(Literal::kOneRemaining):
                case static_cast<int32_t>(Literal::kTwoRemaining):
                case static_cast<int32_t>(Literal::kThreeRemaining):
                case static_cast<int32_t>(Literal::kFourRemaining):
                case static_cast<int32_t>(Literal::kFiveRemaining):
                case static_cast<int32_t>(Literal::kSixRemaining):
                case static_cast<int32_t>(Literal::kSevenRemaining):
                case static_cast<int32_t>(Literal::kEightRemaining):
                case static_cast<int32_t>(Literal::kNineRemaining):
                case static_cast<int32_t>(Literal::kTenRemaining):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PSIMRemainingPUKTrials &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PSIMRemainingPUKTrials &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PSIMRemainingPUKTrials &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PSIMRemainingPUKTrials &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PSIMRemainingPUKTrials &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PSIMRemainingPUKTrials &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct CarModem_SIMCardStatus : CommonAPI::Struct<PSIMCardStatus, std::string, PSIMRemainingPINTrials, PSIMRemainingPUKTrials> {
    	
    	CarModem_SIMCardStatus() {
    	}
    	CarModem_SIMCardStatus(const PSIMCardStatus &_simCardStatus, const std::string &_imeiNumber, const PSIMRemainingPINTrials &_remainingPINTrials, const PSIMRemainingPUKTrials &_remainingPUKTrials)
    	{
    		std::get<0>(values_) = _simCardStatus;
    		std::get<1>(values_) = _imeiNumber;
    		std::get<2>(values_) = _remainingPINTrials;
    		std::get<3>(values_) = _remainingPUKTrials;
    	}
    	inline const PSIMCardStatus &getSimCardStatus() const { return std::get<0>(values_); }
    	inline void setSimCardStatus(const PSIMCardStatus &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: IMEI number is an optional parameter. If available is a string of length
    	 *   [10..20]
    	 */
    	inline const std::string &getImeiNumber() const { return std::get<1>(values_); }
    	inline void setImeiNumber(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline const PSIMRemainingPINTrials &getRemainingPINTrials() const { return std::get<2>(values_); }
    	inline void setRemainingPINTrials(const PSIMRemainingPINTrials &_value) { std::get<2>(values_) = _value; }
    	inline const PSIMRemainingPUKTrials &getRemainingPUKTrials() const { return std::get<3>(values_); }
    	inline void setRemainingPUKTrials(const PSIMRemainingPUKTrials &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const CarModem_SIMCardStatus& _other) const {
                return (getSimCardStatus() == _other.getSimCardStatus() && getImeiNumber() == _other.getImeiNumber() && getRemainingPINTrials() == _other.getRemainingPINTrials() && getRemainingPUKTrials() == _other.getRemainingPUKTrials());
        }
    	inline bool operator!=(const CarModem_SIMCardStatus &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct CarModem_SIMDataCounter : CommonAPI::Struct<uint32_t, Infotainment_IP_bus_DateTime> {
    	
    	CarModem_SIMDataCounter() {
    	}
    	CarModem_SIMDataCounter(const uint32_t &_dataCounterValue, const Infotainment_IP_bus_DateTime &_dateTime)
    	{
    		std::get<0>(values_) = _dataCounterValue;
    		std::get<1>(values_) = _dateTime;
    	}
    	inline const uint32_t &getDataCounterValue() const { return std::get<0>(values_); }
    	inline void setDataCounterValue(const uint32_t &_value) { std::get<0>(values_) = _value; }
    	inline const Infotainment_IP_bus_DateTime &getDateTime() const { return std::get<1>(values_); }
    	inline void setDateTime(const Infotainment_IP_bus_DateTime &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const CarModem_SIMDataCounter& _other) const {
                return (getDataCounterValue() == _other.getDataCounterValue() && getDateTime() == _other.getDateTime());
        }
    	inline bool operator!=(const CarModem_SIMDataCounter &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct CarModem_ResetSIMDataCounter : CommonAPI::Struct<uint32_t> {
    	
    	CarModem_ResetSIMDataCounter() {
    	}
    	CarModem_ResetSIMDataCounter(const uint32_t &_dataCounterValue)
    	{
    		std::get<0>(values_) = _dataCounterValue;
    	}
    	inline const uint32_t &getDataCounterValue() const { return std::get<0>(values_); }
    	inline void setDataCounterValue(const uint32_t &_value) { std::get<0>(values_) = _value; }
    	inline bool operator==(const CarModem_ResetSIMDataCounter& _other) const {
                return (getDataCounterValue() == _other.getDataCounterValue());
        }
    	inline bool operator!=(const CarModem_ResetSIMDataCounter &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct PinPukCommand_Choice : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kEnterPin = 0,
            kEnterPuk = 1,
            kChangePin = 2
        };
        
        PinPukCommand_Choice() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kEnterPin)) {}
        PinPukCommand_Choice(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kEnterPin):
                case static_cast<int32_t>(Literal::kEnterPuk):
                case static_cast<int32_t>(Literal::kChangePin):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PinPukCommand_Choice &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PinPukCommand_Choice &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PinPukCommand_Choice &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PinPukCommand_Choice &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PinPukCommand_Choice &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PinPukCommand_Choice &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct PinPukCodes : CommonAPI::Struct<std::string, std::string> {
    	
    	PinPukCodes() {
    	}
    	PinPukCodes(const std::string &_puk, const std::string &_newpin)
    	{
    		std::get<0>(values_) = _puk;
    		std::get<1>(values_) = _newpin;
    	}
    	inline const std::string &getPuk() const { return std::get<0>(values_); }
    	inline void setPuk(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getNewpin() const { return std::get<1>(values_); }
    	inline void setNewpin(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const PinPukCodes& _other) const {
                return (getPuk() == _other.getPuk() && getNewpin() == _other.getNewpin());
        }
    	inline bool operator!=(const PinPukCodes &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct PinPinCodes : CommonAPI::Struct<std::string, std::string> {
    	
    	PinPinCodes() {
    	}
    	PinPinCodes(const std::string &_oldpin, const std::string &_newpin)
    	{
    		std::get<0>(values_) = _oldpin;
    		std::get<1>(values_) = _newpin;
    	}
    	inline const std::string &getOldpin() const { return std::get<0>(values_); }
    	inline void setOldpin(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getNewpin() const { return std::get<1>(values_); }
    	inline void setNewpin(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const PinPinCodes& _other) const {
                return (getOldpin() == _other.getOldpin() && getNewpin() == _other.getNewpin());
        }
    	inline bool operator!=(const PinPinCodes &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef CommonAPI::Variant<std::string, PinPukCodes, PinPinCodes>  PinPukCommand_data;
    struct CarModem_PinPukCommand : CommonAPI::Struct<PinPukCommand_Choice, PinPukCommand_data> {
    	
    	CarModem_PinPukCommand() {
    	}
    	CarModem_PinPukCommand(const PinPukCommand_Choice &_choice, const PinPukCommand_data &_data)
    	{
    		std::get<0>(values_) = _choice;
    		std::get<1>(values_) = _data;
    	}
    	inline const PinPukCommand_Choice &getChoice() const { return std::get<0>(values_); }
    	inline void setChoice(const PinPukCommand_Choice &_value) { std::get<0>(values_) = _value; }
    	inline const PinPukCommand_data &getData() const { return std::get<1>(values_); }
    	inline void setData(const PinPukCommand_data &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const CarModem_PinPukCommand& _other) const {
                return (getChoice() == _other.getChoice() && getData() == _other.getData());
        }
    	inline bool operator!=(const CarModem_PinPukCommand &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct CarModem_SIMSecuritySetting : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kOn = 0,
            kOff = 1
        };
        
        CarModem_SIMSecuritySetting() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kOn)) {}
        CarModem_SIMSecuritySetting(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kOn):
                case static_cast<int32_t>(Literal::kOff):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CarModem_SIMSecuritySetting &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CarModem_SIMSecuritySetting &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CarModem_SIMSecuritySetting &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CarModem_SIMSecuritySetting &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CarModem_SIMSecuritySetting &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CarModem_SIMSecuritySetting &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct CarModem_ApnSelection : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            Automatic = 0,
            Manual = 1,
            AutoFailed = 2
        };
        
        CarModem_ApnSelection() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::Automatic)) {}
        CarModem_ApnSelection(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::Automatic):
                case static_cast<int32_t>(Literal::Manual):
                case static_cast<int32_t>(Literal::AutoFailed):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CarModem_ApnSelection &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CarModem_ApnSelection &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CarModem_ApnSelection &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CarModem_ApnSelection &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CarModem_ApnSelection &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CarModem_ApnSelection &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct CarModem_ApnConfiguration : CommonAPI::Struct<CarModem_ApnSelection, std::string, std::string, std::string> {
    	
    	CarModem_ApnConfiguration() {
    	}
    	CarModem_ApnConfiguration(const CarModem_ApnSelection &_selection, const std::string &_apnName, const std::string &_userName, const std::string &_password)
    	{
    		std::get<0>(values_) = _selection;
    		std::get<1>(values_) = _apnName;
    		std::get<2>(values_) = _userName;
    		std::get<3>(values_) = _password;
    	}
    	inline const CarModem_ApnSelection &getSelection() const { return std::get<0>(values_); }
    	inline void setSelection(const CarModem_ApnSelection &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getApnName() const { return std::get<1>(values_); }
    	inline void setApnName(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline const std::string &getUserName() const { return std::get<2>(values_); }
    	inline void setUserName(const std::string &_value) { std::get<2>(values_) = _value; }
    	inline const std::string &getPassword() const { return std::get<3>(values_); }
    	inline void setPassword(const std::string &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const CarModem_ApnConfiguration& _other) const {
                return (getSelection() == _other.getSelection() && getApnName() == _other.getApnName() && getUserName() == _other.getUserName() && getPassword() == _other.getPassword());
        }
    	inline bool operator!=(const CarModem_ApnConfiguration &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct NetworkOperatorId : CommonAPI::Struct<uint32_t, uint32_t> {
    	
    	NetworkOperatorId() {
    	}
    	NetworkOperatorId(const uint32_t &_mobileCountryCode, const uint32_t &_mobileNetworkCode)
    	{
    		std::get<0>(values_) = _mobileCountryCode;
    		std::get<1>(values_) = _mobileNetworkCode;
    	}
    	inline const uint32_t &getMobileCountryCode() const { return std::get<0>(values_); }
    	inline void setMobileCountryCode(const uint32_t &_value) { std::get<0>(values_) = _value; }
    	inline const uint32_t &getMobileNetworkCode() const { return std::get<1>(values_); }
    	inline void setMobileNetworkCode(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const NetworkOperatorId& _other) const {
                return (getMobileCountryCode() == _other.getMobileCountryCode() && getMobileNetworkCode() == _other.getMobileNetworkCode());
        }
    	inline bool operator!=(const NetworkOperatorId &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct NetworkType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            Gsm = 0,
            Umts = 1,
            Lte = 2
        };
        
        NetworkType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::Gsm)) {}
        NetworkType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::Gsm):
                case static_cast<int32_t>(Literal::Umts):
                case static_cast<int32_t>(Literal::Lte):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const NetworkType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const NetworkType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const NetworkType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const NetworkType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const NetworkType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const NetworkType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct NetworkOperator : CommonAPI::Struct<NetworkOperatorId, std::string, NetworkType> {
    	
    	NetworkOperator() {
    	}
    	NetworkOperator(const NetworkOperatorId &_Id, const std::string &_operatorName, const NetworkType &_networkType)
    	{
    		std::get<0>(values_) = _Id;
    		std::get<1>(values_) = _operatorName;
    		std::get<2>(values_) = _networkType;
    	}
    	inline const NetworkOperatorId &getId() const { return std::get<0>(values_); }
    	inline void setId(const NetworkOperatorId &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getOperatorName() const { return std::get<1>(values_); }
    	inline void setOperatorName(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline const NetworkType &getNetworkType() const { return std::get<2>(values_); }
    	inline void setNetworkType(const NetworkType &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const NetworkOperator& _other) const {
                return (getId() == _other.getId() && getOperatorName() == _other.getOperatorName() && getNetworkType() == _other.getNetworkType());
        }
    	inline bool operator!=(const NetworkOperator &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct OperatorSelection_Choice : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kAutomatic = 0,
            kManual = 1
        };
        
        OperatorSelection_Choice() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kAutomatic)) {}
        OperatorSelection_Choice(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kAutomatic):
                case static_cast<int32_t>(Literal::kManual):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const OperatorSelection_Choice &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const OperatorSelection_Choice &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const OperatorSelection_Choice &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const OperatorSelection_Choice &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const OperatorSelection_Choice &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const OperatorSelection_Choice &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: Set Operator automatically or manual
     */
    struct CarModem_OperatorSelection : CommonAPI::Struct<OperatorSelection_Choice, NetworkOperatorId> {
    	
    	CarModem_OperatorSelection() {
    	}
    	CarModem_OperatorSelection(const OperatorSelection_Choice &_choice, const NetworkOperatorId &_setOperator)
    	{
    		std::get<0>(values_) = _choice;
    		std::get<1>(values_) = _setOperator;
    	}
    	inline const OperatorSelection_Choice &getChoice() const { return std::get<0>(values_); }
    	inline void setChoice(const OperatorSelection_Choice &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: NetworkOperatorId setOperator is only used when OperatorSelection_Choice is set
    	 *   to kManual
    	 */
    	inline const NetworkOperatorId &getSetOperator() const { return std::get<1>(values_); }
    	inline void setSetOperator(const NetworkOperatorId &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const CarModem_OperatorSelection& _other) const {
                return (getChoice() == _other.getChoice() && getSetOperator() == _other.getSetOperator());
        }
    	inline bool operator!=(const CarModem_OperatorSelection &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct AssistCallAction : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kAcceptCall = 0,
            kHangupCall = 1
        };
        
        AssistCallAction() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kAcceptCall)) {}
        AssistCallAction(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kAcceptCall):
                case static_cast<int32_t>(Literal::kHangupCall):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const AssistCallAction &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const AssistCallAction &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const AssistCallAction &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const AssistCallAction &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const AssistCallAction &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const AssistCallAction &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Infotainment_IP_bus_Ecu : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kNone = 0,
            kIhu = 1,
            kVcm = 2,
            kTem = 3
        };
        
        Infotainment_IP_bus_Ecu() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kNone)) {}
        Infotainment_IP_bus_Ecu(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kNone):
                case static_cast<int32_t>(Literal::kIhu):
                case static_cast<int32_t>(Literal::kVcm):
                case static_cast<int32_t>(Literal::kTem):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Infotainment_IP_bus_Ecu &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Infotainment_IP_bus_Ecu &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Infotainment_IP_bus_Ecu &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Infotainment_IP_bus_Ecu &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Infotainment_IP_bus_Ecu &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Infotainment_IP_bus_Ecu &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Infotainment_IP_bus_OnOffSetting : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kOff = 0,
            kOn = 1
        };
        
        Infotainment_IP_bus_OnOffSetting() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kOff)) {}
        Infotainment_IP_bus_OnOffSetting(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kOff):
                case static_cast<int32_t>(Literal::kOn):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Infotainment_IP_bus_OnOffSetting &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Infotainment_IP_bus_OnOffSetting &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Infotainment_IP_bus_OnOffSetting &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Infotainment_IP_bus_OnOffSetting &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Infotainment_IP_bus_OnOffSetting &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Infotainment_IP_bus_OnOffSetting &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct GenericOkStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            unknown = 0,
            ok = 1,
            notOk = 2
        };
        
        GenericOkStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::unknown)) {}
        GenericOkStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::unknown):
                case static_cast<int32_t>(Literal::ok):
                case static_cast<int32_t>(Literal::notOk):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const GenericOkStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const GenericOkStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const GenericOkStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const GenericOkStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const GenericOkStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const GenericOkStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct SourceStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kUnidentified = 0,
            kTrusted = 1,
            kCallCenter = 2,
            Kpsap = 3,
            kOutgoing = 4
        };
        
        SourceStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kUnidentified)) {}
        SourceStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kUnidentified):
                case static_cast<int32_t>(Literal::kTrusted):
                case static_cast<int32_t>(Literal::kCallCenter):
                case static_cast<int32_t>(Literal::Kpsap):
                case static_cast<int32_t>(Literal::kOutgoing):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SourceStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SourceStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SourceStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SourceStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SourceStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SourceStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct SecurityStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kIdle = 0,
            kStandby = 1,
            kActive = 2,
            kActiveStandalone = 3
        };
        
        SecurityStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kIdle)) {}
        SecurityStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kIdle):
                case static_cast<int32_t>(Literal::kStandby):
                case static_cast<int32_t>(Literal::kActive):
                case static_cast<int32_t>(Literal::kActiveStandalone):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SecurityStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SecurityStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SecurityStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SecurityStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SecurityStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SecurityStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct AudioStatus : CommonAPI::Struct<GenericOkStatus, GenericOkStatus> {
    	
    	AudioStatus() {
    	}
    	AudioStatus(const GenericOkStatus &_micStatus, const GenericOkStatus &_speakerStatus)
    	{
    		std::get<0>(values_) = _micStatus;
    		std::get<1>(values_) = _speakerStatus;
    	}
    	inline const GenericOkStatus &getMicStatus() const { return std::get<0>(values_); }
    	inline void setMicStatus(const GenericOkStatus &_value) { std::get<0>(values_) = _value; }
    	inline const GenericOkStatus &getSpeakerStatus() const { return std::get<1>(values_); }
    	inline void setSpeakerStatus(const GenericOkStatus &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const AudioStatus& _other) const {
                return (getMicStatus() == _other.getMicStatus() && getSpeakerStatus() == _other.getSpeakerStatus());
        }
    	inline bool operator!=(const AudioStatus &_other) const {
    		return !((*this) == _other);
    	}
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.volvo.connectivity.IpCommandBusTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(0, 1);
}

}; // struct IpCommandBusTypes

} // namespace connectivity
} // namespace volvo
} // namespace org
} // namespace v0

namespace CommonAPI {
}


namespace std {
    //Hash for SBTrigger
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::SBTrigger> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::SBTrigger& sBTrigger) const {
            return static_cast<int32_t>(sBTrigger);
        }
    };
    //Hash for TEM_PreferredEcalls
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_PreferredEcalls> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_PreferredEcalls& tEM_PreferredEcalls) const {
            return static_cast<int32_t>(tEM_PreferredEcalls);
        }
    };
    //Hash for TEM_ActivationStatus
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_ActivationStatus> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_ActivationStatus& tEM_ActivationStatus) const {
            return static_cast<int32_t>(tEM_ActivationStatus);
        }
    };
    //Hash for TEM_ActivationStatusChange
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_ActivationStatusChange> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_ActivationStatusChange& tEM_ActivationStatusChange) const {
            return static_cast<int32_t>(tEM_ActivationStatusChange);
        }
    };
    //Hash for TEM_RescueStatus
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_RescueStatus> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_RescueStatus& tEM_RescueStatus) const {
            return static_cast<int32_t>(tEM_RescueStatus);
        }
    };
    //Hash for TEM_VoiceStatus
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_VoiceStatus> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_VoiceStatus& tEM_VoiceStatus) const {
            return static_cast<int32_t>(tEM_VoiceStatus);
        }
    };
    //Hash for TEM_MessageStatus
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_MessageStatus> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_MessageStatus& tEM_MessageStatus) const {
            return static_cast<int32_t>(tEM_MessageStatus);
        }
    };
    //Hash for TEM_ButtonStatus
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_ButtonStatus> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_ButtonStatus& tEM_ButtonStatus) const {
            return static_cast<int32_t>(tEM_ButtonStatus);
        }
    };
    //Hash for TEM_PSAPStatus
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_PSAPStatus> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_PSAPStatus& tEM_PSAPStatus) const {
            return static_cast<int32_t>(tEM_PSAPStatus);
        }
    };
    //Hash for TEM_OnCallService
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_OnCallService> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_OnCallService& tEM_OnCallService) const {
            return static_cast<int32_t>(tEM_OnCallService);
        }
    };
    //Hash for TEM_OnOffSetting
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_OnOffSetting> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_OnOffSetting& tEM_OnOffSetting) const {
            return static_cast<int32_t>(tEM_OnOffSetting);
        }
    };
    //Hash for Infotainment_IP_bus_DeadReckoningType
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_DeadReckoningType> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_DeadReckoningType& infotainment_IP_bus_DeadReckoningType) const {
            return static_cast<int32_t>(infotainment_IP_bus_DeadReckoningType);
        }
    };
    //Hash for Infotainment_IP_bus_Errors
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors& infotainment_IP_bus_Errors) const {
            return static_cast<int32_t>(infotainment_IP_bus_Errors);
        }
    };
    //Hash for Infotainment_IP_bus_GnssFixType
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_GnssFixType> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_GnssFixType& infotainment_IP_bus_GnssFixType) const {
            return static_cast<int32_t>(infotainment_IP_bus_GnssFixType);
        }
    };
    //Hash for Infotainment_IP_bus_SatelliteTrackingStatusType
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_SatelliteTrackingStatusType> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_SatelliteTrackingStatusType& infotainment_IP_bus_SatelliteTrackingStatusType) const {
            return static_cast<int32_t>(infotainment_IP_bus_SatelliteTrackingStatusType);
        }
    };
    //Hash for Infotainment_IP_bus_ExtendedChannelData_Choices
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_ExtendedChannelData_Choices> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_ExtendedChannelData_Choices& infotainment_IP_bus_ExtendedChannelData_Choices) const {
            return static_cast<int32_t>(infotainment_IP_bus_ExtendedChannelData_Choices);
        }
    };
    //Hash for Infotainment_IP_bus_WlanMode
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanMode> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanMode& infotainment_IP_bus_WlanMode) const {
            return static_cast<int32_t>(infotainment_IP_bus_WlanMode);
        }
    };
    //Hash for Infotainment_IP_bus_WlanConnectStatus
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanConnectStatus> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanConnectStatus& infotainment_IP_bus_WlanConnectStatus) const {
            return static_cast<int32_t>(infotainment_IP_bus_WlanConnectStatus);
        }
    };
    //Hash for Infotainment_IP_bus_WlanFrequencyBand
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanFrequencyBand> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanFrequencyBand& infotainment_IP_bus_WlanFrequencyBand) const {
            return static_cast<int32_t>(infotainment_IP_bus_WlanFrequencyBand);
        }
    };
    //Hash for Infotainment_IP_bus_WlanApCurrentStatus
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanApCurrentStatus> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanApCurrentStatus& infotainment_IP_bus_WlanApCurrentStatus) const {
            return static_cast<int32_t>(infotainment_IP_bus_WlanApCurrentStatus);
        }
    };
    //Hash for Infotainment_IP_bus_WlanSecurityType
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanSecurityType> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanSecurityType& infotainment_IP_bus_WlanSecurityType) const {
            return static_cast<int32_t>(infotainment_IP_bus_WlanSecurityType);
        }
    };
    //Hash for Infotainment_IP_bus_InternetSource
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_InternetSource> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_InternetSource& infotainment_IP_bus_InternetSource) const {
            return static_cast<int32_t>(infotainment_IP_bus_InternetSource);
        }
    };
    //Hash for DiagMgm_RemoteDiagInfo
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::DiagMgm_RemoteDiagInfo> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::DiagMgm_RemoteDiagInfo& diagMgm_RemoteDiagInfo) const {
            return static_cast<int32_t>(diagMgm_RemoteDiagInfo);
        }
    };
    //Hash for DiagMgm_DoIPPhase
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::DiagMgm_DoIPPhase> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::DiagMgm_DoIPPhase& diagMgm_DoIPPhase) const {
            return static_cast<int32_t>(diagMgm_DoIPPhase);
        }
    };
    //Hash for DiagMgm_DoIPMode
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::DiagMgm_DoIPMode> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::DiagMgm_DoIPMode& diagMgm_DoIPMode) const {
            return static_cast<int32_t>(diagMgm_DoIPMode);
        }
    };
    //Hash for DiagMgm_CurrentDoIPConn
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::DiagMgm_CurrentDoIPConn> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::DiagMgm_CurrentDoIPConn& diagMgm_CurrentDoIPConn) const {
            return static_cast<int32_t>(diagMgm_CurrentDoIPConn);
        }
    };
    //Hash for DiagMgm_UpdateDacMode
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::DiagMgm_UpdateDacMode> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::DiagMgm_UpdateDacMode& diagMgm_UpdateDacMode) const {
            return static_cast<int32_t>(diagMgm_UpdateDacMode);
        }
    };
    //Hash for DiagMgm_UserAuthCredentials
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::DiagMgm_UserAuthCredentials> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::DiagMgm_UserAuthCredentials& diagMgm_UserAuthCredentials) const {
            return static_cast<int32_t>(diagMgm_UserAuthCredentials);
        }
    };
    //Hash for PSIMConnectionStatus
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::PSIMConnectionStatus> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::PSIMConnectionStatus& pSIMConnectionStatus) const {
            return static_cast<int32_t>(pSIMConnectionStatus);
        }
    };
    //Hash for WirelessTechnology
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::WirelessTechnology> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::WirelessTechnology& wirelessTechnology) const {
            return static_cast<int32_t>(wirelessTechnology);
        }
    };
    //Hash for NetworkRegistrationStatus
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::NetworkRegistrationStatus> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::NetworkRegistrationStatus& networkRegistrationStatus) const {
            return static_cast<int32_t>(networkRegistrationStatus);
        }
    };
    //Hash for PSIMCardStatus
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::PSIMCardStatus> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::PSIMCardStatus& pSIMCardStatus) const {
            return static_cast<int32_t>(pSIMCardStatus);
        }
    };
    //Hash for PSIMRemainingPINTrials
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::PSIMRemainingPINTrials> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::PSIMRemainingPINTrials& pSIMRemainingPINTrials) const {
            return static_cast<int32_t>(pSIMRemainingPINTrials);
        }
    };
    //Hash for PSIMRemainingPUKTrials
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::PSIMRemainingPUKTrials> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::PSIMRemainingPUKTrials& pSIMRemainingPUKTrials) const {
            return static_cast<int32_t>(pSIMRemainingPUKTrials);
        }
    };
    //Hash for PinPukCommand_Choice
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::PinPukCommand_Choice> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::PinPukCommand_Choice& pinPukCommand_Choice) const {
            return static_cast<int32_t>(pinPukCommand_Choice);
        }
    };
    //Hash for CarModem_SIMSecuritySetting
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMSecuritySetting> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMSecuritySetting& carModem_SIMSecuritySetting) const {
            return static_cast<int32_t>(carModem_SIMSecuritySetting);
        }
    };
    //Hash for CarModem_ApnSelection
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_ApnSelection> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_ApnSelection& carModem_ApnSelection) const {
            return static_cast<int32_t>(carModem_ApnSelection);
        }
    };
    //Hash for NetworkType
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::NetworkType> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::NetworkType& networkType) const {
            return static_cast<int32_t>(networkType);
        }
    };
    //Hash for OperatorSelection_Choice
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::OperatorSelection_Choice> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::OperatorSelection_Choice& operatorSelection_Choice) const {
            return static_cast<int32_t>(operatorSelection_Choice);
        }
    };
    //Hash for AssistCallAction
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::AssistCallAction> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::AssistCallAction& assistCallAction) const {
            return static_cast<int32_t>(assistCallAction);
        }
    };
    //Hash for Infotainment_IP_bus_Ecu
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Ecu> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Ecu& infotainment_IP_bus_Ecu) const {
            return static_cast<int32_t>(infotainment_IP_bus_Ecu);
        }
    };
    //Hash for Infotainment_IP_bus_OnOffSetting
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_OnOffSetting> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_OnOffSetting& infotainment_IP_bus_OnOffSetting) const {
            return static_cast<int32_t>(infotainment_IP_bus_OnOffSetting);
        }
    };
    //Hash for GenericOkStatus
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::GenericOkStatus> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::GenericOkStatus& genericOkStatus) const {
            return static_cast<int32_t>(genericOkStatus);
        }
    };
    //Hash for SourceStatus
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::SourceStatus> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::SourceStatus& sourceStatus) const {
            return static_cast<int32_t>(sourceStatus);
        }
    };
    //Hash for SecurityStatus
    template<>
    struct hash<::v0::org::volvo::connectivity::IpCommandBusTypes::SecurityStatus> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::IpCommandBusTypes::SecurityStatus& securityStatus) const {
            return static_cast<int32_t>(securityStatus);
        }
    };
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVO_CONNECTIVITY_Ip_Command_Bus_Types_HPP_
