/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This is the WLAN interface on IP Command Bus
 */
#ifndef V0_ORG_VOLVO_CONNECTIVITY_WLAN_HPP_
#define V0_ORG_VOLVO_CONNECTIVITY_WLAN_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace volvo {
namespace connectivity {

class Wlan {
public:
    virtual ~Wlan() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    
    struct WlanChannelWidthData : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            Unknown = 0,
            Width5MHz = 1,
            Width10MHz = 2,
            Width20MHz = 3
        };
        
        WlanChannelWidthData() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::Unknown)) {}
        WlanChannelWidthData(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::Unknown):
                case static_cast<int32_t>(Literal::Width5MHz):
                case static_cast<int32_t>(Literal::Width10MHz):
                case static_cast<int32_t>(Literal::Width20MHz):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const WlanChannelWidthData &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const WlanChannelWidthData &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const WlanChannelWidthData &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const WlanChannelWidthData &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const WlanChannelWidthData &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const WlanChannelWidthData &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct WlanChannelFreqInfo : CommonAPI::Struct<uint32_t, WlanChannelWidthData> {
    	
    	WlanChannelFreqInfo() {
    	}
    	WlanChannelFreqInfo(const uint32_t &_wlan24GhzChannelNumber, const WlanChannelWidthData &_wlanChannelWidth)
    	{
    		std::get<0>(values_) = _wlan24GhzChannelNumber;
    		std::get<1>(values_) = _wlanChannelWidth;
    	}
    	/**
    	 * description: Used channel on 2.4GHz. Normally in the range 1-14. 0 if unknown.
    	 */
    	inline const uint32_t &getWlan24GhzChannelNumber() const { return std::get<0>(values_); }
    	inline void setWlan24GhzChannelNumber(const uint32_t &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Used channel width.
    	 */
    	inline const WlanChannelWidthData &getWlanChannelWidth() const { return std::get<1>(values_); }
    	inline void setWlanChannelWidth(const WlanChannelWidthData &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const WlanChannelFreqInfo& _other) const {
                return (getWlan24GhzChannelNumber() == _other.getWlan24GhzChannelNumber() && getWlanChannelWidth() == _other.getWlanChannelWidth());
        }
    	inline bool operator!=(const WlanChannelFreqInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
};

const char* Wlan::getInterface() {
    return ("org.volvo.connectivity.Wlan");
}

CommonAPI::Version Wlan::getInterfaceVersion() {
    return CommonAPI::Version(0, 1);
}


} // namespace connectivity
} // namespace volvo
} // namespace org
} // namespace v0

namespace CommonAPI {
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVO_CONNECTIVITY_WLAN_HPP_
