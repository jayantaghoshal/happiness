/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_ORG_VOLVO_CONNECTIVITY_Diagnostic_Management_Authentication_PROXY_BASE_HPP_
#define V0_ORG_VOLVO_CONNECTIVITY_Diagnostic_Management_Authentication_PROXY_BASE_HPP_

#include <v0/org/volvo/connectivity/DiagnosticManagementAuthentication.hpp>


#include <v0/org/volvo/connectivity/IpCommandBusTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace volvo {
namespace connectivity {

class DiagnosticManagementAuthenticationProxyBase
    : virtual public CommonAPI::Proxy {
public:

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::org::volvo::connectivity::IpCommandBusTypes::DiagMgm_UserAuthCredentials&)> RequestUserAuthenticationAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> TextFromOperatorToUserAsyncCallback;



    /**
     * description: -- OperationID: RequestUserAuthentication (0x0A03)
     */
    virtual void RequestUserAuthentication(const std::string &_operatorName, const std::string &_serviceOrg, const uint32_t &_sessionSafetyCode, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::DiagMgm_UserAuthCredentials &_userAuthCredentials, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> RequestUserAuthenticationAsync(const std::string &_operatorName, const std::string &_serviceOrg, const uint32_t &_sessionSafetyCode, RequestUserAuthenticationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: -- OperationID: TextFromOperatorToUser (0x0A04)
     */
    virtual void TextFromOperatorToUser(const std::string &_textChatMessage, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> TextFromOperatorToUserAsync(const std::string &_textChatMessage, TextFromOperatorToUserAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace connectivity
} // namespace volvo
} // namespace org
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVO_CONNECTIVITY_Diagnostic_Management_Authentication_PROXY_BASE_HPP_
