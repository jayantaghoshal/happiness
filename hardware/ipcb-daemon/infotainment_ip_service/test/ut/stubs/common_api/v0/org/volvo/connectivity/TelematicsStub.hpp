/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This is the telematics service franca interface
 */
#ifndef V0_ORG_VOLVO_CONNECTIVITY_Telematics_STUB_HPP_
#define V0_ORG_VOLVO_CONNECTIVITY_Telematics_STUB_HPP_

#include <functional>



#include <v0/org/volvo/connectivity/IpCommandBusTypes.hpp>

#include <v0/org/volvo/connectivity/Telematics.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Variant.hpp>
#include <cstdint>
#include <memory>
#include <string>
#include <unordered_set>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace volvo {
namespace connectivity {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service Telematics. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class TelematicsStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual Telematics {
 public:

    /**
     * Sends a broadcast event for SoHPackageUploadedNotification. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireSoHPackageUploadedNotificationEvent(const std::string &_packetId, const ::v0::org::volvo::connectivity::IpCommandBusTypes::GenericOkStatus &_result) = 0;
    /**
     * Sends a broadcast event for SubscriptionActivationNotification. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireSubscriptionActivationNotificationEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_ActivationStatus &_status) = 0;
    /**
     * Sends a broadcast event for RescueStatusNotification. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireRescueStatusNotificationEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_RescueStatus &_raStatus, const ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_RescueStatus &_eaStatus, const ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_RescueStatus &_sdnStatus, const ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_VoiceStatus &_voiceStatus, const ::v0::org::volvo::connectivity::IpCommandBusTypes::SourceStatus &_voiceSource, const ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_MessageStatus &_messageStatus, const ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_ButtonStatus &_buttonStatus, const ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_PSAPStatus &_psapConfirmStatus, const ::v0::org::volvo::connectivity::IpCommandBusTypes::GenericOkStatus &_backupAudioStatus) = 0;
    /**
     * Sends a broadcast event for SVTStatusNotification. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireSVTStatusNotificationEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::SecurityStatus &_svtStatus) = 0;
    /**
     * Sends a broadcast event for TNStatusNotification. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireTNStatusNotificationEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::SecurityStatus &_tnStatus) = 0;


    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for Telematics.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class TelematicsStubRemoteEvent
{
public:
    virtual ~TelematicsStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service Telematics to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class TelematicsStub
    : public virtual CommonAPI::Stub<TelematicsStubAdapter, TelematicsStubRemoteEvent>
{
public:
    typedef std::function<void ()>SoHPacketSendSetRequestNoReturnReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_TelematicSettings _OutTelematicSetting)>TelematicSettingsSetRequestReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_PreferredEcalls _outPreferredEcalls)>ECallSettingsSetRequestReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_ActivationStatus _status)>SubscriptionActivationSetRequestReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_SimpleVehiclePosition _position)>PositionDataRequestReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, std::string _responseOk)>ServiceActivationSetRequestReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, ::v0::org::volvo::connectivity::IpCommandBusTypes::SecurityStatus _svtStatus)>SVTStatusRequestReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, ::v0::org::volvo::connectivity::IpCommandBusTypes::SecurityStatus _tnStatus)>TNStatusRequestReply_t;

    virtual ~TelematicsStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;


    /**
     * description: (0x0112 SoHPacketSend)
            This operation is used when to send
     *   SoHPacketSend(0x0112) to VCM
     */
    /// This is the method that will be called on remote calls on the method SoHPacketSendSetRequestNoReturn.
    virtual void SoHPacketSendSetRequestNoReturn(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::org::volvo::connectivity::IpCommandBusTypes::SBTrigger _trigger, std::string _text, ::v0::org::volvo::connectivity::IpCommandBusTypes::SBWarning _mainCause, std::vector<::v0::org::volvo::connectivity::IpCommandBusTypes::SBWarning> _warnings, SoHPacketSendSetRequestNoReturnReply_t _reply) = 0;
    /**
     * description: (0x0104 TelematicSettings 0x02 SetRequest )
            This operation changes
     *   settings related to telematic services
     */
    /// This is the method that will be called on remote calls on the method TelematicSettingsSetRequest.
    virtual void TelematicSettingsSetRequest(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_TelematicSettings _inTelematicSetting, TelematicSettingsSetRequestReply_t _reply) = 0;
    /**
     * description: (0x0115 EcallSettings), Method  uses for changing the priority
     * between Public SOS and VOC
     */
    /// This is the method that will be called on remote calls on the method ECallSettingsSetRequest.
    virtual void ECallSettingsSetRequest(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_PreferredEcalls _inPreferredEcalls, ECallSettingsSetRequestReply_t _reply) = 0;
    /**
     * description: (0x0107 SubscriptionActivation 0x02 SetRequest )
            This operation changes
     *   the activation status in TEM
     */
    /// This is the method that will be called on remote calls on the method SubscriptionActivationSetRequest.
    virtual void SubscriptionActivationSetRequest(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_ActivationStatusChange _newStatus, uint32_t _activationCode, SubscriptionActivationSetRequestReply_t _reply) = 0;
    /**
     * description: (0x0105 PositionData 0x00 Request)
            Ask for current position.
     */
    /// This is the method that will be called on remote calls on the method PositionDataRequest.
    virtual void PositionDataRequest(const std::shared_ptr<CommonAPI::ClientId> _client, PositionDataRequestReply_t _reply) = 0;
    /**
     * description: (0x0108 ServiceActivation  0x02 SetRequest )
            This operation starts or
     *   stops a telematics service in TEM
     */
    /// This is the method that will be called on remote calls on the method ServiceActivationSetRequest.
    virtual void ServiceActivationSetRequest(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_OnCallService _service, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_OnOffSetting _action, ServiceActivationSetRequestReply_t _reply) = 0;
    /**
     * description: (0x0102 SVTStatus  0x00 Request )
            This operation signals status
     *   information to IHU for the SVT service. Also informs the IHU and VCM that/if
     *   GNSS positions are needed by TEM
     */
    /// This is the method that will be called on remote calls on the method SVTStatusRequest.
    virtual void SVTStatusRequest(const std::shared_ptr<CommonAPI::ClientId> _client, SVTStatusRequestReply_t _reply) = 0;
    /**
     * description: (0x0103 TNStatus  0x00 Request )
            This operation signals status
     *   information to IHU for the TN service
     */
    /// This is the method that will be called on remote calls on the method TNStatusRequest.
    virtual void TNStatusRequest(const std::shared_ptr<CommonAPI::ClientId> _client, TNStatusRequestReply_t _reply) = 0;
    /**
     * description: (0x113 SoHPackageUploaded)
            This notification is sent out when received
     *   SoHPackageUploaded(0x113) from VCM
     */
    /// Sends a broadcast event for SoHPackageUploadedNotification.
    virtual void fireSoHPackageUploadedNotificationEvent(const std::string &_packetId, const ::v0::org::volvo::connectivity::IpCommandBusTypes::GenericOkStatus &_result) = 0;
    /**
     * description: (0x0107 SubscriptionActivation 0x05 Notification)
            This notification is
     *   sent out when activationStatus changed
     */
    /// Sends a broadcast event for SubscriptionActivationNotification.
    virtual void fireSubscriptionActivationNotificationEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_ActivationStatus &_status) = 0;
    /**
     * description: (0x010A RescueStatus 0x05 Notification)
            This notification is sent out
     *   when Signals status changed
     */
    /// Sends a broadcast event for RescueStatusNotification.
    virtual void fireRescueStatusNotificationEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_RescueStatus &_raStatus, const ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_RescueStatus &_eaStatus, const ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_RescueStatus &_sdnStatus, const ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_VoiceStatus &_voiceStatus, const ::v0::org::volvo::connectivity::IpCommandBusTypes::SourceStatus &_voiceSource, const ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_MessageStatus &_messageStatus, const ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_ButtonStatus &_buttonStatus, const ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_PSAPStatus &_psapConfirmStatus, const ::v0::org::volvo::connectivity::IpCommandBusTypes::GenericOkStatus &_backupAudioStatus) = 0;
    /**
     * description: (0x0102 SVTStatus  0x05 Notification )
            this notification is sent out
     *   when the status information is changed
     */
    /// Sends a broadcast event for SVTStatusNotification.
    virtual void fireSVTStatusNotificationEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::SecurityStatus &_svtStatus) = 0;
    /**
     * description: (0x0103 TNStatus  0x05 Notification )
            this notification is sent out
     *   when the status information is changed
     */
    /// Sends a broadcast event for TNStatusNotification.
    virtual void fireTNStatusNotificationEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::SecurityStatus &_tnStatus) = 0;

    using CommonAPI::Stub<TelematicsStubAdapter, TelematicsStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<TelematicsStubAdapter, TelematicsStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<TelematicsStubAdapter, TelematicsStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef TelematicsStubRemoteEvent RemoteEventType;
    typedef Telematics StubInterface;
};

} // namespace connectivity
} // namespace volvo
} // namespace org
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVO_CONNECTIVITY_Telematics_STUB_HPP_
