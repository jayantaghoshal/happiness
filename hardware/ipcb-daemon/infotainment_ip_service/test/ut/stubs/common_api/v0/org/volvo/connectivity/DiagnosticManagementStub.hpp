/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_ORG_VOLVO_CONNECTIVITY_Diagnostic_Management_STUB_HPP_
#define V0_ORG_VOLVO_CONNECTIVITY_Diagnostic_Management_STUB_HPP_

#include <functional>



#include <v0/org/volvo/connectivity/IpCommandBusTypes.hpp>

#include <v0/org/volvo/connectivity/DiagnosticManagement.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace volvo {
namespace connectivity {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service DiagnosticManagement. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class DiagnosticManagementStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual DiagnosticManagement {
 public:
    ///Notifies all remote listeners about a change of value of the attribute RemoteDiagnosticLink.
    virtual void fireRemoteDiagnosticLinkAttributeChanged(const bool& RemoteDiagnosticLink) = 0;
    ///Notifies all remote listeners about a change of value of the attribute RemoteDiagnosticInfo.
    virtual void fireRemoteDiagnosticInfoAttributeChanged(const ::v0::org::volvo::connectivity::IpCommandBusTypes::DiagMgm_RemoteDiagInfo& RemoteDiagnosticInfo) = 0;
    ///Notifies all remote listeners about a change of value of the attribute CurrentJ2534Session.
    virtual void fireCurrentJ2534SessionAttributeChanged(const bool& CurrentJ2534Session) = 0;
    ///Notifies all remote listeners about a change of value of the attribute CurrentDoIPState.
    virtual void fireCurrentDoIPStateAttributeChanged(const ::v0::org::volvo::connectivity::IpCommandBusTypes::DiagMgm_DoIPState& CurrentDoIPState) = 0;
    ///Notifies all remote listeners about a change of value of the attribute OpCurrentDoIPConnection.
    virtual void fireOpCurrentDoIPConnectionAttributeChanged(const ::v0::org::volvo::connectivity::IpCommandBusTypes::DiagMgm_CurrentDoIPConn& OpCurrentDoIPConnection) = 0;



    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for DiagnosticManagement.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class DiagnosticManagementStubRemoteEvent
{
public:
    virtual ~DiagnosticManagementStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service DiagnosticManagement to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class DiagnosticManagementStub
    : public virtual CommonAPI::Stub<DiagnosticManagementStubAdapter, DiagnosticManagementStubRemoteEvent>
{
public:
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error)>TextFromUserToOperatorReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error)>RequestRemoteDiagnosticsReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error)>AbortRemoteDiagnosticsReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error)>UpdateDaCModeReply_t;

    virtual ~DiagnosticManagementStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;

    /**
     * description: -- OperationID: RemoteDiagnosticLink (0x0A01)
         available (True)/ not
     *   available(False)
     */
    /// Provides getter access to the attribute RemoteDiagnosticLink
    virtual const bool &getRemoteDiagnosticLinkAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: -- OperationID: RemoteDiagnosticInfo (0x0A02)
     */
    /// Provides getter access to the attribute RemoteDiagnosticInfo
    virtual const ::v0::org::volvo::connectivity::IpCommandBusTypes::DiagMgm_RemoteDiagInfo &getRemoteDiagnosticInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: -- OperationID: CurrentJ2534Session (0x0A05)
            False, J2534 session
     *   inactive, True J2534 session active
     */
    /// Provides getter access to the attribute CurrentJ2534Session
    virtual const bool &getCurrentJ2534SessionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: -- OperationID: CurrentDoIPState (0x0A06)
     */
    /// Provides getter access to the attribute CurrentDoIPState
    virtual const ::v0::org::volvo::connectivity::IpCommandBusTypes::DiagMgm_DoIPState &getCurrentDoIPStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: -- OperationID: CurrentDoIPConnection (0x0A07)
     */
    /// Provides getter access to the attribute OpCurrentDoIPConnection
    virtual const ::v0::org::volvo::connectivity::IpCommandBusTypes::DiagMgm_CurrentDoIPConn &getOpCurrentDoIPConnectionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    /**
     * description: -- OperationID: TextFromUserToOperator (0x0A03)
     */
    /// This is the method that will be called on remote calls on the method TextFromUserToOperator.
    virtual void TextFromUserToOperator(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _messageId, std::string _textChatMessage, TextFromUserToOperatorReply_t _reply) = 0;
    /**
     * description: -- OperationID: RequestRemoteDiagnostics (0x0A09)
     */
    /// This is the method that will be called on remote calls on the method RequestRemoteDiagnostics.
    virtual void RequestRemoteDiagnostics(const std::shared_ptr<CommonAPI::ClientId> _client, bool _request, RequestRemoteDiagnosticsReply_t _reply) = 0;
    /**
     * description: -- OperationID: AbortRemoteDiagnostics (0x0A0A)
     */
    /// This is the method that will be called on remote calls on the method AbortRemoteDiagnostics.
    virtual void AbortRemoteDiagnostics(const std::shared_ptr<CommonAPI::ClientId> _client, bool _request, AbortRemoteDiagnosticsReply_t _reply) = 0;
    /**
     * description: -- OperationID: UpdateDaCMode (0x0A0B)
     */
    /// This is the method that will be called on remote calls on the method UpdateDaCMode.
    virtual void UpdateDaCMode(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::org::volvo::connectivity::IpCommandBusTypes::DiagMgm_UpdateDacMode _updateDaCMode, UpdateDaCModeReply_t _reply) = 0;

    using CommonAPI::Stub<DiagnosticManagementStubAdapter, DiagnosticManagementStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<DiagnosticManagementStubAdapter, DiagnosticManagementStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<DiagnosticManagementStubAdapter, DiagnosticManagementStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef DiagnosticManagementStubRemoteEvent RemoteEventType;
    typedef DiagnosticManagement StubInterface;
};

} // namespace connectivity
} // namespace volvo
} // namespace org
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVO_CONNECTIVITY_Diagnostic_Management_STUB_HPP_
