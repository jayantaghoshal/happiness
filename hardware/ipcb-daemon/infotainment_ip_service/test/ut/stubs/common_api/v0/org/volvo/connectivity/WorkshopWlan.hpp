/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_ORG_VOLVO_CONNECTIVITY_WORKSHOP_WLAN_HPP_
#define V0_ORG_VOLVO_CONNECTIVITY_WORKSHOP_WLAN_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace volvo {
namespace connectivity {

class WorkshopWlan {
public:
    virtual ~WorkshopWlan() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    
    struct WorkshopWlanConnectionResult : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            CONNECTED = 0,
            FAILED_NO_APS = 1,
            FAILED_AUTHENTICATION = 2,
            FAILED_TIMEOUT = 3,
            FAILED_GENERAL = 4
        };
        
        WorkshopWlanConnectionResult() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::CONNECTED)) {}
        WorkshopWlanConnectionResult(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::CONNECTED):
                case static_cast<int32_t>(Literal::FAILED_NO_APS):
                case static_cast<int32_t>(Literal::FAILED_AUTHENTICATION):
                case static_cast<int32_t>(Literal::FAILED_TIMEOUT):
                case static_cast<int32_t>(Literal::FAILED_GENERAL):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const WorkshopWlanConnectionResult &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const WorkshopWlanConnectionResult &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const WorkshopWlanConnectionResult &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const WorkshopWlanConnectionResult &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const WorkshopWlanConnectionResult &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const WorkshopWlanConnectionResult &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct DaCMode : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            MANUAL = 0,
            SEMI_AUTOMATIC = 1,
            AUTOMATIC = 2
        };
        
        DaCMode() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::MANUAL)) {}
        DaCMode(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::MANUAL):
                case static_cast<int32_t>(Literal::SEMI_AUTOMATIC):
                case static_cast<int32_t>(Literal::AUTOMATIC):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DaCMode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DaCMode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DaCMode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DaCMode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DaCMode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DaCMode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
};

const char* WorkshopWlan::getInterface() {
    return ("org.volvo.connectivity.WorkshopWlan");
}

CommonAPI::Version WorkshopWlan::getInterfaceVersion() {
    return CommonAPI::Version(0, 1);
}


} // namespace connectivity
} // namespace volvo
} // namespace org
} // namespace v0

namespace CommonAPI {
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVO_CONNECTIVITY_WORKSHOP_WLAN_HPP_
