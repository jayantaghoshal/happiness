/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_ORG_VOLVOCARS_PRIVACYPOLICY_RVDC_HPP_
#define V0_ORG_VOLVOCARS_PRIVACYPOLICY_RVDC_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace volvocars {
namespace privacypolicy {

class Rvdc {
public:
    virtual ~Rvdc() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    struct ApprovalStatusStruct : CommonAPI::Struct<std::string, bool, uint16_t> {
    	
    	ApprovalStatusStruct() {
    		std::get<1>(values_) = false;
    	}
    	ApprovalStatusStruct(const std::string &_typeName, const bool &_status, const uint16_t &_tcVersion)
    	{
    		std::get<0>(values_) = _typeName;
    		std::get<1>(values_) = _status;
    		std::get<2>(values_) = _tcVersion;
    	}
    	inline const std::string &getTypeName() const { return std::get<0>(values_); }
    	inline void setTypeName(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const bool &getStatus() const { return std::get<1>(values_); }
    	inline void setStatus(const bool _value) { std::get<1>(values_) = _value; }
    	inline const uint16_t &getTcVersion() const { return std::get<2>(values_); }
    	inline void setTcVersion(const uint16_t &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const ApprovalStatusStruct& _other) const {
                return (getTypeName() == _other.getTypeName() && getStatus() == _other.getStatus() && getTcVersion() == _other.getTcVersion());
        }
    	inline bool operator!=(const ApprovalStatusStruct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::vector<Rvdc::ApprovalStatusStruct> ApprovalStatuses;
};

const char* Rvdc::getInterface() {
    return ("org.volvocars.privacypolicy.Rvdc");
}

CommonAPI::Version Rvdc::getInterfaceVersion() {
    return CommonAPI::Version(0, 1);
}


} // namespace privacypolicy
} // namespace volvocars
} // namespace org
} // namespace v0

namespace CommonAPI {
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVOCARS_PRIVACYPOLICY_RVDC_HPP_
