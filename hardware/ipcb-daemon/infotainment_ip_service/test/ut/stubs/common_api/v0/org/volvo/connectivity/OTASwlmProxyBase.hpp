/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This is the FB OTA Software Loading Manager interface on IP Command Bus
 */
#ifndef V0_ORG_VOLVO_CONNECTIVITY_OTA_Swlm_PROXY_BASE_HPP_
#define V0_ORG_VOLVO_CONNECTIVITY_OTA_Swlm_PROXY_BASE_HPP_

#include <v0/org/volvo/connectivity/OTASwlm.hpp>


#include <v0/org/volvo/connectivity/OTATypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace volvo {
namespace connectivity {

class OTASwlmProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        ::v0::org::volvo::connectivity::OTATypes::InstallStatus, ::v0::org::volvo::connectivity::OTATypes::InstallProgress, std::vector<::v0::org::volvo::connectivity::OTATypes::InstalledData>
    > DeviceInstallNotificationEvent;
    typedef CommonAPI::Event<
        bool
    > LocalStorageNotificationEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::org::volvo::connectivity::OTATypes::InstallStatus&, const ::v0::org::volvo::connectivity::OTATypes::InstallProgress&, const std::vector<::v0::org::volvo::connectivity::OTATypes::InstalledData>&)> DeviceInstallSetRequestAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::org::volvo::connectivity::OTATypes::InstallStatus&, const ::v0::org::volvo::connectivity::OTATypes::InstallProgress&, const std::vector<::v0::org::volvo::connectivity::OTATypes::InstalledData>&)> DeviceInstallRequestAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const bool&)> LocalStorageRequestAsyncCallback;


    virtual DeviceInstallNotificationEvent& getDeviceInstallNotificationEvent() = 0;
    virtual LocalStorageNotificationEvent& getLocalStorageNotificationEvent() = 0;

    /**
     * description: (0x0B04 DeviceInstall)
            This operation is used when VCM requests
     *   installers on IHU and/or TEM to start install software.
            When to send
     *   this signal is further described in SRD Infotainment Platform.
     */
    virtual void DeviceInstallSetRequest(const ::v0::org::volvo::connectivity::OTATypes::InstallCommand &_installCommand, const std::vector<::v0::org::volvo::connectivity::OTATypes::InstallationData> &_installList, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::OTATypes::InstallStatus &_status, ::v0::org::volvo::connectivity::OTATypes::InstallProgress &_installProgress, std::vector<::v0::org::volvo::connectivity::OTATypes::InstalledData> &_installedList, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> DeviceInstallSetRequestAsync(const ::v0::org::volvo::connectivity::OTATypes::InstallCommand &_installCommand, const std::vector<::v0::org::volvo::connectivity::OTATypes::InstallationData> &_installList, DeviceInstallSetRequestAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void DeviceInstallRequest(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::OTATypes::InstallStatus &_status, ::v0::org::volvo::connectivity::OTATypes::InstallProgress &_installProgress, std::vector<::v0::org::volvo::connectivity::OTATypes::InstalledData> &_installedList, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> DeviceInstallRequestAsync(DeviceInstallRequestAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: (0x0B06 LocalStorage-Request)
            This operation is used by IHU to
     *   distribute if the Local Storage area can be accessed.
     */
    virtual void LocalStorageRequest(CommonAPI::CallStatus &_internalCallStatus, bool &_available, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> LocalStorageRequestAsync(LocalStorageRequestAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace connectivity
} // namespace volvo
} // namespace org
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVO_CONNECTIVITY_OTA_Swlm_PROXY_BASE_HPP_
