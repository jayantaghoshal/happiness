/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: WORK IN PROGRESS - SEEN AS TEMPLATE ONLY
 */
#ifndef V0_ORG_VOLVO_CONNECTIVITY_IP_LM_SERVICE_HPP_
#define V0_ORG_VOLVO_CONNECTIVITY_IP_LM_SERVICE_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace volvo {
namespace connectivity {

class IpLmService {
public:
    virtual ~IpLmService() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    
    struct ResourceGroup : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kResourceGroup1 = 0,
            kResourceGroup2 = 1,
            kResourceGroup3 = 2,
            kResourceGroup4 = 3,
            kResourceGroup5 = 4,
            kResourceGroup6 = 5,
            kResourceGroup7 = 6,
            kResourceGroup8 = 7
        };
        
        ResourceGroup() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kResourceGroup1)) {}
        ResourceGroup(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kResourceGroup1):
                case static_cast<int32_t>(Literal::kResourceGroup2):
                case static_cast<int32_t>(Literal::kResourceGroup3):
                case static_cast<int32_t>(Literal::kResourceGroup4):
                case static_cast<int32_t>(Literal::kResourceGroup5):
                case static_cast<int32_t>(Literal::kResourceGroup6):
                case static_cast<int32_t>(Literal::kResourceGroup7):
                case static_cast<int32_t>(Literal::kResourceGroup8):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ResourceGroup &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ResourceGroup &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ResourceGroup &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ResourceGroup &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ResourceGroup &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ResourceGroup &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ResourcePrio : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kPrioNormal = 0,
            kPrioHigh = 1
        };
        
        ResourcePrio() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kPrioNormal)) {}
        ResourcePrio(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kPrioNormal):
                case static_cast<int32_t>(Literal::kPrioHigh):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ResourcePrio &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ResourcePrio &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ResourcePrio &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ResourcePrio &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ResourcePrio &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ResourcePrio &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ResourceGroupStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            kResourceGroupStatus_Unavailable = 0,
            kResourceGroupStatus_PartlyAvailable = 1,
            kResourceGroupStatus_Available = 2
        };
        
        ResourceGroupStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::kResourceGroupStatus_Unavailable)) {}
        ResourceGroupStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::kResourceGroupStatus_Unavailable):
                case static_cast<int32_t>(Literal::kResourceGroupStatus_PartlyAvailable):
                case static_cast<int32_t>(Literal::kResourceGroupStatus_Available):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ResourceGroupStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ResourceGroupStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ResourceGroupStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ResourceGroupStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ResourceGroupStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ResourceGroupStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
};

const char* IpLmService::getInterface() {
    return ("org.volvo.connectivity.IpLmService");
}

CommonAPI::Version IpLmService::getInterfaceVersion() {
    return CommonAPI::Version(0, 1);
}


} // namespace connectivity
} // namespace volvo
} // namespace org
} // namespace v0

namespace CommonAPI {
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVO_CONNECTIVITY_IP_LM_SERVICE_HPP_
