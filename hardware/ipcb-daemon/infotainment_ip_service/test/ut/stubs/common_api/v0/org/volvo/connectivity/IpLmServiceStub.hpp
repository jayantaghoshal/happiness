/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: WORK IN PROGRESS - SEEN AS TEMPLATE ONLY
 */
#ifndef V0_ORG_VOLVO_CONNECTIVITY_Ip_Lm_Service_STUB_HPP_
#define V0_ORG_VOLVO_CONNECTIVITY_Ip_Lm_Service_STUB_HPP_

#include <functional>

#include <v0/org/volvo/connectivity/IpLmService.hpp>
#include <v0/org/volvo/connectivity/IpCommandBusTypes.hpp>

#if !defined(COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <unordered_set>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0
{
namespace org
{
namespace volvo
{
namespace connectivity
{
/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service IpLmService. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class IpLmServiceStubAdapter : public virtual CommonAPI::StubAdapter, public virtual IpLmService
{
   public:
    /**
     * Sends a broadcast event for RgStatus. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireRgStatusEvent(
        const ::v0::org::volvo::connectivity::IpLmService::ResourceGroup &_rg,
        const ::v0::org::volvo::connectivity::IpLmService::ResourceGroupStatus &_rgStatus) = 0;
    /**
     * Sends a broadcast event for NodeStatus. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireNodeStatusEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Ecu &_ecu,
                                     const bool &_ecuStatus) = 0;

    virtual void deactivateManagedInstances() = 0;

   protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for IpLmService.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class IpLmServiceStubRemoteEvent
{
   public:
    virtual ~IpLmServiceStubRemoteEvent() {}
};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service IpLmService to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class IpLmServiceStub : public virtual CommonAPI::Stub<IpLmServiceStubAdapter, IpLmServiceStubRemoteEvent>
{
   public:
    typedef std::function<void()> RequestReply_t;
    typedef std::function<void()> ReleaseReply_t;
    typedef std::function<void()> RegisterServiceReply_t;
    typedef std::function<void()> UnRegisterServiceReply_t;

    virtual ~IpLmServiceStub() {}
    virtual const CommonAPI::Version &getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;

    /**
     * description: Request the given Resource Group
     */
    /// This is the method that will be called on remote calls on the method Request.
    virtual void Request(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _serviceName,
                         IpLmService::ResourceGroup _rg, IpLmService::ResourcePrio _prio, RequestReply_t _reply) = 0;
    /**
     * description: Release the given Resource Group
     */
    /// This is the method that will be called on remote calls on the method Release.
    virtual void Release(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _serviceName,
                         IpLmService::ResourceGroup _rg, ReleaseReply_t _reply) = 0;
    /**
     * description: Register Local Software Component with Link Manager
     */
    /// This is the method that will be called on remote calls on the method RegisterService.
    virtual void RegisterService(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _serviceName,
                                 RegisterServiceReply_t _reply) = 0;
    /**
     * description: Unregister Local Software Component with Link Manager
     */
    /// This is the method that will be called on remote calls on the method UnRegisterService.
    virtual void UnRegisterService(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _serviceName,
                                   UnRegisterServiceReply_t _reply) = 0;
    /// Sends a broadcast event for RgStatus.
    virtual void fireRgStatusEvent(
        const ::v0::org::volvo::connectivity::IpLmService::ResourceGroup &_rg,
        const ::v0::org::volvo::connectivity::IpLmService::ResourceGroupStatus &_rgStatus) = 0;
    /// Sends a broadcast event for individual ECUs, true == Available, false == Unavailable.
    virtual void fireNodeStatusEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Ecu &_ecu,
                                     const bool &_ecuStatus) = 0;

    using CommonAPI::Stub<IpLmServiceStubAdapter, IpLmServiceStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<IpLmServiceStubAdapter, IpLmServiceStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<IpLmServiceStubAdapter, IpLmServiceStubRemoteEvent>::RemoteEventHandlerType
        RemoteEventHandlerType;
    typedef IpLmServiceStubRemoteEvent RemoteEventType;
    typedef IpLmService StubInterface;
};

}  // namespace connectivity
}  // namespace volvo
}  // namespace org
}  // namespace v0

// Compatibility
namespace v0_1 = v0;

#endif  // V0_ORG_VOLVO_CONNECTIVITY_Ip_Lm_Service_STUB_HPP_
