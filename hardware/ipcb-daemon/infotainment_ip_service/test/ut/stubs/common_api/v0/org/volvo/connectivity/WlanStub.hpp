/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This is the WLAN interface on IP Command Bus
 */
#ifndef V0_ORG_VOLVO_CONNECTIVITY_Wlan_STUB_HPP_
#define V0_ORG_VOLVO_CONNECTIVITY_Wlan_STUB_HPP_

#include <functional>



#include <v0/org/volvo/connectivity/IpCommandBusTypes.hpp>

#include <v0/org/volvo/connectivity/Wlan.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <unordered_set>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace volvo {
namespace connectivity {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service Wlan. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class WlanStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual Wlan {
 public:
    ///Notifies all remote listeners about a change of value of the attribute wlanChannelFreqInfo.
    virtual void fireWlanChannelFreqInfoAttributeChanged(const ::v0::org::volvo::connectivity::Wlan::WlanChannelFreqInfo& wlanChannelFreqInfo) = 0;

    /**
     * Sends a broadcast event for WlanStaStatusNotification. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireWlanStaStatusNotificationEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanConnectStatus &_outWlanConnectionStatus, const std::vector<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_AvailableNetworkInformation> &_outAvailableNetworkInfoList) = 0;
    /**
     * Sends a broadcast event for WlanModeNotification. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireWlanModeNotificationEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanMode &_wlanMode) = 0;
    /**
     * Sends a broadcast event for WlanStaConnectNotification. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireWlanStaConnectNotificationEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Ssid &_outCurrentSsid, const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanConnectStatus &_outCurrentWlanConnectStatus) = 0;


    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for Wlan.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class WlanStubRemoteEvent
{
public:
    virtual ~WlanStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service Wlan to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class WlanStub
    : public virtual CommonAPI::Stub<WlanStubAdapter, WlanStubRemoteEvent>
{
public:
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanMode _outCurrentStaWlanMode, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanConnectStatus _outCurrentConnectionStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Ssid _currentUsedSsid, std::vector<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_AvailableNetworkInformation> _outAvailableNetworkInfoList)>WlanStaStatusReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanMode _outWlanMode)>WlanModeRequestReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanMode _outWlanMode)>WlanModeSetRequestReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanConnectStatus _outCurrentWlanConnectStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Ssid _outCurrentSsid)>WlanStaConnectSetRequestReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanConnectStatus _outCurrentWlanDisconnectStatus)>WlanStaDisconnectRequestReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, std::vector<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Ssid> _outWlanRememberedNetworksSsidList)>WlanStaRememberedNetwksRequestReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Ssid _outForgottenSsid)>WlanStaForgetRememberedNetwkSetRequestReply_t;

    virtual ~WlanStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;

    /**
     * description: (0x0402 WLANChannelFreqInfo)
     */
    /// Provides getter access to the attribute wlanChannelFreqInfo
    virtual const ::v0::org::volvo::connectivity::Wlan::WlanChannelFreqInfo &getWlanChannelFreqInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    /**
     * description: (0x040D WLANSTAStatus.Request)
     */
    /// This is the method that will be called on remote calls on the method WlanStaStatus.
    virtual void WlanStaStatus(const std::shared_ptr<CommonAPI::ClientId> _client, WlanStaStatusReply_t _reply) = 0;
    /**
     * description: (0x0400 WLANMode.Request)
        Request for the current WLAN mode.
     */
    /// This is the method that will be called on remote calls on the method WlanModeRequest.
    virtual void WlanModeRequest(const std::shared_ptr<CommonAPI::ClientId> _client, WlanModeRequestReply_t _reply) = 0;
    /**
     * description: (0x0400 WLANMode.SetRequest)
        Requests to set a new WLAN mode, and confirms
     *   the success of this action with a response containing the mode.
     */
    /// This is the method that will be called on remote calls on the method WlanModeSetRequest.
    virtual void WlanModeSetRequest(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanMode _inWlanMode, WlanModeSetRequestReply_t _reply) = 0;
    /**
     * description: (0x0408 WLANSTAConnect.SetRequest) 
            Connect to a WiFi network.
     */
    /// This is the method that will be called on remote calls on the method WlanStaConnectSetRequest.
    virtual void WlanStaConnectSetRequest(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Ssid _inSsid, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanExternalPassword _inWlanPassword, WlanStaConnectSetRequestReply_t _reply) = 0;
    /**
     * description: (0x0409 WLANSTADisconnect.OpGeneric-Request) 
            The client requests VCM
     *   (Wi-Fi STA) to disconnect from the currently connected external AP.
     */
    /// This is the method that will be called on remote calls on the method WlanStaDisconnectRequest.
    virtual void WlanStaDisconnectRequest(const std::shared_ptr<CommonAPI::ClientId> _client, WlanStaDisconnectRequestReply_t _reply) = 0;
    /**
     * description: (0x040E WLANSTARememberedNetwks.OpGeneric-Request) 
            When Wi-Fi STA gets
     *   successfully connected to an external network for the first time, 
            the
     *   external network automatically becomes a remembered network. 
            VCM
     *   (Wi-Fi STA) shall provide the remembered network list to IHU HMI on request. 
    
     *          Remembered network list is ordered by most recent remembered network on
     *   the top and so on. 
            The list at maximum can contain 50 networks. 
        
     *      The oldest remembered network will be dropped to accommodate the latest
     *   remembered network if the maximum number has already reached.
     */
    /// This is the method that will be called on remote calls on the method WlanStaRememberedNetwksRequest.
    virtual void WlanStaRememberedNetwksRequest(const std::shared_ptr<CommonAPI::ClientId> _client, WlanStaRememberedNetwksRequestReply_t _reply) = 0;
    /**
     * description: (0x040F WLANSTAForgetRememberedNetwk.SetRequest) 
            This operation is
     *   used when user request VCM (Wi-Fi) to forget a remembered network. 
           
     *   VCM (Wi-Fi) forgets the network by deleting login information and removing it
     *   from the remembered networks list. 
            The information will be shown in
     *   HMI.  
            There are two scenarios related to this operation:
            - If
     *   the network is an available network in network list, it will still be
     *   displayed as available.
            - If user wishes to forget a remembered
     *   network to which the Wi-Fi STA is currently connected, Wi-Fi STA will be
     *   disconnected as well.
     */
    /// This is the method that will be called on remote calls on the method WlanStaForgetRememberedNetwkSetRequest.
    virtual void WlanStaForgetRememberedNetwkSetRequest(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Ssid _inSsidToForget, WlanStaForgetRememberedNetwkSetRequestReply_t _reply) = 0;
    /**
     * description: (0x040D WLANSTAStatus.Notification)
     */
    /// Sends a broadcast event for WlanStaStatusNotification.
    virtual void fireWlanStaStatusNotificationEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanConnectStatus &_outWlanConnectionStatus, const std::vector<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_AvailableNetworkInformation> &_outAvailableNetworkInfoList) = 0;
    /**
     * description: (0x0400 WLANMode.Notification) 
        Event based notification of current WLAN
     *   mode.
     */
    /// Sends a broadcast event for WlanModeNotification.
    virtual void fireWlanModeNotificationEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanMode &_wlanMode) = 0;
    /**
     * description: (0x0409 WLANSTAConnect.Notification) 
        Event based notification of WLAN STA
     *   connect notifications.
     */
    /// Sends a broadcast event for WlanStaConnectNotification.
    virtual void fireWlanStaConnectNotificationEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Ssid &_outCurrentSsid, const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanConnectStatus &_outCurrentWlanConnectStatus) = 0;

    using CommonAPI::Stub<WlanStubAdapter, WlanStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<WlanStubAdapter, WlanStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<WlanStubAdapter, WlanStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef WlanStubRemoteEvent RemoteEventType;
    typedef Wlan StubInterface;
};

} // namespace connectivity
} // namespace volvo
} // namespace org
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVO_CONNECTIVITY_Wlan_STUB_HPP_
