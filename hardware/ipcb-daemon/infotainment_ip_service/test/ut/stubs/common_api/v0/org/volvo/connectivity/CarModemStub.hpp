/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This is the CarModem interface on IP Command Bus
 */
#ifndef V0_ORG_VOLVO_CONNECTIVITY_Car_Modem_STUB_HPP_
#define V0_ORG_VOLVO_CONNECTIVITY_Car_Modem_STUB_HPP_

#include <functional>



#include <v0/org/volvo/connectivity/IpCommandBusTypes.hpp>

#include <v0/org/volvo/connectivity/CarModem.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <unordered_set>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace volvo {
namespace connectivity {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service CarModem. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class CarModemStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual CarModem {
 public:
    ///Notifies all remote listeners about a change of value of the attribute CarModemCurrentApnConfiguration.
    virtual void fireCarModemCurrentApnConfigurationAttributeChanged(const ::v0::org::volvo::connectivity::CarModem::CarModem_ApnConfigurationStatus& CarModemCurrentApnConfiguration) = 0;

    /**
     * Sends a broadcast event for CarModemConnectionStatusNotification. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireCarModemConnectionStatusNotificationEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_ConnectionStatus &_outConnectionStatus) = 0;
    /**
     * Sends a broadcast event for CarModemNetworkRegistrationStatusNotification. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireCarModemNetworkRegistrationStatusNotificationEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_RegistrationStatus &_outRegistrationStatus) = 0;
    /**
     * Sends a broadcast event for CarModemPSIMStateNotification. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireCarModemPSIMStateNotificationEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMCardStatus &_outSIMCardStatus) = 0;
    /**
     * Sends a broadcast event for CarModemSignalStrengthChangedNotification. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireCarModemSignalStrengthChangedNotificationEvent(const uint8_t &_outSignalStrength) = 0;
    /**
     * Sends a broadcast event for CarModemUssdNotification. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireCarModemUssdNotificationEvent(const ::v0::org::volvo::connectivity::CarModem::CarModem_UssdStatus &_ussdStatus, const std::string &_ussdReturnCode) = 0;
    /**
     * Sends a broadcast event for CarModemNetworkSelectionNotification. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireCarModemNetworkSelectionNotificationEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_OperatorSelection &_status, const ::v0::org::volvo::connectivity::IpCommandBusTypes::GenericOkStatus &_operatorSelectionResult) = 0;


    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for CarModem.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class CarModemStubRemoteEvent
{
public:
    virtual ~CarModemStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service CarModem to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class CarModemStub
    : public virtual CommonAPI::Stub<CarModemStubAdapter, CarModemStubRemoteEvent>
{
public:
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_ConnectionStatus _outConnectionStatus)>GetCarModemConnectionStatusReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_RegistrationStatus _outRegistrationStatus)>GetCarModemRegistrationStatusReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMCardStatus _outSIMCardStatus)>GetCarModemPSIMStatusReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMDataCounter _outSIMDataCounter)>GetCarModemPSIMDataCounterReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_ResetSIMDataCounter _outSIMDataCounter)>ResetCarModemPSIMDataCounterReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMSecuritySetting _outSIMSecuritySetting)>SetCarModemPSIMSecurityReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMSecuritySetting _outSIMSecuritySetting)>GetCarModemPSIMSecurityReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error)>EnterCarModemPSIMCodeReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, bool _roamingStatus)>GetCarModemRoamingConfigReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, bool _currentRoamingStatus)>SetCarModemRoamingConfigReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, bool _menuVisibility)>GetCarModemChangePINMenuAvailabilityReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error)>RequestCarModemApnConfigurationReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, CarModem::CarModem_UssdStatus _ussdStatus, std::string _ussdReturnCode)>SendCarModemUssdRequestReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, std::vector<::v0::org::volvo::connectivity::IpCommandBusTypes::NetworkOperator> _outNetworkOperators)>RequestCarModemNetworkScanReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_OperatorSelection _outStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::GenericOkStatus _operatorSelectionResult)>SetCarModemNetworkSelectionReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_OperatorSelection _outStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::GenericOkStatus _operatorSelectionResult)>GetCarModemNetworkSelectionReply_t;

    virtual ~CarModemStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;

    /// Provides getter access to the attribute CarModemCurrentApnConfiguration
    virtual const ::v0::org::volvo::connectivity::CarModem::CarModem_ApnConfigurationStatus &getCarModemCurrentApnConfigurationAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    /**
     * description: Get the current CarModem Connection Status.  This method returns
     *   ConnectionStatus for PSIM and cellular technology in use
     */
    /// This is the method that will be called on remote calls on the method GetCarModemConnectionStatus.
    virtual void GetCarModemConnectionStatus(const std::shared_ptr<CommonAPI::ClientId> _client, GetCarModemConnectionStatusReply_t _reply) = 0;
    /**
     * description: Get the current Network registration status
     */
    /// This is the method that will be called on remote calls on the method GetCarModemRegistrationStatus.
    virtual void GetCarModemRegistrationStatus(const std::shared_ptr<CommonAPI::ClientId> _client, GetCarModemRegistrationStatusReply_t _reply) = 0;
    /**
     * description: Get current state of SIM card
     */
    /// This is the method that will be called on remote calls on the method GetCarModemPSIMStatus.
    virtual void GetCarModemPSIMStatus(const std::shared_ptr<CommonAPI::ClientId> _client, GetCarModemPSIMStatusReply_t _reply) = 0;
    /**
     * description: Get PSIM data counter
     */
    /// This is the method that will be called on remote calls on the method GetCarModemPSIMDataCounter.
    virtual void GetCarModemPSIMDataCounter(const std::shared_ptr<CommonAPI::ClientId> _client, GetCarModemPSIMDataCounterReply_t _reply) = 0;
    /**
     * description: Reset PSIM data counter
     */
    /// This is the method that will be called on remote calls on the method ResetCarModemPSIMDataCounter.
    virtual void ResetCarModemPSIMDataCounter(const std::shared_ptr<CommonAPI::ClientId> _client, ResetCarModemPSIMDataCounterReply_t _reply) = 0;
    /**
     * description: Set PSIM Security
     */
    /// This is the method that will be called on remote calls on the method SetCarModemPSIMSecurity.
    virtual void SetCarModemPSIMSecurity(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _pin, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMSecuritySetting _setting, SetCarModemPSIMSecurityReply_t _reply) = 0;
    /**
     * description: Get PSIM Security
     */
    /// This is the method that will be called on remote calls on the method GetCarModemPSIMSecurity.
    virtual void GetCarModemPSIMSecurity(const std::shared_ptr<CommonAPI::ClientId> _client, GetCarModemPSIMSecurityReply_t _reply) = 0;
    /**
     * description: PSIMEnterCode-SetRequest
     */
    /// This is the method that will be called on remote calls on the method EnterCarModemPSIMCode.
    virtual void EnterCarModemPSIMCode(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_PinPukCommand _command, EnterCarModemPSIMCodeReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method GetCarModemRoamingConfig.
    virtual void GetCarModemRoamingConfig(const std::shared_ptr<CommonAPI::ClientId> _client, GetCarModemRoamingConfigReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method SetCarModemRoamingConfig.
    virtual void SetCarModemRoamingConfig(const std::shared_ptr<CommonAPI::ClientId> _client, bool _roamingStatus, SetCarModemRoamingConfigReply_t _reply) = 0;
    /**
     * description: Get whether the change PIN menu should be available
     */
    /// This is the method that will be called on remote calls on the method GetCarModemChangePINMenuAvailability.
    virtual void GetCarModemChangePINMenuAvailability(const std::shared_ptr<CommonAPI::ClientId> _client, GetCarModemChangePINMenuAvailabilityReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method RequestCarModemApnConfiguration.
    virtual void RequestCarModemApnConfiguration(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_ApnConfiguration _requestedApnConfiguration, RequestCarModemApnConfigurationReply_t _reply) = 0;
    /**
     * description: Send USSD (Unstructured Supplementary Service Data) to network
     */
    /// This is the method that will be called on remote calls on the method SendCarModemUssdRequest.
    virtual void SendCarModemUssdRequest(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _ussdCode, std::string _languageCode, SendCarModemUssdRequestReply_t _reply) = 0;
    /**
     * description: Request NetworkOperators scanning
     */
    /// This is the method that will be called on remote calls on the method RequestCarModemNetworkScan.
    virtual void RequestCarModemNetworkScan(const std::shared_ptr<CommonAPI::ClientId> _client, RequestCarModemNetworkScanReply_t _reply) = 0;
    /**
     * description: PSIMNetworkOperatorCommand-SetRequest
     */
    /// This is the method that will be called on remote calls on the method SetCarModemNetworkSelection.
    virtual void SetCarModemNetworkSelection(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_OperatorSelection _inOperator, SetCarModemNetworkSelectionReply_t _reply) = 0;
    /**
     * description: PSIMNetworkOperatorCommand-Request
     */
    /// This is the method that will be called on remote calls on the method GetCarModemNetworkSelection.
    virtual void GetCarModemNetworkSelection(const std::shared_ptr<CommonAPI::ClientId> _client, GetCarModemNetworkSelectionReply_t _reply) = 0;
    /**
     * description: PSIM Connection Status notification
     */
    /// Sends a broadcast event for CarModemConnectionStatusNotification.
    virtual void fireCarModemConnectionStatusNotificationEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_ConnectionStatus &_outConnectionStatus) = 0;
    /**
     * description: CarModem Registration Status notification
     */
    /// Sends a broadcast event for CarModemNetworkRegistrationStatusNotification.
    virtual void fireCarModemNetworkRegistrationStatusNotificationEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_RegistrationStatus &_outRegistrationStatus) = 0;
    /// Sends a broadcast event for CarModemPSIMStateNotification.
    virtual void fireCarModemPSIMStateNotificationEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMCardStatus &_outSIMCardStatus) = 0;
    /// Sends a broadcast event for CarModemSignalStrengthChangedNotification.
    virtual void fireCarModemSignalStrengthChangedNotificationEvent(const uint8_t &_outSignalStrength) = 0;
    /**
     * description: Notification generated when USSD notification is received from Modem hosting Ecu
     */
    /// Sends a broadcast event for CarModemUssdNotification.
    virtual void fireCarModemUssdNotificationEvent(const ::v0::org::volvo::connectivity::CarModem::CarModem_UssdStatus &_ussdStatus, const std::string &_ussdReturnCode) = 0;
    /**
     * description: Notification generated when Network Operation Selection notification is
     *   received from Modem hosting Ecu
     */
    /// Sends a broadcast event for CarModemNetworkSelectionNotification.
    virtual void fireCarModemNetworkSelectionNotificationEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_OperatorSelection &_status, const ::v0::org::volvo::connectivity::IpCommandBusTypes::GenericOkStatus &_operatorSelectionResult) = 0;

    using CommonAPI::Stub<CarModemStubAdapter, CarModemStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<CarModemStubAdapter, CarModemStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<CarModemStubAdapter, CarModemStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef CarModemStubRemoteEvent RemoteEventType;
    typedef CarModem StubInterface;
};

} // namespace connectivity
} // namespace volvo
} // namespace org
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVO_CONNECTIVITY_Car_Modem_STUB_HPP_
