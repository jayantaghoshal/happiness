/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This is the CarModem interface on IP Command Bus
 */
#ifndef V0_ORG_VOLVO_CONNECTIVITY_Car_Modem_PROXY_HPP_
#define V0_ORG_VOLVO_CONNECTIVITY_Car_Modem_PROXY_HPP_

#include <v0/org/volvo/connectivity/CarModemProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace volvo {
namespace connectivity {

template <typename ... _AttributeExtensions>
class CarModemProxy
    : virtual public CarModem, 
      virtual public CarModemProxyBase,
      virtual public _AttributeExtensions... {
public:
    CarModemProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~CarModemProxy();

    typedef CarModem InterfaceType;


    /**
     * Returns the wrapper class that provides access to the attribute CarModemCurrentApnConfiguration.
     */
    virtual CarModemCurrentApnConfigurationAttribute& getCarModemCurrentApnConfigurationAttribute() {
        return delegate_->getCarModemCurrentApnConfigurationAttribute();
    }

    /**
     * description: PSIM Connection Status notification
     */
    /**
     * Returns the wrapper class that provides access to the broadcast CarModemConnectionStatusNotification.
     */
    virtual CarModemConnectionStatusNotificationEvent& getCarModemConnectionStatusNotificationEvent() {
        return delegate_->getCarModemConnectionStatusNotificationEvent();
    }
    /**
     * description: CarModem Registration Status notification
     */
    /**
     * Returns the wrapper class that provides access to the broadcast CarModemNetworkRegistrationStatusNotification.
     */
    virtual CarModemNetworkRegistrationStatusNotificationEvent& getCarModemNetworkRegistrationStatusNotificationEvent() {
        return delegate_->getCarModemNetworkRegistrationStatusNotificationEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast CarModemPSIMStateNotification.
     */
    virtual CarModemPSIMStateNotificationEvent& getCarModemPSIMStateNotificationEvent() {
        return delegate_->getCarModemPSIMStateNotificationEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast CarModemSignalStrengthChangedNotification.
     */
    virtual CarModemSignalStrengthChangedNotificationEvent& getCarModemSignalStrengthChangedNotificationEvent() {
        return delegate_->getCarModemSignalStrengthChangedNotificationEvent();
    }
    /**
     * description: Notification generated when USSD notification is received from Modem hosting Ecu
     */
    /**
     * Returns the wrapper class that provides access to the broadcast CarModemUssdNotification.
     */
    virtual CarModemUssdNotificationEvent& getCarModemUssdNotificationEvent() {
        return delegate_->getCarModemUssdNotificationEvent();
    }
    /**
     * description: Notification generated when Network Operation Selection notification is
     *   received from Modem hosting Ecu
     */
    /**
     * Returns the wrapper class that provides access to the broadcast CarModemNetworkSelectionNotification.
     */
    virtual CarModemNetworkSelectionNotificationEvent& getCarModemNetworkSelectionNotificationEvent() {
        return delegate_->getCarModemNetworkSelectionNotificationEvent();
    }

    /**
     * description: Get the current CarModem Connection Status.  This method returns
     *   ConnectionStatus for PSIM and cellular technology in use
     * Calls GetCarModemConnectionStatus with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetCarModemConnectionStatus(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_ConnectionStatus &_outConnectionStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetCarModemConnectionStatus with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetCarModemConnectionStatusAsync(GetCarModemConnectionStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Get the current Network registration status
     * Calls GetCarModemRegistrationStatus with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetCarModemRegistrationStatus(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_RegistrationStatus &_outRegistrationStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetCarModemRegistrationStatus with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetCarModemRegistrationStatusAsync(GetCarModemRegistrationStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Get current state of SIM card
     * Calls GetCarModemPSIMStatus with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetCarModemPSIMStatus(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMCardStatus &_outSIMCardStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetCarModemPSIMStatus with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetCarModemPSIMStatusAsync(GetCarModemPSIMStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Get PSIM data counter
     * Calls GetCarModemPSIMDataCounter with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetCarModemPSIMDataCounter(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMDataCounter &_outSIMDataCounter, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetCarModemPSIMDataCounter with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetCarModemPSIMDataCounterAsync(GetCarModemPSIMDataCounterAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Reset PSIM data counter
     * Calls ResetCarModemPSIMDataCounter with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void ResetCarModemPSIMDataCounter(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_ResetSIMDataCounter &_outSIMDataCounter, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls ResetCarModemPSIMDataCounter with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> ResetCarModemPSIMDataCounterAsync(ResetCarModemPSIMDataCounterAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Set PSIM Security
     * Calls SetCarModemPSIMSecurity with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void SetCarModemPSIMSecurity(const std::string &_pin, const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMSecuritySetting &_setting, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMSecuritySetting &_outSIMSecuritySetting, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SetCarModemPSIMSecurity with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> SetCarModemPSIMSecurityAsync(const std::string &_pin, const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMSecuritySetting &_setting, SetCarModemPSIMSecurityAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Get PSIM Security
     * Calls GetCarModemPSIMSecurity with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetCarModemPSIMSecurity(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMSecuritySetting &_outSIMSecuritySetting, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetCarModemPSIMSecurity with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetCarModemPSIMSecurityAsync(GetCarModemPSIMSecurityAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: PSIMEnterCode-SetRequest
     * Calls EnterCarModemPSIMCode with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void EnterCarModemPSIMCode(const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_PinPukCommand &_command, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls EnterCarModemPSIMCode with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> EnterCarModemPSIMCodeAsync(const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_PinPukCommand &_command, EnterCarModemPSIMCodeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetCarModemRoamingConfig with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetCarModemRoamingConfig(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, bool &_roamingStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetCarModemRoamingConfig with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetCarModemRoamingConfigAsync(GetCarModemRoamingConfigAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SetCarModemRoamingConfig with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void SetCarModemRoamingConfig(const bool &_roamingStatus, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, bool &_currentRoamingStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SetCarModemRoamingConfig with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> SetCarModemRoamingConfigAsync(const bool &_roamingStatus, SetCarModemRoamingConfigAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Get whether the change PIN menu should be available
     * Calls GetCarModemChangePINMenuAvailability with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetCarModemChangePINMenuAvailability(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, bool &_menuVisibility, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetCarModemChangePINMenuAvailability with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetCarModemChangePINMenuAvailabilityAsync(GetCarModemChangePINMenuAvailabilityAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls RequestCarModemApnConfiguration with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void RequestCarModemApnConfiguration(const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_ApnConfiguration &_requestedApnConfiguration, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls RequestCarModemApnConfiguration with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> RequestCarModemApnConfigurationAsync(const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_ApnConfiguration &_requestedApnConfiguration, RequestCarModemApnConfigurationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Send USSD (Unstructured Supplementary Service Data) to network
     * Calls SendCarModemUssdRequest with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void SendCarModemUssdRequest(const std::string &_ussdCode, const std::string &_languageCode, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, CarModem::CarModem_UssdStatus &_ussdStatus, std::string &_ussdReturnCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SendCarModemUssdRequest with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> SendCarModemUssdRequestAsync(const std::string &_ussdCode, const std::string &_languageCode, SendCarModemUssdRequestAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Request NetworkOperators scanning
     * Calls RequestCarModemNetworkScan with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void RequestCarModemNetworkScan(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, std::vector<::v0::org::volvo::connectivity::IpCommandBusTypes::NetworkOperator> &_outNetworkOperators, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls RequestCarModemNetworkScan with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> RequestCarModemNetworkScanAsync(RequestCarModemNetworkScanAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: PSIMNetworkOperatorCommand-SetRequest
     * Calls SetCarModemNetworkSelection with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void SetCarModemNetworkSelection(const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_OperatorSelection &_inOperator, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_OperatorSelection &_outStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::GenericOkStatus &_operatorSelectionResult, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SetCarModemNetworkSelection with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> SetCarModemNetworkSelectionAsync(const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_OperatorSelection &_inOperator, SetCarModemNetworkSelectionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: PSIMNetworkOperatorCommand-Request
     * Calls GetCarModemNetworkSelection with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetCarModemNetworkSelection(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_OperatorSelection &_outStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::GenericOkStatus &_operatorSelectionResult, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetCarModemNetworkSelection with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetCarModemNetworkSelectionAsync(GetCarModemNetworkSelectionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<CarModemProxyBase> delegate_;
};

typedef CarModemProxy<> CarModemProxyDefault;

namespace CarModemExtensions {
    template <template <typename > class _ExtensionType>
    class CarModemCurrentApnConfigurationAttributeExtension {
     public:
        typedef _ExtensionType<CarModemProxyBase::CarModemCurrentApnConfigurationAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<CarModemProxyBase::CarModemCurrentApnConfigurationAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CarModemCurrentApnConfigurationAttributeExtension() {}
    #endif
    
        CarModemCurrentApnConfigurationAttributeExtension(CarModemProxyBase& proxy): attributeExtension_(proxy.getCarModemCurrentApnConfigurationAttribute()) {
        }
    
        inline extension_type& getCarModemCurrentApnConfigurationAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace CarModemExtensions

//
// CarModemProxy Implementation
//
template <typename ... _AttributeExtensions>
CarModemProxy<_AttributeExtensions...>::CarModemProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<CarModemProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<CarModemProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
CarModemProxy<_AttributeExtensions...>::~CarModemProxy() {
}

/**
 * description: Get the current CarModem Connection Status.  This method returns
 *   ConnectionStatus for PSIM and cellular technology in use
 */
template <typename ... _AttributeExtensions>
void CarModemProxy<_AttributeExtensions...>::GetCarModemConnectionStatus(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_ConnectionStatus &_outConnectionStatus, const CommonAPI::CallInfo *_info) {
    delegate_->GetCarModemConnectionStatus(_internalCallStatus, _error, _outConnectionStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CarModemProxy<_AttributeExtensions...>::GetCarModemConnectionStatusAsync(GetCarModemConnectionStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetCarModemConnectionStatusAsync(_callback, _info);
}
/**
 * description: Get the current Network registration status
 */
template <typename ... _AttributeExtensions>
void CarModemProxy<_AttributeExtensions...>::GetCarModemRegistrationStatus(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_RegistrationStatus &_outRegistrationStatus, const CommonAPI::CallInfo *_info) {
    delegate_->GetCarModemRegistrationStatus(_internalCallStatus, _error, _outRegistrationStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CarModemProxy<_AttributeExtensions...>::GetCarModemRegistrationStatusAsync(GetCarModemRegistrationStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetCarModemRegistrationStatusAsync(_callback, _info);
}
/**
 * description: Get current state of SIM card
 */
template <typename ... _AttributeExtensions>
void CarModemProxy<_AttributeExtensions...>::GetCarModemPSIMStatus(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMCardStatus &_outSIMCardStatus, const CommonAPI::CallInfo *_info) {
    delegate_->GetCarModemPSIMStatus(_internalCallStatus, _error, _outSIMCardStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CarModemProxy<_AttributeExtensions...>::GetCarModemPSIMStatusAsync(GetCarModemPSIMStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetCarModemPSIMStatusAsync(_callback, _info);
}
/**
 * description: Get PSIM data counter
 */
template <typename ... _AttributeExtensions>
void CarModemProxy<_AttributeExtensions...>::GetCarModemPSIMDataCounter(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMDataCounter &_outSIMDataCounter, const CommonAPI::CallInfo *_info) {
    delegate_->GetCarModemPSIMDataCounter(_internalCallStatus, _error, _outSIMDataCounter, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CarModemProxy<_AttributeExtensions...>::GetCarModemPSIMDataCounterAsync(GetCarModemPSIMDataCounterAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetCarModemPSIMDataCounterAsync(_callback, _info);
}
/**
 * description: Reset PSIM data counter
 */
template <typename ... _AttributeExtensions>
void CarModemProxy<_AttributeExtensions...>::ResetCarModemPSIMDataCounter(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_ResetSIMDataCounter &_outSIMDataCounter, const CommonAPI::CallInfo *_info) {
    delegate_->ResetCarModemPSIMDataCounter(_internalCallStatus, _error, _outSIMDataCounter, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CarModemProxy<_AttributeExtensions...>::ResetCarModemPSIMDataCounterAsync(ResetCarModemPSIMDataCounterAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->ResetCarModemPSIMDataCounterAsync(_callback, _info);
}
/**
 * description: Set PSIM Security
 */
template <typename ... _AttributeExtensions>
void CarModemProxy<_AttributeExtensions...>::SetCarModemPSIMSecurity(const std::string &_pin, const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMSecuritySetting &_setting, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMSecuritySetting &_outSIMSecuritySetting, const CommonAPI::CallInfo *_info) {
    if (!_setting.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->SetCarModemPSIMSecurity(_pin, _setting, _internalCallStatus, _error, _outSIMSecuritySetting, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CarModemProxy<_AttributeExtensions...>::SetCarModemPSIMSecurityAsync(const std::string &_pin, const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMSecuritySetting &_setting, SetCarModemPSIMSecurityAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_setting.validate()) {
        ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors error;
        ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMSecuritySetting outSIMSecuritySetting = ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMSecuritySetting::kOn;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, error, outSIMSecuritySetting);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->SetCarModemPSIMSecurityAsync(_pin, _setting, _callback, _info);
}
/**
 * description: Get PSIM Security
 */
template <typename ... _AttributeExtensions>
void CarModemProxy<_AttributeExtensions...>::GetCarModemPSIMSecurity(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_SIMSecuritySetting &_outSIMSecuritySetting, const CommonAPI::CallInfo *_info) {
    delegate_->GetCarModemPSIMSecurity(_internalCallStatus, _error, _outSIMSecuritySetting, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CarModemProxy<_AttributeExtensions...>::GetCarModemPSIMSecurityAsync(GetCarModemPSIMSecurityAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetCarModemPSIMSecurityAsync(_callback, _info);
}
/**
 * description: PSIMEnterCode-SetRequest
 */
template <typename ... _AttributeExtensions>
void CarModemProxy<_AttributeExtensions...>::EnterCarModemPSIMCode(const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_PinPukCommand &_command, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, const CommonAPI::CallInfo *_info) {
    delegate_->EnterCarModemPSIMCode(_command, _internalCallStatus, _error, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CarModemProxy<_AttributeExtensions...>::EnterCarModemPSIMCodeAsync(const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_PinPukCommand &_command, EnterCarModemPSIMCodeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->EnterCarModemPSIMCodeAsync(_command, _callback, _info);
}
template <typename ... _AttributeExtensions>
void CarModemProxy<_AttributeExtensions...>::GetCarModemRoamingConfig(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, bool &_roamingStatus, const CommonAPI::CallInfo *_info) {
    delegate_->GetCarModemRoamingConfig(_internalCallStatus, _error, _roamingStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CarModemProxy<_AttributeExtensions...>::GetCarModemRoamingConfigAsync(GetCarModemRoamingConfigAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetCarModemRoamingConfigAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void CarModemProxy<_AttributeExtensions...>::SetCarModemRoamingConfig(const bool &_roamingStatus, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, bool &_currentRoamingStatus, const CommonAPI::CallInfo *_info) {
    delegate_->SetCarModemRoamingConfig(_roamingStatus, _internalCallStatus, _error, _currentRoamingStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CarModemProxy<_AttributeExtensions...>::SetCarModemRoamingConfigAsync(const bool &_roamingStatus, SetCarModemRoamingConfigAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->SetCarModemRoamingConfigAsync(_roamingStatus, _callback, _info);
}
/**
 * description: Get whether the change PIN menu should be available
 */
template <typename ... _AttributeExtensions>
void CarModemProxy<_AttributeExtensions...>::GetCarModemChangePINMenuAvailability(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, bool &_menuVisibility, const CommonAPI::CallInfo *_info) {
    delegate_->GetCarModemChangePINMenuAvailability(_internalCallStatus, _error, _menuVisibility, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CarModemProxy<_AttributeExtensions...>::GetCarModemChangePINMenuAvailabilityAsync(GetCarModemChangePINMenuAvailabilityAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetCarModemChangePINMenuAvailabilityAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void CarModemProxy<_AttributeExtensions...>::RequestCarModemApnConfiguration(const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_ApnConfiguration &_requestedApnConfiguration, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, const CommonAPI::CallInfo *_info) {
    delegate_->RequestCarModemApnConfiguration(_requestedApnConfiguration, _internalCallStatus, _error, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CarModemProxy<_AttributeExtensions...>::RequestCarModemApnConfigurationAsync(const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_ApnConfiguration &_requestedApnConfiguration, RequestCarModemApnConfigurationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->RequestCarModemApnConfigurationAsync(_requestedApnConfiguration, _callback, _info);
}
/**
 * description: Send USSD (Unstructured Supplementary Service Data) to network
 */
template <typename ... _AttributeExtensions>
void CarModemProxy<_AttributeExtensions...>::SendCarModemUssdRequest(const std::string &_ussdCode, const std::string &_languageCode, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, CarModem::CarModem_UssdStatus &_ussdStatus, std::string &_ussdReturnCode, const CommonAPI::CallInfo *_info) {
    delegate_->SendCarModemUssdRequest(_ussdCode, _languageCode, _internalCallStatus, _error, _ussdStatus, _ussdReturnCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CarModemProxy<_AttributeExtensions...>::SendCarModemUssdRequestAsync(const std::string &_ussdCode, const std::string &_languageCode, SendCarModemUssdRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->SendCarModemUssdRequestAsync(_ussdCode, _languageCode, _callback, _info);
}
/**
 * description: Request NetworkOperators scanning
 */
template <typename ... _AttributeExtensions>
void CarModemProxy<_AttributeExtensions...>::RequestCarModemNetworkScan(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, std::vector<::v0::org::volvo::connectivity::IpCommandBusTypes::NetworkOperator> &_outNetworkOperators, const CommonAPI::CallInfo *_info) {
    delegate_->RequestCarModemNetworkScan(_internalCallStatus, _error, _outNetworkOperators, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CarModemProxy<_AttributeExtensions...>::RequestCarModemNetworkScanAsync(RequestCarModemNetworkScanAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->RequestCarModemNetworkScanAsync(_callback, _info);
}
/**
 * description: PSIMNetworkOperatorCommand-SetRequest
 */
template <typename ... _AttributeExtensions>
void CarModemProxy<_AttributeExtensions...>::SetCarModemNetworkSelection(const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_OperatorSelection &_inOperator, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_OperatorSelection &_outStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::GenericOkStatus &_operatorSelectionResult, const CommonAPI::CallInfo *_info) {
    delegate_->SetCarModemNetworkSelection(_inOperator, _internalCallStatus, _error, _outStatus, _operatorSelectionResult, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CarModemProxy<_AttributeExtensions...>::SetCarModemNetworkSelectionAsync(const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_OperatorSelection &_inOperator, SetCarModemNetworkSelectionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->SetCarModemNetworkSelectionAsync(_inOperator, _callback, _info);
}
/**
 * description: PSIMNetworkOperatorCommand-Request
 */
template <typename ... _AttributeExtensions>
void CarModemProxy<_AttributeExtensions...>::GetCarModemNetworkSelection(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_OperatorSelection &_outStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::GenericOkStatus &_operatorSelectionResult, const CommonAPI::CallInfo *_info) {
    delegate_->GetCarModemNetworkSelection(_internalCallStatus, _error, _outStatus, _operatorSelectionResult, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CarModemProxy<_AttributeExtensions...>::GetCarModemNetworkSelectionAsync(GetCarModemNetworkSelectionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetCarModemNetworkSelectionAsync(_callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &CarModemProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool CarModemProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool CarModemProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& CarModemProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& CarModemProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace connectivity
} // namespace volvo
} // namespace org
} // namespace v0

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v0::org::volvo::connectivity::CarModemProxy,
    _AttributeExtension> {
    typedef typename ::v0::org::volvo::connectivity::CarModemProxy<
            ::v0::org::volvo::connectivity::CarModemExtensions::CarModemCurrentApnConfigurationAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVO_CONNECTIVITY_Car_Modem_PROXY_HPP_
