/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201512091512.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This is the FB OTA interface on IP Command Bus
 */
#ifndef V0_ORG_VOLVO_CONNECTIVITY_OTA_DBUS_PROXY_HPP_
#define V0_ORG_VOLVO_CONNECTIVITY_OTA_DBUS_PROXY_HPP_

#include <v0/org/volvo/connectivity/OTAProxyBase.hpp>
#include "v0/org/volvo/connectivity/OTADBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v0 {
namespace org {
namespace volvo {
namespace connectivity {

class OTADBusProxy
    : virtual public OTAProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    OTADBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~OTADBusProxy() { }


    virtual DownloadStatusNotificationEvent& getDownloadStatusNotificationEvent();

    /**
     * description: DownloadStatus (0x0B01)
                          This signal is sent by the VCM
     *   when status of current
                          download or installation is
     *   changed. It shall be used to
                          populate the OTA HMI.
     */
    virtual void DownloadStatusRequest(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::OTATypes::DownloadStatus &_downloadStatus, std::vector<::v0::org::volvo::connectivity::OTATypes::SoftwareProduct> &_downloadList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> DownloadStatusRequestAsync(DownloadStatusRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: DownloadSoftware (0x0B02)
                          This operation is used when IHU
     *   HMI requests VCM to start
                          downloading software.
     */
    virtual void DownloadSoftwareSetRequest(CommonAPI::CallStatus &_internalCallStatus, std::vector<::v0::org::volvo::connectivity::OTATypes::UUID> &_downloadList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> DownloadSoftwareSetRequestAsync(DownloadSoftwareSetRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: DeletedSoftware (0x0B03)
                          This operation is used when IHU
     *   requests VCM to inform
                          VCC back end systems that
     *   software has been deleted.
     */
    virtual void DeleteStatusSetRequest(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, std::vector<::v0::org::volvo::connectivity::OTATypes::PartIdentifier> &_deletedSoftware, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> DeleteStatusSetRequestAsync(DeleteStatusSetRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: CancelDownload (0x0B05)
             This operation is used when IHU HMI requests
     *   VCM to cancel a currently ongoing download of software.
     */
    virtual void CancelDownloadSetRequest(const ::v0::org::volvo::connectivity::OTATypes::UUID &_software, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, ::v0::org::volvo::connectivity::OTATypes::GenericOkStatus &_status, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> CancelDownloadSetRequestAsync(const ::v0::org::volvo::connectivity::OTATypes::UUID &_software, CancelDownloadSetRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   

    CommonAPI::DBus::DBusEvent<DownloadStatusNotificationEvent, CommonAPI::Deployable<::v0::org::volvo::connectivity::OTATypes::DownloadStatus, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<std::vector<::v0::org::volvo::connectivity::OTATypes::SoftwareProduct>, CommonAPI::DBus::ArrayDeployment<::v0::org::volvo::connectivity::OTATypes_::SoftwareProductDeployment_t>>> downloadStatusNotification_;

};

} // namespace connectivity
} // namespace volvo
} // namespace org
} // namespace v0

#endif // V0_ORG_VOLVO_CONNECTIVITY_OTA_DBUS_PROXY_HPP_

