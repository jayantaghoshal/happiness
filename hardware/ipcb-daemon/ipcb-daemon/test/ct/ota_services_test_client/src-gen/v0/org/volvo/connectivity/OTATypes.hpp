/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201512091508.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: Data types for OTA service (0xAB)
                  For source documentation of
 *   types and variables see
                  infotainmentIpBus.asn
 */
#ifndef V0_ORG_VOLVO_CONNECTIVITY_OTA_Types_HPP_
#define V0_ORG_VOLVO_CONNECTIVITY_OTA_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace volvo {
namespace connectivity {

struct OTATypes {
    
    struct GenericOkStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            unknown = 0,
            ok = 1,
            notOk = 2
        };
        
        GenericOkStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::unknown)) {}
        GenericOkStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::unknown):
                case static_cast<int32_t>(Literal::ok):
                case static_cast<int32_t>(Literal::notOk):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const GenericOkStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const GenericOkStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const GenericOkStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const GenericOkStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const GenericOkStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const GenericOkStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct UUID : CommonAPI::Struct<std::string> {
    	
    	UUID() {
    	}
    	UUID(const std::string &_uuid)
    	{
    		std::get<0>(values_) = _uuid;
    	}
    	inline const std::string &getUuid() const { return std::get<0>(values_); }
    	inline void setUuid(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline bool operator==(const UUID& _other) const {
                return (getUuid() == _other.getUuid());
        }
    	inline bool operator!=(const UUID &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct PartIdentifier : CommonAPI::Struct<std::string> {
    	
    	PartIdentifier() {
    	}
    	PartIdentifier(const std::string &_partID)
    	{
    		std::get<0>(values_) = _partID;
    	}
    	inline const std::string &getPartID() const { return std::get<0>(values_); }
    	inline void setPartID(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline bool operator==(const PartIdentifier& _other) const {
                return (getPartID() == _other.getPartID());
        }
    	inline bool operator!=(const PartIdentifier &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct Uri : CommonAPI::Struct<std::string> {
    	
    	Uri() {
    	}
    	Uri(const std::string &_uri)
    	{
    		std::get<0>(values_) = _uri;
    	}
    	inline const std::string &getUri() const { return std::get<0>(values_); }
    	inline void setUri(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline bool operator==(const Uri& _other) const {
                return (getUri() == _other.getUri());
        }
    	inline bool operator!=(const Uri &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct DownloadStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            idle = 0,
            active = 1,
            noService = 2
        };
        
        DownloadStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::idle)) {}
        DownloadStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::idle):
                case static_cast<int32_t>(Literal::active):
                case static_cast<int32_t>(Literal::noService):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DownloadStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DownloadStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DownloadStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DownloadStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DownloadStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DownloadStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct DownloadState : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            queued = 0,
            requestDownloadInfo = 1,
            requestDownloadInfo_Halted = 2,
            validatingConfig = 3,
            configValidated = 4,
            downloading = 5,
            downloading_Halted = 6,
            downloaded = 7,
            installing = 8,
            installed_Waitreset = 9,
            installed = 10,
            errorNoStorage = 11,
            errorSoftwareNotOk = 12,
            errorDownloadFileFailed = 13,
            errorTimeToLiveExceeded = 14,
            errorValidationFailed = 15,
            errorInstallationFailed = 16,
            errorInstallationFailedMemoryFull = 17,
            errorNoDiagResponse = 18,
            errorDownloadInfoRequestFailed = 19,
            cancelling = 20,
            cancelled = 21
        };
        
        DownloadState() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::queued)) {}
        DownloadState(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::queued):
                case static_cast<int32_t>(Literal::requestDownloadInfo):
                case static_cast<int32_t>(Literal::requestDownloadInfo_Halted):
                case static_cast<int32_t>(Literal::validatingConfig):
                case static_cast<int32_t>(Literal::configValidated):
                case static_cast<int32_t>(Literal::downloading):
                case static_cast<int32_t>(Literal::downloading_Halted):
                case static_cast<int32_t>(Literal::downloaded):
                case static_cast<int32_t>(Literal::installing):
                case static_cast<int32_t>(Literal::installed_Waitreset):
                case static_cast<int32_t>(Literal::installed):
                case static_cast<int32_t>(Literal::errorNoStorage):
                case static_cast<int32_t>(Literal::errorSoftwareNotOk):
                case static_cast<int32_t>(Literal::errorDownloadFileFailed):
                case static_cast<int32_t>(Literal::errorTimeToLiveExceeded):
                case static_cast<int32_t>(Literal::errorValidationFailed):
                case static_cast<int32_t>(Literal::errorInstallationFailed):
                case static_cast<int32_t>(Literal::errorInstallationFailedMemoryFull):
                case static_cast<int32_t>(Literal::errorNoDiagResponse):
                case static_cast<int32_t>(Literal::errorDownloadInfoRequestFailed):
                case static_cast<int32_t>(Literal::cancelling):
                case static_cast<int32_t>(Literal::cancelled):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DownloadState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DownloadState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DownloadState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DownloadState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DownloadState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DownloadState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct SoftwareProduct : CommonAPI::Struct<UUID, DownloadState, uint16_t> {
    	
    	SoftwareProduct() {
    	}
    	SoftwareProduct(const UUID &_id, const DownloadState &_downloadState, const uint16_t &_DownloadProgress)
    	{
    		std::get<0>(values_) = _id;
    		std::get<1>(values_) = _downloadState;
    		std::get<2>(values_) = _DownloadProgress;
    	}
    	inline const UUID &getId() const { return std::get<0>(values_); }
    	inline void setId(const UUID &_value) { std::get<0>(values_) = _value; }
    	inline const DownloadState &getDownloadState() const { return std::get<1>(values_); }
    	inline void setDownloadState(const DownloadState &_value) { std::get<1>(values_) = _value; }
    	inline const uint16_t &getDownloadProgress() const { return std::get<2>(values_); }
    	inline void setDownloadProgress(const uint16_t &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const SoftwareProduct& _other) const {
                return (getId() == _other.getId() && getDownloadState() == _other.getDownloadState() && getDownloadProgress() == _other.getDownloadProgress());
        }
    	inline bool operator!=(const SoftwareProduct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct DownloadStatus_Response : CommonAPI::Struct<DownloadStatus, std::vector<SoftwareProduct>> {
    	
    	DownloadStatus_Response() {
    	}
    	DownloadStatus_Response(const DownloadStatus &_downloadStatus, const std::vector<SoftwareProduct> &_downloadList)
    	{
    		std::get<0>(values_) = _downloadStatus;
    		std::get<1>(values_) = _downloadList;
    	}
    	inline const DownloadStatus &getDownloadStatus() const { return std::get<0>(values_); }
    	inline void setDownloadStatus(const DownloadStatus &_value) { std::get<0>(values_) = _value; }
    	inline const std::vector<SoftwareProduct> &getDownloadList() const { return std::get<1>(values_); }
    	inline void setDownloadList(const std::vector<SoftwareProduct> &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const DownloadStatus_Response& _other) const {
                return (getDownloadStatus() == _other.getDownloadStatus() && getDownloadList() == _other.getDownloadList());
        }
    	inline bool operator!=(const DownloadStatus_Response &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct OpDownloadSoftware_SetRequest : CommonAPI::Struct<UUID> {
    	
    	OpDownloadSoftware_SetRequest() {
    	}
    	OpDownloadSoftware_SetRequest(const UUID &_downloadList)
    	{
    		std::get<0>(values_) = _downloadList;
    	}
    	inline const UUID &getDownloadList() const { return std::get<0>(values_); }
    	inline void setDownloadList(const UUID &_value) { std::get<0>(values_) = _value; }
    	inline bool operator==(const OpDownloadSoftware_SetRequest& _other) const {
                return (getDownloadList() == _other.getDownloadList());
        }
    	inline bool operator!=(const OpDownloadSoftware_SetRequest &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct OpDeletedSoftware_SetRequest : CommonAPI::Struct<PartIdentifier> {
    	
    	OpDeletedSoftware_SetRequest() {
    	}
    	OpDeletedSoftware_SetRequest(const PartIdentifier &_deletedSoftware)
    	{
    		std::get<0>(values_) = _deletedSoftware;
    	}
    	inline const PartIdentifier &getDeletedSoftware() const { return std::get<0>(values_); }
    	inline void setDeletedSoftware(const PartIdentifier &_value) { std::get<0>(values_) = _value; }
    	inline bool operator==(const OpDeletedSoftware_SetRequest& _other) const {
                return (getDeletedSoftware() == _other.getDeletedSoftware());
        }
    	inline bool operator!=(const OpDeletedSoftware_SetRequest &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct OpCancelDownload_SetRequest : CommonAPI::Struct<UUID> {
    	
    	OpCancelDownload_SetRequest() {
    	}
    	OpCancelDownload_SetRequest(const UUID &_software)
    	{
    		std::get<0>(values_) = _software;
    	}
    	inline const UUID &getSoftware() const { return std::get<0>(values_); }
    	inline void setSoftware(const UUID &_value) { std::get<0>(values_) = _value; }
    	inline bool operator==(const OpCancelDownload_SetRequest& _other) const {
                return (getSoftware() == _other.getSoftware());
        }
    	inline bool operator!=(const OpCancelDownload_SetRequest &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct OpCancelDownload_Response : CommonAPI::Struct<GenericOkStatus> {
    	
    	OpCancelDownload_Response() {
    	}
    	OpCancelDownload_Response(const GenericOkStatus &_status)
    	{
    		std::get<0>(values_) = _status;
    	}
    	inline const GenericOkStatus &getStatus() const { return std::get<0>(values_); }
    	inline void setStatus(const GenericOkStatus &_value) { std::get<0>(values_) = _value; }
    	inline bool operator==(const OpCancelDownload_Response& _other) const {
                return (getStatus() == _other.getStatus());
        }
    	inline bool operator!=(const OpCancelDownload_Response &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef uint8_t InstallProgress;
    
    struct InstallCommand : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            install = 0,
            useSoftware = 1,
            cancelInstall = 2
        };
        
        InstallCommand() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::install)) {}
        InstallCommand(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::install):
                case static_cast<int32_t>(Literal::useSoftware):
                case static_cast<int32_t>(Literal::cancelInstall):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const InstallCommand &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const InstallCommand &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const InstallCommand &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const InstallCommand &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const InstallCommand &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const InstallCommand &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct InstallStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            idle = 0,
            installing = 1,
            installationComplete = 2,
            installationPendingCmd = 3,
            cancelled = 4,
            failed = 5,
            failedMemoryFull = 6,
            installationWaitReboot = 7,
            failedValidation = 8
        };
        
        InstallStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::idle)) {}
        InstallStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::idle):
                case static_cast<int32_t>(Literal::installing):
                case static_cast<int32_t>(Literal::installationComplete):
                case static_cast<int32_t>(Literal::installationPendingCmd):
                case static_cast<int32_t>(Literal::cancelled):
                case static_cast<int32_t>(Literal::failed):
                case static_cast<int32_t>(Literal::failedMemoryFull):
                case static_cast<int32_t>(Literal::installationWaitReboot):
                case static_cast<int32_t>(Literal::failedValidation):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const InstallStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const InstallStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const InstallStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const InstallStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const InstallStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const InstallStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct InstallationData : CommonAPI::Struct<PartIdentifier, Uri, bool> {
    	
    	InstallationData() {
    		std::get<2>(values_) = false;
    	}
    	InstallationData(const PartIdentifier &_identifier, const Uri &_name, const bool &_rebootNeeded)
    	{
    		std::get<0>(values_) = _identifier;
    		std::get<1>(values_) = _name;
    		std::get<2>(values_) = _rebootNeeded;
    	}
    	inline const PartIdentifier &getIdentifier() const { return std::get<0>(values_); }
    	inline void setIdentifier(const PartIdentifier &_value) { std::get<0>(values_) = _value; }
    	inline const Uri &getName() const { return std::get<1>(values_); }
    	inline void setName(const Uri &_value) { std::get<1>(values_) = _value; }
    	inline const bool &getRebootNeeded() const { return std::get<2>(values_); }
    	inline void setRebootNeeded(const bool _value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const InstallationData& _other) const {
                return (getIdentifier() == _other.getIdentifier() && getName() == _other.getName() && getRebootNeeded() == _other.getRebootNeeded());
        }
    	inline bool operator!=(const InstallationData &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct FileInstallationStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            pending = 0,
            installing = 1,
            installed = 2,
            failed = 3
        };
        
        FileInstallationStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::pending)) {}
        FileInstallationStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::pending):
                case static_cast<int32_t>(Literal::installing):
                case static_cast<int32_t>(Literal::installed):
                case static_cast<int32_t>(Literal::failed):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const FileInstallationStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const FileInstallationStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const FileInstallationStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const FileInstallationStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const FileInstallationStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const FileInstallationStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct InstalledData : CommonAPI::Struct<PartIdentifier, FileInstallationStatus> {
    	
    	InstalledData() {
    	}
    	InstalledData(const PartIdentifier &_identifier, const FileInstallationStatus &_fileStatus)
    	{
    		std::get<0>(values_) = _identifier;
    		std::get<1>(values_) = _fileStatus;
    	}
    	inline const PartIdentifier &getIdentifier() const { return std::get<0>(values_); }
    	inline void setIdentifier(const PartIdentifier &_value) { std::get<0>(values_) = _value; }
    	inline const FileInstallationStatus &getFileStatus() const { return std::get<1>(values_); }
    	inline void setFileStatus(const FileInstallationStatus &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const InstalledData& _other) const {
                return (getIdentifier() == _other.getIdentifier() && getFileStatus() == _other.getFileStatus());
        }
    	inline bool operator!=(const InstalledData &_other) const {
    		return !((*this) == _other);
    	}
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.volvo.connectivity.OTATypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(0, 1);
}

}; // struct OTATypes

} // namespace connectivity
} // namespace volvo
} // namespace org
} // namespace v0

namespace CommonAPI {
}


namespace std {
    //Hash for GenericOkStatus
    template<>
    struct hash<::v0::org::volvo::connectivity::OTATypes::GenericOkStatus> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::OTATypes::GenericOkStatus& genericOkStatus) const {
            return static_cast<int32_t>(genericOkStatus);
        }
    };
    //Hash for DownloadStatus
    template<>
    struct hash<::v0::org::volvo::connectivity::OTATypes::DownloadStatus> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::OTATypes::DownloadStatus& downloadStatus) const {
            return static_cast<int32_t>(downloadStatus);
        }
    };
    //Hash for DownloadState
    template<>
    struct hash<::v0::org::volvo::connectivity::OTATypes::DownloadState> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::OTATypes::DownloadState& downloadState) const {
            return static_cast<int32_t>(downloadState);
        }
    };
    //Hash for InstallCommand
    template<>
    struct hash<::v0::org::volvo::connectivity::OTATypes::InstallCommand> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::OTATypes::InstallCommand& installCommand) const {
            return static_cast<int32_t>(installCommand);
        }
    };
    //Hash for InstallStatus
    template<>
    struct hash<::v0::org::volvo::connectivity::OTATypes::InstallStatus> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::OTATypes::InstallStatus& installStatus) const {
            return static_cast<int32_t>(installStatus);
        }
    };
    //Hash for FileInstallationStatus
    template<>
    struct hash<::v0::org::volvo::connectivity::OTATypes::FileInstallationStatus> {
        inline size_t operator()(const ::v0::org::volvo::connectivity::OTATypes::FileInstallationStatus& fileInstallationStatus) const {
            return static_cast<int32_t>(fileInstallationStatus);
        }
    };
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVO_CONNECTIVITY_OTA_Types_HPP_
