/*===========================================================================*\
 * Copyright 2017 Delphi Technologies, Inc., All Rights Reserved.
 * Delphi Confidential
\*===========================================================================*/
/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201512091508.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <assert.h>

#include "mock_telematics_service_stub.h"

namespace v0_conn = v0::org::volvo::connectivity;

namespace Connectivity
{
TelematicsStub::TelematicsStub(ITelematicsService *service)
    : remoteEventHandler_(this), interfaceVersion_(CommonAPI::Version(0, 1)), service_(service)
{
}

TelematicsStub::RemoteEventHandler::RemoteEventHandler(TelematicsStub *_defaultStub) : defaultStub_(_defaultStub)
{
}

const CommonAPI::Version &TelematicsStub::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client)
{
    (void)_client;

    return interfaceVersion_;
}

v0_conn::TelematicsStubRemoteEvent *TelematicsStub::initStubAdapter(
    const std::shared_ptr<v0_conn::TelematicsStubAdapter> &_adapter)
{
    CommonAPI::Stub<v0_conn::TelematicsStubAdapter, v0_conn::TelematicsStubRemoteEvent>::stubAdapter_ = _adapter;

    return &remoteEventHandler_;
}

/**
 * description: (0x0112 SoHPacketSend)
                This operation is used when to send
 *              SoHPacketSend(0x0112) to VCM
 */
void TelematicsStub::SoHPacketSendSetRequestNoReturn(
    const std::shared_ptr<CommonAPI::ClientId> _client,
    v0_conn::IpCommandBusTypes::SBTrigger _trigger,
    std::string _text,
    v0_conn::IpCommandBusTypes::SBWarning _mainCause,
    std::vector<v0_conn::IpCommandBusTypes::SBWarning> _warnings,
    v0_conn::TelematicsStub::SoHPacketSendSetRequestNoReturnReply_t _reply)
{
    (void)_client;
    (void)_trigger;
    (void)_text;
    (void)_mainCause;
    (void)_warnings;

    fprintf(stderr, "Not supposed to reach this stage in service layer tests...");

    assert(0);
}

/**
 * description: (0x0104 TelematicSettings 0x02 SetRequest )
        This operation changes
 *   settings related to telematic services
 */
void TelematicsStub::TelematicSettingsSetRequest(
    const std::shared_ptr<CommonAPI::ClientId> _client,
    ::v0::org::volvo::connectivity::IpCommandBusTypes::TEM_TelematicSettings _inTelematicSetting,
    v0_conn::TelematicsStub::TelematicSettingsSetRequestReply_t _reply)
{
    (void)_client;
    (void)_inTelematicSetting;
    (void)_reply;

    fprintf(stderr, "Not supposed to reach this stage in service layer tests...");

    assert(0);
}

/**
 * description: (0x0115 EcallSettings), Method  uses for changing the priority
 * between Public SOS and VOC
 */
void TelematicsStub::ECallSettingsSetRequest(
    const std::shared_ptr<CommonAPI::ClientId> _client,
    ::v0_1::org::volvo::connectivity::IpCommandBusTypes::TEM_PreferredEcalls _inPreferredEcalls,
    v0_conn::TelematicsStub::ECallSettingsSetRequestReply_t _reply)
{
    (void)_client;
    (void)_inPreferredEcalls;
    (void)_reply;
    fprintf(stderr, "Not supposed to reach this stage in service layer tests...");
    assert(0);
}

/**
 * description: (0x0107 SubscriptionActivation 0x02 SetRequest )
        This operation changes
 *   the activation status in TEM
 */

void TelematicsStub::SubscriptionActivationSetRequest(
    const std::shared_ptr<CommonAPI::ClientId> _client,
    v0_conn::IpCommandBusTypes::TEM_ActivationStatusChange _newStatus,
    uint32_t _activationCode,
    v0_conn::TelematicsStub::SubscriptionActivationSetRequestReply_t _reply)
{
    (void)_client;
    (void)_newStatus;
    (void)_activationCode;
    (void)_reply;

    fprintf(stderr, "Not supposed to reach this stage in service layer tests...");

    assert(0);
}

/**
 * description: (0x0105 PositionData 0x00 Request)
        Ask for current position.
 */
void TelematicsStub::PositionDataRequest(const std::shared_ptr<CommonAPI::ClientId> _client,
                                         v0_conn::TelematicsStub::PositionDataRequestReply_t _reply)
{
    (void)_client;
    (void)_reply;

    fprintf(stderr, "Not supposed to reach this stage in service layer tests...");

    assert(0);
}

/**
 * description: (0x0108 ServiceActivation  0x02 SetRequest )
        This operation starts or
 *   stops a telematics service in TEM
 */
void TelematicsStub::ServiceActivationSetRequest(const std::shared_ptr<CommonAPI::ClientId> _client,
                                                 v0_conn::IpCommandBusTypes::TEM_OnCallService _service,
                                                 v0_conn::IpCommandBusTypes::Infotainment_IP_bus_OnOffSetting _action,
                                                 ServiceActivationSetRequestReply_t _reply)
{
    (void)_client;
    (void)_service;
    (void)_action;
    (void)_reply;

    fprintf(stderr, "Not supposed to reach this stage in service layer tests...");

    assert(0);
}

/**
 * description: (0x0102 SVTStatus  0x00 Request )
        This operation signals status
 *   information to IHU for the SVT service. Also informs the IHU and VCM that/if
 *   GNSS positions are needed by TEM
 */
void TelematicsStub::SVTStatusRequest(const std::shared_ptr<CommonAPI::ClientId> _client,
                                      SVTStatusRequestReply_t _reply)
{
    (void)_client;
    (void)_reply;

    fprintf(stderr, "Not supposed to reach this stage in service layer tests...");

    assert(0);
}

/**
 * description: (0x0103 TNStatus  0x00 Request )
        This operation signals status
 *   information to IHU for the TN service
 */
void TelematicsStub::TNStatusRequest(const std::shared_ptr<CommonAPI::ClientId> _client, TNStatusRequestReply_t _reply)
{
    (void)_client;
    (void)_reply;

    fprintf(stderr, "Not supposed to reach this stage in service layer tests...");

    assert(0);
}

/**
 * description: (0x113 SoHPackageUploaded)
 *              This notification is sent out when received from VCM
 */
void TelematicsStub::fireSoHPackageUploadedNotificationEvent(const std::string &_packetId,
                                                             const v0_conn::IpCommandBusTypes::GenericOkStatus &_result)
{
    static_cast<MockTelematicsStub *>(this)->fireSoHPackageUploadedNotificationEvent(_packetId, _result);
}

/**
 * description: (0x0107 SubscriptionActivation 0x05 Notification)
        This notification is
 *   sent out when activationStatus changed
 */
void TelematicsStub::fireSubscriptionActivationNotificationEvent(
    const v0_conn::IpCommandBusTypes::TEM_ActivationStatus &_status)
{
    static_cast<MockTelematicsStub *>(this)->fireSubscriptionActivationNotificationEvent(_status);
}

/**
 * description: (0x010A RescueStatus 0x05 Notification)
        This notification is sent out
 *   when Signals status changed
 */
void TelematicsStub::fireRescueStatusNotificationEvent(
    const v0_conn::IpCommandBusTypes::TEM_RescueStatus &_raStatus,
    const v0_conn::IpCommandBusTypes::TEM_RescueStatus &_eaStatus,
    const v0_conn::IpCommandBusTypes::TEM_RescueStatus &_sdnStatus,
    const v0_conn::IpCommandBusTypes::TEM_VoiceStatus &_voiceStatus,
    const v0_conn::IpCommandBusTypes::SourceStatus &_voiceSource,
    const v0_conn::IpCommandBusTypes::TEM_MessageStatus &_messageStatus,
    const v0_conn::IpCommandBusTypes::TEM_ButtonStatus &_buttonStatus,
    const v0_conn::IpCommandBusTypes::TEM_PSAPStatus &_psapConfirmStatus,
    const v0_conn::IpCommandBusTypes::GenericOkStatus &_backupAudioStatus)
{
    static_cast<MockTelematicsStub *>(this)->fireRescueStatusNotificationEvent(_raStatus,
                                                                               _eaStatus,
                                                                               _sdnStatus,
                                                                               _voiceStatus,
                                                                               _voiceSource,
                                                                               _messageStatus,
                                                                               _buttonStatus,
                                                                               _psapConfirmStatus,
                                                                               _backupAudioStatus);
}

/**
 * description: (0x0102 SVTStatus  0x05 Notification )
        this notification is sent out
 *   when the status information is changed
 */
void TelematicsStub::fireSVTStatusNotificationEvent(const v0_conn::IpCommandBusTypes::SecurityStatus &_svtStatus)
{
    static_cast<MockTelematicsStub *>(this)->fireSVTStatusNotificationEvent(_svtStatus);
}

/**
 * description: (0x0103 TNStatus  0x05 Notification )
        this notification is sent out
 *   when the status information is changed
 */
void TelematicsStub::fireTNStatusNotificationEvent(const v0_conn::IpCommandBusTypes::SecurityStatus &_tnStatus)
{
    static_cast<MockTelematicsStub *>(this)->fireTNStatusNotificationEvent(_tnStatus);
}

}  // namespace Connectivity
