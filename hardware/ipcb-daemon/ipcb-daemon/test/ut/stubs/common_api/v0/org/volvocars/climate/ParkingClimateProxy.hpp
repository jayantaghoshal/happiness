/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_ORG_VOLVOCARS_CLIMATE_Parking_Climate_PROXY_HPP_
#define V0_ORG_VOLVOCARS_CLIMATE_Parking_Climate_PROXY_HPP_

#include <v0/org/volvocars/climate/ParkingClimateProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace volvocars {
namespace climate {

template <typename ... _AttributeExtensions>
class ParkingClimateProxy
    : virtual public ParkingClimate, 
      virtual public ParkingClimateProxyBase,
      virtual public _AttributeExtensions... {
public:
    ParkingClimateProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~ParkingClimateProxy();

    typedef ParkingClimate InterfaceType;


    /**
     * Returns the wrapper class that provides access to the attribute preConditioning.
     */
    virtual PreConditioningAttribute& getPreConditioningAttribute() {
        return delegate_->getPreConditioningAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute preCleaning.
     */
    virtual PreCleaningAttribute& getPreCleaningAttribute() {
        return delegate_->getPreCleaningAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute postConditioning.
     */
    virtual PostConditioningAttribute& getPostConditioningAttribute() {
        return delegate_->getPostConditioningAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute seatHeatDriver.
     */
    virtual SeatHeatDriverAttribute& getSeatHeatDriverAttribute() {
        return delegate_->getSeatHeatDriverAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute seatHeatPassenger.
     */
    virtual SeatHeatPassengerAttribute& getSeatHeatPassengerAttribute() {
        return delegate_->getSeatHeatPassengerAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute steeringWheelHeating.
     */
    virtual SteeringWheelHeatingAttribute& getSteeringWheelHeatingAttribute() {
        return delegate_->getSteeringWheelHeatingAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute preCleaningNotification.
     */
    virtual PreCleaningNotificationAttribute& getPreCleaningNotificationAttribute() {
        return delegate_->getPreCleaningNotificationAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute maxTimers.
     */
    virtual MaxTimersAttribute& getMaxTimersAttribute() {
        return delegate_->getMaxTimersAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute TimerList.
     */
    virtual TimerListAttribute& getTimerListAttribute() {
        return delegate_->getTimerListAttribute();
    }


    /**
     * Calls requestPreConditioning with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestPreConditioning(const ParkingClimate::ParkingClimateRequest &_value, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvocars::climate::CommonTypes::ReturnCode &_error, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestPreConditioning with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestPreConditioningAsync(const ParkingClimate::ParkingClimateRequest &_value, RequestPreConditioningAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestPreCleaning with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestPreCleaning(const ParkingClimate::ParkingClimateRequest &_value, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvocars::climate::CommonTypes::ReturnCode &_error, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestPreCleaning with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestPreCleaningAsync(const ParkingClimate::ParkingClimateRequest &_value, RequestPreCleaningAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestPostConditioning with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestPostConditioning(const ParkingClimate::ParkingClimateRequest &_value, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvocars::climate::CommonTypes::ReturnCode &_error, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestPostConditioning with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestPostConditioningAsync(const ParkingClimate::ParkingClimateRequest &_value, RequestPostConditioningAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestSeatHeatDriver with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestSeatHeatDriver(const ParkingClimate::DateTimeStruct &_timestamp, const ParkingClimate::PreConditioningSettingRequest &_value, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvocars::climate::CommonTypes::ReturnCode &_error, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestSeatHeatDriver with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestSeatHeatDriverAsync(const ParkingClimate::DateTimeStruct &_timestamp, const ParkingClimate::PreConditioningSettingRequest &_value, RequestSeatHeatDriverAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestSeatHeatPassenger with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestSeatHeatPassenger(const ParkingClimate::DateTimeStruct &_timestamp, const ParkingClimate::PreConditioningSettingRequest &_value, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvocars::climate::CommonTypes::ReturnCode &_error, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestSeatHeatPassenger with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestSeatHeatPassengerAsync(const ParkingClimate::DateTimeStruct &_timestamp, const ParkingClimate::PreConditioningSettingRequest &_value, RequestSeatHeatPassengerAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestSteeringWheelHeating with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestSteeringWheelHeating(const ParkingClimate::DateTimeStruct &_timestamp, const ParkingClimate::PreConditioningSettingRequest &_value, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvocars::climate::CommonTypes::ReturnCode &_error, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestSteeringWheelHeating with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestSteeringWheelHeatingAsync(const ParkingClimate::DateTimeStruct &_timestamp, const ParkingClimate::PreConditioningSettingRequest &_value, RequestSteeringWheelHeatingAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestTimerList with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestTimerList(const ParkingClimate::DateTimeStruct &_timestamp, const ParkingClimate::ParkingTimers &_list, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvocars::climate::CommonTypes::ReturnCode &_error, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestTimerList with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestTimerListAsync(const ParkingClimate::DateTimeStruct &_timestamp, const ParkingClimate::ParkingTimers &_list, RequestTimerListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<ParkingClimateProxyBase> delegate_;
};

typedef ParkingClimateProxy<> ParkingClimateProxyDefault;

namespace ParkingClimateExtensions {
    template <template <typename > class _ExtensionType>
    class PreConditioningAttributeExtension {
     public:
        typedef _ExtensionType<ParkingClimateProxyBase::PreConditioningAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<ParkingClimateProxyBase::PreConditioningAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PreConditioningAttributeExtension() {}
    #endif
    
        PreConditioningAttributeExtension(ParkingClimateProxyBase& proxy): attributeExtension_(proxy.getPreConditioningAttribute()) {
        }
    
        inline extension_type& getPreConditioningAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class PreCleaningAttributeExtension {
     public:
        typedef _ExtensionType<ParkingClimateProxyBase::PreCleaningAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<ParkingClimateProxyBase::PreCleaningAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PreCleaningAttributeExtension() {}
    #endif
    
        PreCleaningAttributeExtension(ParkingClimateProxyBase& proxy): attributeExtension_(proxy.getPreCleaningAttribute()) {
        }
    
        inline extension_type& getPreCleaningAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class PostConditioningAttributeExtension {
     public:
        typedef _ExtensionType<ParkingClimateProxyBase::PostConditioningAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<ParkingClimateProxyBase::PostConditioningAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PostConditioningAttributeExtension() {}
    #endif
    
        PostConditioningAttributeExtension(ParkingClimateProxyBase& proxy): attributeExtension_(proxy.getPostConditioningAttribute()) {
        }
    
        inline extension_type& getPostConditioningAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class SeatHeatDriverAttributeExtension {
     public:
        typedef _ExtensionType<ParkingClimateProxyBase::SeatHeatDriverAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<ParkingClimateProxyBase::SeatHeatDriverAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        SeatHeatDriverAttributeExtension() {}
    #endif
    
        SeatHeatDriverAttributeExtension(ParkingClimateProxyBase& proxy): attributeExtension_(proxy.getSeatHeatDriverAttribute()) {
        }
    
        inline extension_type& getSeatHeatDriverAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class SeatHeatPassengerAttributeExtension {
     public:
        typedef _ExtensionType<ParkingClimateProxyBase::SeatHeatPassengerAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<ParkingClimateProxyBase::SeatHeatPassengerAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        SeatHeatPassengerAttributeExtension() {}
    #endif
    
        SeatHeatPassengerAttributeExtension(ParkingClimateProxyBase& proxy): attributeExtension_(proxy.getSeatHeatPassengerAttribute()) {
        }
    
        inline extension_type& getSeatHeatPassengerAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class SteeringWheelHeatingAttributeExtension {
     public:
        typedef _ExtensionType<ParkingClimateProxyBase::SteeringWheelHeatingAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<ParkingClimateProxyBase::SteeringWheelHeatingAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        SteeringWheelHeatingAttributeExtension() {}
    #endif
    
        SteeringWheelHeatingAttributeExtension(ParkingClimateProxyBase& proxy): attributeExtension_(proxy.getSteeringWheelHeatingAttribute()) {
        }
    
        inline extension_type& getSteeringWheelHeatingAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class PreCleaningNotificationAttributeExtension {
     public:
        typedef _ExtensionType<ParkingClimateProxyBase::PreCleaningNotificationAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<ParkingClimateProxyBase::PreCleaningNotificationAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PreCleaningNotificationAttributeExtension() {}
    #endif
    
        PreCleaningNotificationAttributeExtension(ParkingClimateProxyBase& proxy): attributeExtension_(proxy.getPreCleaningNotificationAttribute()) {
        }
    
        inline extension_type& getPreCleaningNotificationAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class MaxTimersAttributeExtension {
     public:
        typedef _ExtensionType<ParkingClimateProxyBase::MaxTimersAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<ParkingClimateProxyBase::MaxTimersAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        MaxTimersAttributeExtension() {}
    #endif
    
        MaxTimersAttributeExtension(ParkingClimateProxyBase& proxy): attributeExtension_(proxy.getMaxTimersAttribute()) {
        }
    
        inline extension_type& getMaxTimersAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TimerListAttributeExtension {
     public:
        typedef _ExtensionType<ParkingClimateProxyBase::TimerListAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<ParkingClimateProxyBase::TimerListAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        TimerListAttributeExtension() {}
    #endif
    
        TimerListAttributeExtension(ParkingClimateProxyBase& proxy): attributeExtension_(proxy.getTimerListAttribute()) {
        }
    
        inline extension_type& getTimerListAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace ParkingClimateExtensions

//
// ParkingClimateProxy Implementation
//
template <typename ... _AttributeExtensions>
ParkingClimateProxy<_AttributeExtensions...>::ParkingClimateProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<ParkingClimateProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<ParkingClimateProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
ParkingClimateProxy<_AttributeExtensions...>::~ParkingClimateProxy() {
}

template <typename ... _AttributeExtensions>
void ParkingClimateProxy<_AttributeExtensions...>::requestPreConditioning(const ParkingClimate::ParkingClimateRequest &_value, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvocars::climate::CommonTypes::ReturnCode &_error, const CommonAPI::CallInfo *_info) {
    if (!_value.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->requestPreConditioning(_value, _internalCallStatus, _error, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ParkingClimateProxy<_AttributeExtensions...>::requestPreConditioningAsync(const ParkingClimate::ParkingClimateRequest &_value, RequestPreConditioningAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_value.validate()) {
        ::v0::org::volvocars::climate::CommonTypes::ReturnCode error;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, error);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->requestPreConditioningAsync(_value, _callback, _info);
}
template <typename ... _AttributeExtensions>
void ParkingClimateProxy<_AttributeExtensions...>::requestPreCleaning(const ParkingClimate::ParkingClimateRequest &_value, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvocars::climate::CommonTypes::ReturnCode &_error, const CommonAPI::CallInfo *_info) {
    if (!_value.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->requestPreCleaning(_value, _internalCallStatus, _error, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ParkingClimateProxy<_AttributeExtensions...>::requestPreCleaningAsync(const ParkingClimate::ParkingClimateRequest &_value, RequestPreCleaningAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_value.validate()) {
        ::v0::org::volvocars::climate::CommonTypes::ReturnCode error;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, error);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->requestPreCleaningAsync(_value, _callback, _info);
}
template <typename ... _AttributeExtensions>
void ParkingClimateProxy<_AttributeExtensions...>::requestPostConditioning(const ParkingClimate::ParkingClimateRequest &_value, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvocars::climate::CommonTypes::ReturnCode &_error, const CommonAPI::CallInfo *_info) {
    if (!_value.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->requestPostConditioning(_value, _internalCallStatus, _error, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ParkingClimateProxy<_AttributeExtensions...>::requestPostConditioningAsync(const ParkingClimate::ParkingClimateRequest &_value, RequestPostConditioningAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_value.validate()) {
        ::v0::org::volvocars::climate::CommonTypes::ReturnCode error;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, error);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->requestPostConditioningAsync(_value, _callback, _info);
}
template <typename ... _AttributeExtensions>
void ParkingClimateProxy<_AttributeExtensions...>::requestSeatHeatDriver(const ParkingClimate::DateTimeStruct &_timestamp, const ParkingClimate::PreConditioningSettingRequest &_value, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvocars::climate::CommonTypes::ReturnCode &_error, const CommonAPI::CallInfo *_info) {
    if (!_value.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->requestSeatHeatDriver(_timestamp, _value, _internalCallStatus, _error, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ParkingClimateProxy<_AttributeExtensions...>::requestSeatHeatDriverAsync(const ParkingClimate::DateTimeStruct &_timestamp, const ParkingClimate::PreConditioningSettingRequest &_value, RequestSeatHeatDriverAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_value.validate()) {
        ::v0::org::volvocars::climate::CommonTypes::ReturnCode error;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, error);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->requestSeatHeatDriverAsync(_timestamp, _value, _callback, _info);
}
template <typename ... _AttributeExtensions>
void ParkingClimateProxy<_AttributeExtensions...>::requestSeatHeatPassenger(const ParkingClimate::DateTimeStruct &_timestamp, const ParkingClimate::PreConditioningSettingRequest &_value, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvocars::climate::CommonTypes::ReturnCode &_error, const CommonAPI::CallInfo *_info) {
    if (!_value.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->requestSeatHeatPassenger(_timestamp, _value, _internalCallStatus, _error, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ParkingClimateProxy<_AttributeExtensions...>::requestSeatHeatPassengerAsync(const ParkingClimate::DateTimeStruct &_timestamp, const ParkingClimate::PreConditioningSettingRequest &_value, RequestSeatHeatPassengerAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_value.validate()) {
        ::v0::org::volvocars::climate::CommonTypes::ReturnCode error;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, error);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->requestSeatHeatPassengerAsync(_timestamp, _value, _callback, _info);
}
template <typename ... _AttributeExtensions>
void ParkingClimateProxy<_AttributeExtensions...>::requestSteeringWheelHeating(const ParkingClimate::DateTimeStruct &_timestamp, const ParkingClimate::PreConditioningSettingRequest &_value, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvocars::climate::CommonTypes::ReturnCode &_error, const CommonAPI::CallInfo *_info) {
    if (!_value.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->requestSteeringWheelHeating(_timestamp, _value, _internalCallStatus, _error, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ParkingClimateProxy<_AttributeExtensions...>::requestSteeringWheelHeatingAsync(const ParkingClimate::DateTimeStruct &_timestamp, const ParkingClimate::PreConditioningSettingRequest &_value, RequestSteeringWheelHeatingAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_value.validate()) {
        ::v0::org::volvocars::climate::CommonTypes::ReturnCode error;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, error);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->requestSteeringWheelHeatingAsync(_timestamp, _value, _callback, _info);
}
template <typename ... _AttributeExtensions>
void ParkingClimateProxy<_AttributeExtensions...>::requestTimerList(const ParkingClimate::DateTimeStruct &_timestamp, const ParkingClimate::ParkingTimers &_list, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvocars::climate::CommonTypes::ReturnCode &_error, const CommonAPI::CallInfo *_info) {
    delegate_->requestTimerList(_timestamp, _list, _internalCallStatus, _error, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ParkingClimateProxy<_AttributeExtensions...>::requestTimerListAsync(const ParkingClimate::DateTimeStruct &_timestamp, const ParkingClimate::ParkingTimers &_list, RequestTimerListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->requestTimerListAsync(_timestamp, _list, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &ParkingClimateProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool ParkingClimateProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool ParkingClimateProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& ParkingClimateProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& ParkingClimateProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace climate
} // namespace volvocars
} // namespace org
} // namespace v0

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v0::org::volvocars::climate::ParkingClimateProxy,
    _AttributeExtension> {
    typedef typename ::v0::org::volvocars::climate::ParkingClimateProxy<
            ::v0::org::volvocars::climate::ParkingClimateExtensions::PreConditioningAttributeExtension<_AttributeExtension>, 
            ::v0::org::volvocars::climate::ParkingClimateExtensions::PreCleaningAttributeExtension<_AttributeExtension>, 
            ::v0::org::volvocars::climate::ParkingClimateExtensions::PostConditioningAttributeExtension<_AttributeExtension>, 
            ::v0::org::volvocars::climate::ParkingClimateExtensions::SeatHeatDriverAttributeExtension<_AttributeExtension>, 
            ::v0::org::volvocars::climate::ParkingClimateExtensions::SeatHeatPassengerAttributeExtension<_AttributeExtension>, 
            ::v0::org::volvocars::climate::ParkingClimateExtensions::SteeringWheelHeatingAttributeExtension<_AttributeExtension>, 
            ::v0::org::volvocars::climate::ParkingClimateExtensions::PreCleaningNotificationAttributeExtension<_AttributeExtension>, 
            ::v0::org::volvocars::climate::ParkingClimateExtensions::MaxTimersAttributeExtension<_AttributeExtension>, 
            ::v0::org::volvocars::climate::ParkingClimateExtensions::TimerListAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVOCARS_CLIMATE_Parking_Climate_PROXY_HPP_
