/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_ORG_VOLVO_CONNECTIVITY_Wifi_Accesspoint_STUB_HPP_
#define V0_ORG_VOLVO_CONNECTIVITY_Wifi_Accesspoint_STUB_HPP_

#include <functional>



#include <v0/org/volvo/connectivity/IpCommandBusTypes.hpp>

#include <v0/org/volvo/connectivity/WifiAccesspoint.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <string>
#include <unordered_set>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace volvo {
namespace connectivity {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service WifiAccesspoint. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class WifiAccesspointStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual WifiAccesspoint {
 public:

    /**
     * Sends a broadcast event for NotifyConnectedDevicesListChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireNotifyConnectedDevicesListChangedEvent(const std::vector<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WLANConnDevice> &_connectedDevices) = 0;


    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for WifiAccesspoint.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class WifiAccesspointStubRemoteEvent
{
public:
    virtual ~WifiAccesspointStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service WifiAccesspoint to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class WifiAccesspointStub
    : public virtual CommonAPI::Stub<WifiAccesspointStubAdapter, WifiAccesspointStubRemoteEvent>
{
public:
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Ssid _newSsidApplied)>SetWlanApSsidReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanAPPassword _newPasswordApplied)>SetWlanApPasswordReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, std::vector<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WLANConnDevice> _connectedDevices)>GetConnectedDevicesListReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanApCurrentStatus _WLANAPCurrentStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Ssid _ssid, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanAPPassword _password, uint8_t _numberOfConnectedDevices, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanFrequencyBand _currentUsedFrequencyBand)>GetWlanApStatusSettingsReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanFrequencyBand _wLANCurrentFrequencyBand, std::vector<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanFrequencyBand> _availableFrequencyList)>SetWlanFrequencyBandReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanFrequencyBand _wLANCurrentFrequencyBand, std::vector<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanFrequencyBand> _availableFrequencyList)>GetWlanFrequencyBandReply_t;

    virtual ~WifiAccesspointStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;


    /// This is the method that will be called on remote calls on the method SetWlanApSsid.
    virtual void SetWlanApSsid(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Ssid _requestedNewSsid, SetWlanApSsidReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method SetWlanApPassword.
    virtual void SetWlanApPassword(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanAPPassword _requestedNewPassword, SetWlanApPasswordReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method GetConnectedDevicesList.
    virtual void GetConnectedDevicesList(const std::shared_ptr<CommonAPI::ClientId> _client, GetConnectedDevicesListReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method GetWlanApStatusSettings.
    virtual void GetWlanApStatusSettings(const std::shared_ptr<CommonAPI::ClientId> _client, GetWlanApStatusSettingsReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method SetWlanFrequencyBand.
    virtual void SetWlanFrequencyBand(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WlanFrequencyBand _wLANNewFrequencyBand, SetWlanFrequencyBandReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method GetWlanFrequencyBand.
    virtual void GetWlanFrequencyBand(const std::shared_ptr<CommonAPI::ClientId> _client, GetWlanFrequencyBandReply_t _reply) = 0;
    /// Sends a broadcast event for NotifyConnectedDevicesListChanged.
    virtual void fireNotifyConnectedDevicesListChangedEvent(const std::vector<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_WLANConnDevice> &_connectedDevices) = 0;

    using CommonAPI::Stub<WifiAccesspointStubAdapter, WifiAccesspointStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<WifiAccesspointStubAdapter, WifiAccesspointStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<WifiAccesspointStubAdapter, WifiAccesspointStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef WifiAccesspointStubRemoteEvent RemoteEventType;
    typedef WifiAccesspoint StubInterface;
};

} // namespace connectivity
} // namespace volvo
} // namespace org
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVO_CONNECTIVITY_Wifi_Accesspoint_STUB_HPP_
