/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: GNSS positioning franca service.
 */
#ifndef V0_ORG_VOLVO_CONNECTIVITY_Gnss_Service_STUB_HPP_
#define V0_ORG_VOLVO_CONNECTIVITY_Gnss_Service_STUB_HPP_

#include <functional>



#include <v0/org/volvo/connectivity/IpCommandBusTypes.hpp>

#include <v0/org/volvo/connectivity/GnssService.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <unordered_set>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace volvo {
namespace connectivity {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service GnssService. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class GnssServiceStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual GnssService {
 public:

    /**
     * Sends a broadcast event for UtcTime. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireUtcTimeEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_DateTime &_utcTime) = 0;
    /**
     * Sends a broadcast event for GpsTime. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireGpsTimeEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_GPSSystemTime &_gpsTime) = 0;
    /**
     * Sends a broadcast event for GeographicalPosition. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireGeographicalPositionEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_GeographicalPosition_WGS84 &_position) = 0;
    /**
     * Sends a broadcast event for Movement. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireMovementEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Velocity &_movement) = 0;
    /**
     * Sends a broadcast event for Heading. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireHeadingEvent(const uint32_t &_heading) = 0;
    /**
     * Sends a broadcast event for GnssStatus. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireGnssStatusEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_GNSSUsage &_gnssStatus) = 0;
    /**
     * Sends a broadcast event for PositioningStatus. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void firePositioningStatusEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_GNSSStatus &_positioningStatus) = 0;
    /**
     * Sends a broadcast event for SatelliteUsage. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireSatelliteUsageEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_SatelliteUsage &_satelliteInfo) = 0;
    /**
     * Sends a broadcast event for Precision. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void firePrecisionEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_DOPValues &_precision) = 0;
    /**
     * Sends a broadcast event for ReceiverChannels. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireReceiverChannelsEvent(const std::vector<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_ChannelData> &_receiverChannels) = 0;


    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for GnssService.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class GnssServiceStubRemoteEvent
{
public:
    virtual ~GnssServiceStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service GnssService to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class GnssServiceStub
    : public virtual CommonAPI::Stub<GnssServiceStubAdapter, GnssServiceStubRemoteEvent>
{
public:

    virtual ~GnssServiceStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;


    /**
     * description: The UTC time provided by the VCM, provided by GNSS (GPS, etc).
     */
    /// Sends a broadcast event for UtcTime.
    virtual void fireUtcTimeEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_DateTime &_utcTime) = 0;
    /**
     * description: The GPS time provided by the VCM. Prefer UTC time unless you explicitly
           
     *   need this type of time.
     */
    /// Sends a broadcast event for GpsTime.
    virtual void fireGpsTimeEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_GPSSystemTime &_gpsTime) = 0;
    /**
     * description: The raw geographical position provided by the VCM.
            Note that this type
     *   of position is not the optimal position in most cases. Prefer to use
           
     *   an enhanced (map matched, predicted, ...) position provided by
     *   EnhancedPositionService instead.
     */
    /// Sends a broadcast event for GeographicalPosition.
    virtual void fireGeographicalPositionEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_GeographicalPosition_WGS84 &_position) = 0;
    /**
     * description: Get speed, horizontal and vertical velocity, provided by the VCM.
     */
    /// Sends a broadcast event for Movement.
    virtual void fireMovementEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Velocity &_movement) = 0;
    /**
     * description: Heading provided by the VCM.
     */
    /// Sends a broadcast event for Heading.
    virtual void fireHeadingEvent(const uint32_t &_heading) = 0;
    /**
     * description: Gnss status provided by the VCM. Includes
            what type of positioning
     *   system is being used.
     */
    /// Sends a broadcast event for GnssStatus.
    virtual void fireGnssStatusEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_GNSSUsage &_gnssStatus) = 0;
    /**
     * description: Positioning status provided by the VCM. Includes
            fix type (do we have a
     *   GNSS fix?) and if DGPS is used.
     */
    /// Sends a broadcast event for PositioningStatus.
    virtual void firePositioningStatusEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_GNSSStatus &_positioningStatus) = 0;
    /**
     * description: Satellite information provided by the VCM. Includes
            Number of
     *   satellites visible and number of satellites used.
     */
    /// Sends a broadcast event for SatelliteUsage.
    virtual void fireSatelliteUsageEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_SatelliteUsage &_satelliteInfo) = 0;
    /**
     * description: Precision information provided by the VCM.
     */
    /// Sends a broadcast event for Precision.
    virtual void firePrecisionEvent(const ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_DOPValues &_precision) = 0;
    /**
     * description: Receiver channels information provided by the VCM.
     */
    /// Sends a broadcast event for ReceiverChannels.
    virtual void fireReceiverChannelsEvent(const std::vector<::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_ChannelData> &_receiverChannels) = 0;

    using CommonAPI::Stub<GnssServiceStubAdapter, GnssServiceStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<GnssServiceStubAdapter, GnssServiceStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<GnssServiceStubAdapter, GnssServiceStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef GnssServiceStubRemoteEvent RemoteEventType;
    typedef GnssService StubInterface;
};

} // namespace connectivity
} // namespace volvo
} // namespace org
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVO_CONNECTIVITY_Gnss_Service_STUB_HPP_
