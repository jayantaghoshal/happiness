/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This is the Common Phone franca interface
 */
#ifndef V0_ORG_VOLVO_CONNECTIVITY_Common_Phone_Telematics_STUB_HPP_
#define V0_ORG_VOLVO_CONNECTIVITY_Common_Phone_Telematics_STUB_HPP_

#include <functional>



#include <v0/org/volvo/connectivity/IpCommandBusTypes.hpp>

#include <v0/org/volvo/connectivity/CommonPhoneTelematics.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace volvo {
namespace connectivity {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service CommonPhoneTelematics. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class CommonPhoneTelematicsStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual CommonPhoneTelematics {
 public:



    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for CommonPhoneTelematics.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class CommonPhoneTelematicsStubRemoteEvent
{
public:
    virtual ~CommonPhoneTelematicsStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service CommonPhoneTelematics to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class CommonPhoneTelematicsStub
    : public virtual CommonAPI::Stub<CommonPhoneTelematicsStubAdapter, CommonPhoneTelematicsStubRemoteEvent>
{
public:
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error)>CallHandlingSetRequestReply_t;

    virtual ~CommonPhoneTelematicsStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;


    /**
     * description: (0x703 CallHandling 0x02 SetRequest)
            This operation is used to send
     *   command to TEM to accept an
            incoming call or hangup current call.
     */
    /// This is the method that will be called on remote calls on the method CallHandlingSetRequest.
    virtual void CallHandlingSetRequest(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::org::volvo::connectivity::IpCommandBusTypes::AssistCallAction _action, uint8_t _call_id, CallHandlingSetRequestReply_t _reply) = 0;

    using CommonAPI::Stub<CommonPhoneTelematicsStubAdapter, CommonPhoneTelematicsStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<CommonPhoneTelematicsStubAdapter, CommonPhoneTelematicsStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<CommonPhoneTelematicsStubAdapter, CommonPhoneTelematicsStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef CommonPhoneTelematicsStubRemoteEvent RemoteEventType;
    typedef CommonPhoneTelematics StubInterface;
};

} // namespace connectivity
} // namespace volvo
} // namespace org
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVO_CONNECTIVITY_Common_Phone_Telematics_STUB_HPP_
