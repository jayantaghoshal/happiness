/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_ORG_VOLVOCARS_VOLVOONCALL_Volvo_On_Call_Backend_PROXY_HPP_
#define V0_ORG_VOLVOCARS_VOLVOONCALL_Volvo_On_Call_Backend_PROXY_HPP_

#include <v0/org/volvocars/VolvoOnCall/VolvoOnCallBackendProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace volvocars {
namespace VolvoOnCall {

template <typename ... _AttributeExtensions>
class VolvoOnCallBackendProxy
    : virtual public VolvoOnCallBackend, 
      virtual public VolvoOnCallBackendProxyBase,
      virtual public _AttributeExtensions... {
public:
    VolvoOnCallBackendProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~VolvoOnCallBackendProxy();

    typedef VolvoOnCallBackend InterfaceType;




    /**
     * description: (TextMessage 0x0106 SetRequest 0x02)
            This message is used for general
     *   text messages and received SMS from Customer Service Center, sent to TEM
     * Calls TextMessageSetRequest with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void TextMessageSetRequest(const ::v0::org::volvo::connectivity::IpCommandBusTypes::SourceStatus &_sourceStatus, const std::string &_source, const std::string &_text, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls TextMessageSetRequest with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> TextMessageSetRequestAsync(const ::v0::org::volvo::connectivity::IpCommandBusTypes::SourceStatus &_sourceStatus, const std::string &_source, const std::string &_text, TextMessageSetRequestAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<VolvoOnCallBackendProxyBase> delegate_;
};

typedef VolvoOnCallBackendProxy<> VolvoOnCallBackendProxyDefault;


//
// VolvoOnCallBackendProxy Implementation
//
template <typename ... _AttributeExtensions>
VolvoOnCallBackendProxy<_AttributeExtensions...>::VolvoOnCallBackendProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<VolvoOnCallBackendProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<VolvoOnCallBackendProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
VolvoOnCallBackendProxy<_AttributeExtensions...>::~VolvoOnCallBackendProxy() {
}

/**
 * description: (TextMessage 0x0106 SetRequest 0x02)
        This message is used for general
 *   text messages and received SMS from Customer Service Center, sent to TEM
 */
template <typename ... _AttributeExtensions>
void VolvoOnCallBackendProxy<_AttributeExtensions...>::TextMessageSetRequest(const ::v0::org::volvo::connectivity::IpCommandBusTypes::SourceStatus &_sourceStatus, const std::string &_source, const std::string &_text, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors &_error, const CommonAPI::CallInfo *_info) {
    if (!_sourceStatus.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->TextMessageSetRequest(_sourceStatus, _source, _text, _internalCallStatus, _error, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> VolvoOnCallBackendProxy<_AttributeExtensions...>::TextMessageSetRequestAsync(const ::v0::org::volvo::connectivity::IpCommandBusTypes::SourceStatus &_sourceStatus, const std::string &_source, const std::string &_text, TextMessageSetRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_sourceStatus.validate()) {
        ::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors error;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, error);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->TextMessageSetRequestAsync(_sourceStatus, _source, _text, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &VolvoOnCallBackendProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool VolvoOnCallBackendProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool VolvoOnCallBackendProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& VolvoOnCallBackendProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& VolvoOnCallBackendProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace VolvoOnCall
} // namespace volvocars
} // namespace org
} // namespace v0



// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVOCARS_VOLVOONCALL_Volvo_On_Call_Backend_PROXY_HPP_
