/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This is the CarModem interface on IP Command Bus
 */
#ifndef V0_ORG_VOLVO_CONNECTIVITY_CAR_MODEM_HPP_
#define V0_ORG_VOLVO_CONNECTIVITY_CAR_MODEM_HPP_


#include <v0/org/volvo/connectivity/IpCommandBusTypes.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace volvo {
namespace connectivity {

class CarModem {
public:
    virtual ~CarModem() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    struct CarModem_ApnConfigurationStatus : CommonAPI::Struct<bool, bool, ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_ApnConfiguration> {
    	
    	CarModem_ApnConfigurationStatus() {
    		std::get<0>(values_) = false;
    		std::get<1>(values_) = false;
    	}
    	CarModem_ApnConfigurationStatus(const bool &_dataValid, const bool &_existsOptionalConfiguration, const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_ApnConfiguration &_configuration)
    	{
    		std::get<0>(values_) = _dataValid;
    		std::get<1>(values_) = _existsOptionalConfiguration;
    		std::get<2>(values_) = _configuration;
    	}
    	inline const bool &getDataValid() const { return std::get<0>(values_); }
    	inline void setDataValid(const bool _value) { std::get<0>(values_) = _value; }
    	inline const bool &getExistsOptionalConfiguration() const { return std::get<1>(values_); }
    	inline void setExistsOptionalConfiguration(const bool _value) { std::get<1>(values_) = _value; }
    	inline const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_ApnConfiguration &getConfiguration() const { return std::get<2>(values_); }
    	inline void setConfiguration(const ::v0::org::volvo::connectivity::IpCommandBusTypes::CarModem_ApnConfiguration &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const CarModem_ApnConfigurationStatus& _other) const {
                return (getDataValid() == _other.getDataValid() && getExistsOptionalConfiguration() == _other.getExistsOptionalConfiguration() && getConfiguration() == _other.getConfiguration());
        }
    	inline bool operator!=(const CarModem_ApnConfigurationStatus &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct CarModem_UssdStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            Successful = 0,
            Rejected = 1,
            Timeout = 2,
            NetInit = 3
        };
        
        CarModem_UssdStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::Successful)) {}
        CarModem_UssdStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::Successful):
                case static_cast<int32_t>(Literal::Rejected):
                case static_cast<int32_t>(Literal::Timeout):
                case static_cast<int32_t>(Literal::NetInit):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CarModem_UssdStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CarModem_UssdStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CarModem_UssdStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CarModem_UssdStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CarModem_UssdStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CarModem_UssdStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
};

const char* CarModem::getInterface() {
    return ("org.volvo.connectivity.CarModem");
}

CommonAPI::Version CarModem::getInterfaceVersion() {
    return CommonAPI::Version(0, 1);
}


} // namespace connectivity
} // namespace volvo
} // namespace org
} // namespace v0

namespace CommonAPI {
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVO_CONNECTIVITY_CAR_MODEM_HPP_
