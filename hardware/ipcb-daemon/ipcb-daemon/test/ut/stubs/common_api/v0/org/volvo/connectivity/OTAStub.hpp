/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This is the FB OTA interface on IP Command Bus
 */
#ifndef V0_ORG_VOLVO_CONNECTIVITY_OTA_STUB_HPP_
#define V0_ORG_VOLVO_CONNECTIVITY_OTA_STUB_HPP_

#include <functional>



#include <v0/org/volvo/connectivity/IpCommandBusTypes.hpp>
#include <v0/org/volvo/connectivity/OTATypes.hpp>

#include <v0/org/volvo/connectivity/OTA.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <unordered_set>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace volvo {
namespace connectivity {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service OTA. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class OTAStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual OTA {
 public:

    /**
     * Sends a broadcast event for DownloadStatusNotification. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireDownloadStatusNotificationEvent(const ::v0::org::volvo::connectivity::OTATypes::DownloadStatus &_downloadStatus, const std::vector<::v0::org::volvo::connectivity::OTATypes::SoftwareProduct> &_downloadList) = 0;


    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for OTA.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class OTAStubRemoteEvent
{
public:
    virtual ~OTAStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service OTA to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class OTAStub
    : public virtual CommonAPI::Stub<OTAStubAdapter, OTAStubRemoteEvent>
{
public:
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, ::v0::org::volvo::connectivity::OTATypes::DownloadStatus _downloadStatus, std::vector<::v0::org::volvo::connectivity::OTATypes::SoftwareProduct> _downloadList)>DownloadStatusRequestReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error)>DownloadSoftwareSetRequestReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error)>DeletedSoftwareSetRequestReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error, ::v0::org::volvo::connectivity::OTATypes::GenericOkStatus _status)>CancelDownloadSetRequestReply_t;

    virtual ~OTAStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;


    /**
     * description: DownloadStatus (0x0B01)
                          This signal is sent by the VCM
     *   when status of current
                          download or installation is
     *   changed. It shall be used to
                          populate the OTA HMI.
     */
    /// This is the method that will be called on remote calls on the method DownloadStatusRequest.
    virtual void DownloadStatusRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DownloadStatusRequestReply_t _reply) = 0;
    /**
     * description: DownloadSoftware (0x0B02)
                          This operation is used when IHU
     *   HMI requests VCM to start
                          downloading software.
     */
    /// This is the method that will be called on remote calls on the method DownloadSoftwareSetRequest.
    virtual void DownloadSoftwareSetRequest(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector<::v0::org::volvo::connectivity::OTATypes::UUID> _downloadList, DownloadSoftwareSetRequestReply_t _reply) = 0;
    /**
     * description: DeletedSoftware (0x0B03)
                          This operation is used when IHU
     *   requests VCM to inform
                          VCC back end systems that
     *   software has been deleted.
     */
    /// This is the method that will be called on remote calls on the method DeletedSoftwareSetRequest.
    virtual void DeletedSoftwareSetRequest(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector<::v0::org::volvo::connectivity::OTATypes::PartIdentifier> _deletedSoftware, DeletedSoftwareSetRequestReply_t _reply) = 0;
    /**
     * description: CancelDownload (0x0B05)
                          This operation is used when IHU
     *   HMI requests VCM to cancel
                          a currently ongoing download
     *   of software.
     */
    /// This is the method that will be called on remote calls on the method CancelDownloadSetRequest.
    virtual void CancelDownloadSetRequest(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::org::volvo::connectivity::OTATypes::UUID _software, CancelDownloadSetRequestReply_t _reply) = 0;
    /// Sends a broadcast event for DownloadStatusNotification.
    virtual void fireDownloadStatusNotificationEvent(const ::v0::org::volvo::connectivity::OTATypes::DownloadStatus &_downloadStatus, const std::vector<::v0::org::volvo::connectivity::OTATypes::SoftwareProduct> &_downloadList) = 0;

    using CommonAPI::Stub<OTAStubAdapter, OTAStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<OTAStubAdapter, OTAStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<OTAStubAdapter, OTAStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef OTAStubRemoteEvent RemoteEventType;
    typedef OTA StubInterface;
};

} // namespace connectivity
} // namespace volvo
} // namespace org
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVO_CONNECTIVITY_OTA_STUB_HPP_
