/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_ORG_VOLVO_CONNECTIVITY_Workshop_Wlan_STUB_HPP_
#define V0_ORG_VOLVO_CONNECTIVITY_Workshop_Wlan_STUB_HPP_

#include <functional>



#include <v0/org/volvo/connectivity/IpCommandBusTypes.hpp>

#include <v0/org/volvo/connectivity/WorkshopWlan.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <unordered_set>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace volvo {
namespace connectivity {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service WorkshopWlan. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class WorkshopWlanStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual WorkshopWlan {
 public:

    /**
     * Sends a broadcast event for ConnectWorkshopWlanNotification. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireConnectWorkshopWlanNotificationEvent(const ::v0::org::volvo::connectivity::WorkshopWlan::WorkshopWlanConnectionResult &_connection_result) = 0;
    /**
     * Sends a broadcast event for WorkshopWlanDetected. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireWorkshopWlanDetectedEvent(const ::v0::org::volvo::connectivity::WorkshopWlan::DaCMode &_mode, const bool &_nomadic_device_present) = 0;


    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for WorkshopWlan.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class WorkshopWlanStubRemoteEvent
{
public:
    virtual ~WorkshopWlanStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service WorkshopWlan to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class WorkshopWlanStub
    : public virtual CommonAPI::Stub<WorkshopWlanStubAdapter, WorkshopWlanStubRemoteEvent>
{
public:
    typedef std::function<void ()>ConnectWorkshopWlanSetRequestNoReturnReply_t;
    typedef std::function<void (::v0::org::volvo::connectivity::IpCommandBusTypes::Infotainment_IP_bus_Errors _error)>UpdateDaCModeReply_t;

    virtual ~WorkshopWlanStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;


    /**
     * description: (0x030B ConnectWorkshopWlan 0x01 SetRequestNoReturn)
            This operation is
     *   used to connect to a workshop over WLAN when the client requests for it
     */
    /// This is the method that will be called on remote calls on the method ConnectWorkshopWlanSetRequestNoReturn.
    virtual void ConnectWorkshopWlanSetRequestNoReturn(const std::shared_ptr<CommonAPI::ClientId> _client, ConnectWorkshopWlanSetRequestNoReturnReply_t _reply) = 0;
    /**
     * description: (0x0A0B UpdateDaCMode 0x05 Notification)
             Notify VCM about current
     *   DACMode
     */
    /// This is the method that will be called on remote calls on the method UpdateDaCMode.
    virtual void UpdateDaCMode(const std::shared_ptr<CommonAPI::ClientId> _client, WorkshopWlan::DaCMode _update_dac_mode, UpdateDaCModeReply_t _reply) = 0;
    /**
     * description: (0x030B ConnectWorkshopWlan 0x05 Notification)
            VCM notifies IHU with
     *   the result of the connection attempt
     */
    /// Sends a broadcast event for ConnectWorkshopWlanNotification.
    virtual void fireConnectWorkshopWlanNotificationEvent(const ::v0::org::volvo::connectivity::WorkshopWlan::WorkshopWlanConnectionResult &_connection_result) = 0;
    /**
     * description: (0x0030C WorkshopWlanDetected 0x05 Notification)
             Server needs to
     *   inform client that a Volvo Dealer Workshop has been detected and can be
     *   connected to.
             This signal is only used for the semi-automatic and
     *   automatic detection
     */
    /// Sends a broadcast event for WorkshopWlanDetected.
    virtual void fireWorkshopWlanDetectedEvent(const ::v0::org::volvo::connectivity::WorkshopWlan::DaCMode &_mode, const bool &_nomadic_device_present) = 0;

    using CommonAPI::Stub<WorkshopWlanStubAdapter, WorkshopWlanStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<WorkshopWlanStubAdapter, WorkshopWlanStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<WorkshopWlanStubAdapter, WorkshopWlanStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef WorkshopWlanStubRemoteEvent RemoteEventType;
    typedef WorkshopWlan StubInterface;
};

} // namespace connectivity
} // namespace volvo
} // namespace org
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVO_CONNECTIVITY_Workshop_Wlan_STUB_HPP_
