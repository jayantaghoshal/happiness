/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_ORG_VOLVO_CONNECTIVITY_Diagnostic_Management_Authentication_PROXY_HPP_
#define V0_ORG_VOLVO_CONNECTIVITY_Diagnostic_Management_Authentication_PROXY_HPP_

#include <v0/org/volvo/connectivity/DiagnosticManagementAuthenticationProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace volvo {
namespace connectivity {

template <typename ... _AttributeExtensions>
class DiagnosticManagementAuthenticationProxy
    : virtual public DiagnosticManagementAuthentication, 
      virtual public DiagnosticManagementAuthenticationProxyBase,
      virtual public _AttributeExtensions... {
public:
    DiagnosticManagementAuthenticationProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~DiagnosticManagementAuthenticationProxy();

    typedef DiagnosticManagementAuthentication InterfaceType;




    /**
     * description: -- OperationID: RequestUserAuthentication (0x0A03)
     * Calls RequestUserAuthentication with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void RequestUserAuthentication(const std::string &_operatorName, const std::string &_serviceOrg, const uint32_t &_sessionSafetyCode, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::DiagMgm_UserAuthCredentials &_userAuthCredentials, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls RequestUserAuthentication with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> RequestUserAuthenticationAsync(const std::string &_operatorName, const std::string &_serviceOrg, const uint32_t &_sessionSafetyCode, RequestUserAuthenticationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: -- OperationID: TextFromOperatorToUser (0x0A04)
     * Calls TextFromOperatorToUser with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void TextFromOperatorToUser(const std::string &_textChatMessage, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls TextFromOperatorToUser with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> TextFromOperatorToUserAsync(const std::string &_textChatMessage, TextFromOperatorToUserAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<DiagnosticManagementAuthenticationProxyBase> delegate_;
};

typedef DiagnosticManagementAuthenticationProxy<> DiagnosticManagementAuthenticationProxyDefault;


//
// DiagnosticManagementAuthenticationProxy Implementation
//
template <typename ... _AttributeExtensions>
DiagnosticManagementAuthenticationProxy<_AttributeExtensions...>::DiagnosticManagementAuthenticationProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<DiagnosticManagementAuthenticationProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<DiagnosticManagementAuthenticationProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
DiagnosticManagementAuthenticationProxy<_AttributeExtensions...>::~DiagnosticManagementAuthenticationProxy() {
}

/**
 * description: -- OperationID: RequestUserAuthentication (0x0A03)
 */
template <typename ... _AttributeExtensions>
void DiagnosticManagementAuthenticationProxy<_AttributeExtensions...>::RequestUserAuthentication(const std::string &_operatorName, const std::string &_serviceOrg, const uint32_t &_sessionSafetyCode, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::DiagMgm_UserAuthCredentials &_userAuthCredentials, const CommonAPI::CallInfo *_info) {
    delegate_->RequestUserAuthentication(_operatorName, _serviceOrg, _sessionSafetyCode, _internalCallStatus, _userAuthCredentials, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> DiagnosticManagementAuthenticationProxy<_AttributeExtensions...>::RequestUserAuthenticationAsync(const std::string &_operatorName, const std::string &_serviceOrg, const uint32_t &_sessionSafetyCode, RequestUserAuthenticationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->RequestUserAuthenticationAsync(_operatorName, _serviceOrg, _sessionSafetyCode, _callback, _info);
}
/**
 * description: -- OperationID: TextFromOperatorToUser (0x0A04)
 */
template <typename ... _AttributeExtensions>
void DiagnosticManagementAuthenticationProxy<_AttributeExtensions...>::TextFromOperatorToUser(const std::string &_textChatMessage, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->TextFromOperatorToUser(_textChatMessage, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> DiagnosticManagementAuthenticationProxy<_AttributeExtensions...>::TextFromOperatorToUserAsync(const std::string &_textChatMessage, TextFromOperatorToUserAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->TextFromOperatorToUserAsync(_textChatMessage, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &DiagnosticManagementAuthenticationProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool DiagnosticManagementAuthenticationProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool DiagnosticManagementAuthenticationProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& DiagnosticManagementAuthenticationProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& DiagnosticManagementAuthenticationProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace connectivity
} // namespace volvo
} // namespace org
} // namespace v0



// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVO_CONNECTIVITY_Diagnostic_Management_Authentication_PROXY_HPP_
