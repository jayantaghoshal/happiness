/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_ORG_VOLVOCARS_PRIVACYPOLICY_Rvdc_PROXY_HPP_
#define V0_ORG_VOLVOCARS_PRIVACYPOLICY_Rvdc_PROXY_HPP_

#include <v0/org/volvocars/privacypolicy/RvdcProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace volvocars {
namespace privacypolicy {

template <typename ... _AttributeExtensions>
class RvdcProxy
    : virtual public Rvdc, 
      virtual public RvdcProxyBase,
      virtual public _AttributeExtensions... {
public:
    RvdcProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~RvdcProxy();

    typedef Rvdc InterfaceType;


    /**
     * Returns the wrapper class that provides access to the attribute approvalstatuses.
     */
    virtual ApprovalstatusesAttribute& getApprovalstatusesAttribute() {
        return delegate_->getApprovalstatusesAttribute();
    }




    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<RvdcProxyBase> delegate_;
};

typedef RvdcProxy<> RvdcProxyDefault;

namespace RvdcExtensions {
    template <template <typename > class _ExtensionType>
    class ApprovalstatusesAttributeExtension {
     public:
        typedef _ExtensionType<RvdcProxyBase::ApprovalstatusesAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<RvdcProxyBase::ApprovalstatusesAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        ApprovalstatusesAttributeExtension() {}
    #endif
    
        ApprovalstatusesAttributeExtension(RvdcProxyBase& proxy): attributeExtension_(proxy.getApprovalstatusesAttribute()) {
        }
    
        inline extension_type& getApprovalstatusesAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace RvdcExtensions

//
// RvdcProxy Implementation
//
template <typename ... _AttributeExtensions>
RvdcProxy<_AttributeExtensions...>::RvdcProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<RvdcProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<RvdcProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
RvdcProxy<_AttributeExtensions...>::~RvdcProxy() {
}


template <typename ... _AttributeExtensions>
const CommonAPI::Address &RvdcProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool RvdcProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool RvdcProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& RvdcProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& RvdcProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace privacypolicy
} // namespace volvocars
} // namespace org
} // namespace v0

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v0::org::volvocars::privacypolicy::RvdcProxy,
    _AttributeExtension> {
    typedef typename ::v0::org::volvocars::privacypolicy::RvdcProxy<
            ::v0::org::volvocars::privacypolicy::RvdcExtensions::ApprovalstatusesAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVOCARS_PRIVACYPOLICY_Rvdc_PROXY_HPP_
