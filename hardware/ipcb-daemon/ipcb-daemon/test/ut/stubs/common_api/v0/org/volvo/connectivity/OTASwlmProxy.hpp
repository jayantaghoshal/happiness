/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This is the FB OTA Software Loading Manager interface on IP Command Bus
 */
#ifndef V0_ORG_VOLVO_CONNECTIVITY_OTA_Swlm_PROXY_HPP_
#define V0_ORG_VOLVO_CONNECTIVITY_OTA_Swlm_PROXY_HPP_

#include <v0/org/volvo/connectivity/OTASwlmProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace volvo {
namespace connectivity {

template <typename ... _AttributeExtensions>
class OTASwlmProxy
    : virtual public OTASwlm, 
      virtual public OTASwlmProxyBase,
      virtual public _AttributeExtensions... {
public:
    OTASwlmProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~OTASwlmProxy();

    typedef OTASwlm InterfaceType;



    /**
     * Returns the wrapper class that provides access to the broadcast DeviceInstallNotification.
     */
    virtual DeviceInstallNotificationEvent& getDeviceInstallNotificationEvent() {
        return delegate_->getDeviceInstallNotificationEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast LocalStorageNotification.
     */
    virtual LocalStorageNotificationEvent& getLocalStorageNotificationEvent() {
        return delegate_->getLocalStorageNotificationEvent();
    }

    /**
     * description: (0x0B04 DeviceInstall)
            This operation is used when VCM requests
     *   installers on IHU and/or TEM to start install software.
            When to send
     *   this signal is further described in SRD Infotainment Platform.
     * Calls DeviceInstallSetRequest with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void DeviceInstallSetRequest(const ::v0::org::volvo::connectivity::OTATypes::InstallCommand &_installCommand, const std::vector<::v0::org::volvo::connectivity::OTATypes::InstallationData> &_installList, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::OTATypes::InstallStatus &_status, ::v0::org::volvo::connectivity::OTATypes::InstallProgress &_installProgress, std::vector<::v0::org::volvo::connectivity::OTATypes::InstalledData> &_installedList, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls DeviceInstallSetRequest with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> DeviceInstallSetRequestAsync(const ::v0::org::volvo::connectivity::OTATypes::InstallCommand &_installCommand, const std::vector<::v0::org::volvo::connectivity::OTATypes::InstallationData> &_installList, DeviceInstallSetRequestAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls DeviceInstallRequest with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void DeviceInstallRequest(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::OTATypes::InstallStatus &_status, ::v0::org::volvo::connectivity::OTATypes::InstallProgress &_installProgress, std::vector<::v0::org::volvo::connectivity::OTATypes::InstalledData> &_installedList, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls DeviceInstallRequest with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> DeviceInstallRequestAsync(DeviceInstallRequestAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: (0x0B06 LocalStorage-Request)
            This operation is used by IHU to
     *   distribute if the Local Storage area can be accessed.
     * Calls LocalStorageRequest with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void LocalStorageRequest(CommonAPI::CallStatus &_internalCallStatus, bool &_available, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls LocalStorageRequest with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> LocalStorageRequestAsync(LocalStorageRequestAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<OTASwlmProxyBase> delegate_;
};

typedef OTASwlmProxy<> OTASwlmProxyDefault;


//
// OTASwlmProxy Implementation
//
template <typename ... _AttributeExtensions>
OTASwlmProxy<_AttributeExtensions...>::OTASwlmProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<OTASwlmProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<OTASwlmProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
OTASwlmProxy<_AttributeExtensions...>::~OTASwlmProxy() {
}

/**
 * description: (0x0B04 DeviceInstall)
        This operation is used when VCM requests
 *   installers on IHU and/or TEM to start install software.
        When to send
 *   this signal is further described in SRD Infotainment Platform.
 */
template <typename ... _AttributeExtensions>
void OTASwlmProxy<_AttributeExtensions...>::DeviceInstallSetRequest(const ::v0::org::volvo::connectivity::OTATypes::InstallCommand &_installCommand, const std::vector<::v0::org::volvo::connectivity::OTATypes::InstallationData> &_installList, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::OTATypes::InstallStatus &_status, ::v0::org::volvo::connectivity::OTATypes::InstallProgress &_installProgress, std::vector<::v0::org::volvo::connectivity::OTATypes::InstalledData> &_installedList, const CommonAPI::CallInfo *_info) {
    if (!_installCommand.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->DeviceInstallSetRequest(_installCommand, _installList, _internalCallStatus, _status, _installProgress, _installedList, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> OTASwlmProxy<_AttributeExtensions...>::DeviceInstallSetRequestAsync(const ::v0::org::volvo::connectivity::OTATypes::InstallCommand &_installCommand, const std::vector<::v0::org::volvo::connectivity::OTATypes::InstallationData> &_installList, DeviceInstallSetRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_installCommand.validate()) {
        ::v0::org::volvo::connectivity::OTATypes::InstallStatus status = ::v0::org::volvo::connectivity::OTATypes::InstallStatus::idle;
        ::v0::org::volvo::connectivity::OTATypes::InstallProgress installProgress = 0u;
        std::vector<::v0::org::volvo::connectivity::OTATypes::InstalledData> installedList = {};
        _callback(CommonAPI::CallStatus::INVALID_VALUE, status, installProgress, installedList);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->DeviceInstallSetRequestAsync(_installCommand, _installList, _callback, _info);
}
template <typename ... _AttributeExtensions>
void OTASwlmProxy<_AttributeExtensions...>::DeviceInstallRequest(CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::OTATypes::InstallStatus &_status, ::v0::org::volvo::connectivity::OTATypes::InstallProgress &_installProgress, std::vector<::v0::org::volvo::connectivity::OTATypes::InstalledData> &_installedList, const CommonAPI::CallInfo *_info) {
    delegate_->DeviceInstallRequest(_internalCallStatus, _status, _installProgress, _installedList, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> OTASwlmProxy<_AttributeExtensions...>::DeviceInstallRequestAsync(DeviceInstallRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->DeviceInstallRequestAsync(_callback, _info);
}
/**
 * description: (0x0B06 LocalStorage-Request)
        This operation is used by IHU to
 *   distribute if the Local Storage area can be accessed.
 */
template <typename ... _AttributeExtensions>
void OTASwlmProxy<_AttributeExtensions...>::LocalStorageRequest(CommonAPI::CallStatus &_internalCallStatus, bool &_available, const CommonAPI::CallInfo *_info) {
    delegate_->LocalStorageRequest(_internalCallStatus, _available, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> OTASwlmProxy<_AttributeExtensions...>::LocalStorageRequestAsync(LocalStorageRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->LocalStorageRequestAsync(_callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &OTASwlmProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool OTASwlmProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool OTASwlmProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& OTASwlmProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& OTASwlmProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace connectivity
} // namespace volvo
} // namespace org
} // namespace v0



// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVO_CONNECTIVITY_OTA_Swlm_PROXY_HPP_
