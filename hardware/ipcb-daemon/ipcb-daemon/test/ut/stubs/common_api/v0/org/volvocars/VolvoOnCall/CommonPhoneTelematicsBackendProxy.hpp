/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This is the Common Phone/ Telematics backend franca interface
 */
#ifndef V0_ORG_VOLVOCARS_VOLVOONCALL_Common_Phone_Telematics_Backend_PROXY_HPP_
#define V0_ORG_VOLVOCARS_VOLVOONCALL_Common_Phone_Telematics_Backend_PROXY_HPP_

#include <v0/org/volvocars/VolvoOnCall/CommonPhoneTelematicsBackendProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace volvocars {
namespace VolvoOnCall {

template <typename ... _AttributeExtensions>
class CommonPhoneTelematicsBackendProxy
    : virtual public CommonPhoneTelematicsBackend, 
      virtual public CommonPhoneTelematicsBackendProxyBase,
      virtual public _AttributeExtensions... {
public:
    CommonPhoneTelematicsBackendProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~CommonPhoneTelematicsBackendProxy();

    typedef CommonPhoneTelematicsBackend InterfaceType;



    /**
     * description: (0x0702  PremiumAudio 0x05 Notification)
     */
    /**
     * Returns the wrapper class that provides access to the broadcast PremiumAudioNotification.
     */
    virtual PremiumAudioNotificationEvent& getPremiumAudioNotificationEvent() {
        return delegate_->getPremiumAudioNotificationEvent();
    }

    /**
     * description: (0x0702  PremiumAudio 0x02 SetRequest)
        Enables TEM to request handsfree
     *   sound through the IHU. 
        The IHU shall give audio and microphone resources
     *   to telematics when
        OpPremiumAudio-SetRequest (UniqueID: 0x0702 OpType:
     *   0x02) with isRequested=true.
     * Calls PremiumAudioSetRequest with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void PremiumAudioSetRequest(const bool &_is_requested, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::AudioStatus &_premium_audio_status, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls PremiumAudioSetRequest with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> PremiumAudioSetRequestAsync(const bool &_is_requested, PremiumAudioSetRequestAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<CommonPhoneTelematicsBackendProxyBase> delegate_;
};

typedef CommonPhoneTelematicsBackendProxy<> CommonPhoneTelematicsBackendProxyDefault;


//
// CommonPhoneTelematicsBackendProxy Implementation
//
template <typename ... _AttributeExtensions>
CommonPhoneTelematicsBackendProxy<_AttributeExtensions...>::CommonPhoneTelematicsBackendProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<CommonPhoneTelematicsBackendProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<CommonPhoneTelematicsBackendProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
CommonPhoneTelematicsBackendProxy<_AttributeExtensions...>::~CommonPhoneTelematicsBackendProxy() {
}

/**
 * description: (0x0702  PremiumAudio 0x02 SetRequest)
    Enables TEM to request handsfree
 *   sound through the IHU. 
    The IHU shall give audio and microphone resources
 *   to telematics when
    OpPremiumAudio-SetRequest (UniqueID: 0x0702 OpType:
 *   0x02) with isRequested=true.
 */
template <typename ... _AttributeExtensions>
void CommonPhoneTelematicsBackendProxy<_AttributeExtensions...>::PremiumAudioSetRequest(const bool &_is_requested, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvo::connectivity::IpCommandBusTypes::AudioStatus &_premium_audio_status, const CommonAPI::CallInfo *_info) {
    delegate_->PremiumAudioSetRequest(_is_requested, _internalCallStatus, _premium_audio_status, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CommonPhoneTelematicsBackendProxy<_AttributeExtensions...>::PremiumAudioSetRequestAsync(const bool &_is_requested, PremiumAudioSetRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->PremiumAudioSetRequestAsync(_is_requested, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &CommonPhoneTelematicsBackendProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool CommonPhoneTelematicsBackendProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool CommonPhoneTelematicsBackendProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& CommonPhoneTelematicsBackendProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& CommonPhoneTelematicsBackendProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace VolvoOnCall
} // namespace volvocars
} // namespace org
} // namespace v0



// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVOCARS_VOLVOONCALL_Common_Phone_Telematics_Backend_PROXY_HPP_
