/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_ORG_VOLVOCARS_CLIMATE_Parking_Climate_PROXY_BASE_HPP_
#define V0_ORG_VOLVOCARS_CLIMATE_Parking_Climate_PROXY_BASE_HPP_

#include <v0/org/volvocars/climate/ParkingClimate.hpp>


#include <v0/org/volvocars/climate/CommonTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace volvocars {
namespace climate {

class ParkingClimateProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::org::volvocars::climate::ParkingClimate::ParkingClimateState> PreConditioningAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::org::volvocars::climate::ParkingClimate::ParkingClimateState> PreCleaningAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::org::volvocars::climate::ParkingClimate::ParkingClimateState> PostConditioningAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::org::volvocars::climate::ParkingClimate::PreConditioningSettingState> SeatHeatDriverAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::org::volvocars::climate::ParkingClimate::PreConditioningSettingState> SeatHeatPassengerAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::org::volvocars::climate::ParkingClimate::PreConditioningSettingState> SteeringWheelHeatingAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::org::volvocars::climate::ParkingClimate::PreCleaningNotificationState> PreCleaningNotificationAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<uint32_t> MaxTimersAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::org::volvocars::climate::ParkingClimate::ParkingTimers> TimerListAttribute;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::org::volvocars::climate::CommonTypes::ReturnCode&)> RequestPreConditioningAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::org::volvocars::climate::CommonTypes::ReturnCode&)> RequestPreCleaningAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::org::volvocars::climate::CommonTypes::ReturnCode&)> RequestPostConditioningAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::org::volvocars::climate::CommonTypes::ReturnCode&)> RequestSeatHeatDriverAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::org::volvocars::climate::CommonTypes::ReturnCode&)> RequestSeatHeatPassengerAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::org::volvocars::climate::CommonTypes::ReturnCode&)> RequestSteeringWheelHeatingAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::org::volvocars::climate::CommonTypes::ReturnCode&)> RequestTimerListAsyncCallback;

    virtual PreConditioningAttribute& getPreConditioningAttribute() = 0;
    virtual PreCleaningAttribute& getPreCleaningAttribute() = 0;
    virtual PostConditioningAttribute& getPostConditioningAttribute() = 0;
    virtual SeatHeatDriverAttribute& getSeatHeatDriverAttribute() = 0;
    virtual SeatHeatPassengerAttribute& getSeatHeatPassengerAttribute() = 0;
    virtual SteeringWheelHeatingAttribute& getSteeringWheelHeatingAttribute() = 0;
    virtual PreCleaningNotificationAttribute& getPreCleaningNotificationAttribute() = 0;
    virtual MaxTimersAttribute& getMaxTimersAttribute() = 0;
    virtual TimerListAttribute& getTimerListAttribute() = 0;


    virtual void requestPreConditioning(const ParkingClimate::ParkingClimateRequest &_value, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvocars::climate::CommonTypes::ReturnCode &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestPreConditioningAsync(const ParkingClimate::ParkingClimateRequest &_value, RequestPreConditioningAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void requestPreCleaning(const ParkingClimate::ParkingClimateRequest &_value, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvocars::climate::CommonTypes::ReturnCode &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestPreCleaningAsync(const ParkingClimate::ParkingClimateRequest &_value, RequestPreCleaningAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void requestPostConditioning(const ParkingClimate::ParkingClimateRequest &_value, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvocars::climate::CommonTypes::ReturnCode &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestPostConditioningAsync(const ParkingClimate::ParkingClimateRequest &_value, RequestPostConditioningAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void requestSeatHeatDriver(const ParkingClimate::DateTimeStruct &_timestamp, const ParkingClimate::PreConditioningSettingRequest &_value, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvocars::climate::CommonTypes::ReturnCode &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestSeatHeatDriverAsync(const ParkingClimate::DateTimeStruct &_timestamp, const ParkingClimate::PreConditioningSettingRequest &_value, RequestSeatHeatDriverAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void requestSeatHeatPassenger(const ParkingClimate::DateTimeStruct &_timestamp, const ParkingClimate::PreConditioningSettingRequest &_value, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvocars::climate::CommonTypes::ReturnCode &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestSeatHeatPassengerAsync(const ParkingClimate::DateTimeStruct &_timestamp, const ParkingClimate::PreConditioningSettingRequest &_value, RequestSeatHeatPassengerAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void requestSteeringWheelHeating(const ParkingClimate::DateTimeStruct &_timestamp, const ParkingClimate::PreConditioningSettingRequest &_value, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvocars::climate::CommonTypes::ReturnCode &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestSteeringWheelHeatingAsync(const ParkingClimate::DateTimeStruct &_timestamp, const ParkingClimate::PreConditioningSettingRequest &_value, RequestSteeringWheelHeatingAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void requestTimerList(const ParkingClimate::DateTimeStruct &_timestamp, const ParkingClimate::ParkingTimers &_list, CommonAPI::CallStatus &_internalCallStatus, ::v0::org::volvocars::climate::CommonTypes::ReturnCode &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestTimerListAsync(const ParkingClimate::DateTimeStruct &_timestamp, const ParkingClimate::ParkingTimers &_list, RequestTimerListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace climate
} // namespace volvocars
} // namespace org
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVOCARS_CLIMATE_Parking_Climate_PROXY_BASE_HPP_
