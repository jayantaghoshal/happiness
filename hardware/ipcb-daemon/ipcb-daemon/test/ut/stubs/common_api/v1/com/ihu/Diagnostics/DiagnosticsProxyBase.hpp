/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_IHU_DIAGNOSTICS_Diagnostics_PROXY_BASE_HPP_
#define V1_COM_IHU_DIAGNOSTICS_Diagnostics_PROXY_BASE_HPP_

#include <v1/com/ihu/Diagnostics/Diagnostics.hpp>



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/SelectiveEvent.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace ihu {
namespace Diagnostics {

class DiagnosticsProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::SelectiveEvent<uint16_t, std::vector<uint8_t>> MessageToAppSelectiveEvent;

    typedef std::function<void(const CommonAPI::CallStatus&)> MessageToDiagAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SubscribeOnKeysAsyncCallback;


    virtual MessageToAppSelectiveEvent& getMessageToAppSelectiveEvent() = 0;

    virtual void MessageToDiag(const uint16_t &_key, const std::vector<uint8_t> &_payload, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> MessageToDiagAsync(const uint16_t &_key, const std::vector<uint8_t> &_payload, MessageToDiagAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void SubscribeOnKeys(const std::vector<uint16_t> &_keys, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SubscribeOnKeysAsync(const std::vector<uint16_t> &_keys, SubscribeOnKeysAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace Diagnostics
} // namespace ihu
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_IHU_DIAGNOSTICS_Diagnostics_PROXY_BASE_HPP_
