/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: EnhancedPosition = This interface offers functionalities to retrieve the
 *   enhanced position of the vehicle
 */
#ifndef V0_ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Enhanced_Position_PROXY_BASE_HPP_
#define V0_ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Enhanced_Position_PROXY_BASE_HPP_

//#include <org/genivi/EnhancedPositionService/EnhancedPosition.hpp>


#include <org/genivi/EnhancedPositionService/EnhancedPositionServiceTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <unordered_map>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace EnhancedPositionService {

class EnhancedPositionProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::Bitmask
    > PositionUpdateEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::Version&)> GetVersionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::Timestamp&, const ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::PositionInfo&)> GetPositionInfoAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::Timestamp&, const ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::SatelliteInfo&)> GetSatelliteInfoAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::Timestamp&, const ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::TimeInfo&)> GetTimeAsyncCallback;


    /**
     * description: PositionUpdate = This signal is called to notify a client application of a
     *   position change. The update frequency is implementation specific. The maximal
     *   allowed frequency is 10Hz
     */
    virtual PositionUpdateEvent& getPositionUpdateEvent() = 0;

    /**
     * description: GetVersion = This method returns the API version implemented by the server
     *   application
     */
    virtual void GetVersion(CommonAPI::CallStatus &_internalCallStatus, ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::Version &_version, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetVersionAsync(GetVersionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: GetPositionInfo = This method returns a given set of positioning data (e.g.
     *   Position, Course, Accuracy, Status, ... )            Note: If a requested
     *   value is invalid, it's not returned to the client application
     */
    virtual void GetPositionInfo(const ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::Bitmask &_valuesToReturn, CommonAPI::CallStatus &_internalCallStatus, ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::Timestamp &_timestamp, ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::PositionInfo &_data, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetPositionInfoAsync(const ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::Bitmask &_valuesToReturn, GetPositionInfoAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: GetSatelliteInfo = This method returns information about the current satellite
     *   constellation         Note: If a requested value is invalid, it's not returned
     *   to the client application
     */
    virtual void GetSatelliteInfo(CommonAPI::CallStatus &_internalCallStatus, ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::Timestamp &_timestamp, ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::SatelliteInfo &_satelliteInfo, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetSatelliteInfoAsync(GetSatelliteInfoAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: GetTime = This method returns UTC time and date.             Note: If a
     *   requested value is invalid, it's not returned to the client application
     */
    virtual void GetTime(CommonAPI::CallStatus &_internalCallStatus, ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::Timestamp &_timestamp, ::org::genivi::EnhancedPositionService::EnhancedPositionServiceTypes::TimeInfo &_time, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetTimeAsync(GetTimeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace EnhancedPositionService
} // namespace genivi
} // namespace org



#endif // V0_ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Enhanced_Position_PROXY_BASE_HPP_
