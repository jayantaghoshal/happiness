#ifndef _CONNECTIVITY_LIBIPCOMMANDBUS_VCCIPCMD_H_
#define _CONNECTIVITY_LIBIPCOMMANDBUS_VCCIPCMD_H_

/*
 * This file is automatically generated from the template '$(TEMPLATE_FILE)'
 */

#include <functional>
#include <cstddef>
#include <cstdint>
#include <string>

namespace Connectivity
{

/**
 * Namespace for VCC IP Command
 */
namespace VccIpCmd
{

/**
 * Service IDs
 * Autogenerated with content from the following files:
 * $(SPEC_FILES)
 */
enum class ServiceId : std::uint16_t
{
    $(SERVICE_ID_ENUM)
};

/**
 * Operation IDs
 * Autogenerated with content from the following files:
 * $(SPEC_FILES)
 */
enum class OperationId : std::uint16_t
{
    $(OPERATION_ID_ENUM)
};

/**
 * Possible Operation Types 
 * Reference: VDR-NOTE-SWRS-31843799-INS-01-14 VCCIP.pdf [VCC IP Prot: 0020/;-1]
 */
enum class OperationType : std::uint8_t
{
    REQUEST = 0x00,
    SETREQUEST_NORETURN = 0x01,
    SETREQUEST = 0x02,
    NOTIFICATION_REQUEST = 0x03,
    RESPONSE = 0x04,
    NOTIFICATION = 0x05,
    NOTIFICATION_CYCLIC = 0x06,
    ACK = 0x70,
    ERROR = 0xE0,
    UNDEFINED = 0xFF,
};

/**
 * Possible Data Types, i.e. type of data payload.
 * Reference: VDR-NOTE-SWRS-31843799-INS-01-14 VCCIP.pdf [VCC IP Prot: 0094/;-0]
 */
enum class DataType : std::uint8_t
{
    ENCODED = 0x00,
    NOT_ENCODED = 0x01,
    UNDEFINED = 0xFF,
};

typedef std::uint32_t SenderHandleId;

union CombinedId {
    CombinedId(ServiceId _sid, OperationId _oid);

    bool operator==(const CombinedId &id) const;

    struct
    {
        const ServiceId serviceId;
        const OperationId operationId;
    } parts;
    const std::uint32_t combined;
};

bool ServiceIdIsValid(ServiceId id);

/**
 * Returns the string literal for the passed enumerations. 
 */
std::string toString(ServiceId si);
std::string toString(ServiceId si, OperationId oi, const char *separator = ".");
std::string toString(const CombinedId &id, const char *separator = ".");

/**
 * Returns the string literal for the passed enumeration. 
 */
const char *toString(OperationType ot);

/**
 * Returns the string literal for the passed enumeration. 
 */
const char *toString(DataType dt);

} // VccIpCmd
} // Connectivity

#endif //_CONNECTIVITY_LIBIPCOMMANDBUS_VCCIPCMD_H_
