/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_ORG_VOLVOCARS_CLIMATE_FIRST_ROW_HPP_
#define V0_ORG_VOLVOCARS_CLIMATE_FIRST_ROW_HPP_

#include "CommonApiEnum.hpp"
#include "CommonTypes.hpp"

namespace v0 {
namespace org {
namespace volvocars {
namespace climate {

class FirstRow {
public:
    struct CleanzoneState : CommonApiEnumeration<int32_t> {
        enum Literal : int32_t {
            OFF = 0,
            NOT_OK = 1,
            OK = 2
        };
        
        CleanzoneState() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::OFF)) {}
        CleanzoneState(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::OFF):
                case static_cast<int32_t>(Literal::NOT_OK):
                case static_cast<int32_t>(Literal::OK):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CleanzoneState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CleanzoneState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CleanzoneState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CleanzoneState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CleanzoneState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CleanzoneState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct AirConditionerRequest : CommonApiEnumeration<int32_t> {
        enum Literal : int32_t {
            OFF = 2,
            AUTO = 3
        };
        
        AirConditionerRequest() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::OFF)) {}
        AirConditionerRequest(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::OFF):
                case static_cast<int32_t>(Literal::AUTO):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const AirConditionerRequest &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const AirConditionerRequest &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const AirConditionerRequest &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const AirConditionerRequest &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const AirConditionerRequest &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const AirConditionerRequest &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct AirConditionerState : CommonApiEnumeration<int32_t> {
        enum Literal : int32_t {
            OFF = 2,
            AUTO = 3,
            DISABLED = 0,
            SYSTEM_ERROR = 1
        };
        
        AirConditionerState() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::OFF)) {}
        AirConditionerState(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        AirConditionerState &operator=(const AirConditionerRequest::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::OFF):
                case static_cast<int32_t>(Literal::AUTO):
                case static_cast<int32_t>(Literal::DISABLED):
                case static_cast<int32_t>(Literal::SYSTEM_ERROR):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const AirConditionerState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const AirConditionerState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const AirConditionerState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const AirConditionerState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const AirConditionerState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const AirConditionerState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct FanLevelFrontRequest : CommonApiEnumeration<int32_t> {
        enum Literal : int32_t {
            OFF = 0,
            LVL1 = 1,
            LVL2 = 2,
            LVL3 = 3,
            LVL4 = 4,
            LVL5 = 5,
            MAX = 6
        };
        
        FanLevelFrontRequest() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::OFF)) {}
        FanLevelFrontRequest(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::OFF):
                case static_cast<int32_t>(Literal::LVL1):
                case static_cast<int32_t>(Literal::LVL2):
                case static_cast<int32_t>(Literal::LVL3):
                case static_cast<int32_t>(Literal::LVL4):
                case static_cast<int32_t>(Literal::LVL5):
                case static_cast<int32_t>(Literal::MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const FanLevelFrontRequest &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const FanLevelFrontRequest &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const FanLevelFrontRequest &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const FanLevelFrontRequest &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const FanLevelFrontRequest &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const FanLevelFrontRequest &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct FanLevelFrontValue : CommonApiEnumeration<int32_t> {
        enum Literal : int32_t {
            OFF = 0,
            LVL1 = 1,
            LVL2 = 2,
            LVL3 = 3,
            LVL4 = 4,
            LVL5 = 5,
            MAX = 6,
            DISABLED = 7,
            SYSTEM_ERROR = 8
        };
        
        FanLevelFrontValue() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::OFF)) {}
        FanLevelFrontValue(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        FanLevelFrontValue &operator=(const FanLevelFrontRequest::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::OFF):
                case static_cast<int32_t>(Literal::LVL1):
                case static_cast<int32_t>(Literal::LVL2):
                case static_cast<int32_t>(Literal::LVL3):
                case static_cast<int32_t>(Literal::LVL4):
                case static_cast<int32_t>(Literal::LVL5):
                case static_cast<int32_t>(Literal::MAX):
                case static_cast<int32_t>(Literal::DISABLED):
                case static_cast<int32_t>(Literal::SYSTEM_ERROR):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const FanLevelFrontValue &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const FanLevelFrontValue &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const FanLevelFrontValue &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const FanLevelFrontValue &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const FanLevelFrontValue &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const FanLevelFrontValue &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct AutoClimateState : CommonApiEnumeration<int32_t> {
        enum Literal : int32_t {
            NOT_VISIBLE = 0,
            DISABLED = 1,
            SYSTEM_ERROR = 2,
            OFF = 3,
            ON = 4
        };
        
        AutoClimateState() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::NOT_VISIBLE)) {}
        AutoClimateState(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::NOT_VISIBLE):
                case static_cast<int32_t>(Literal::DISABLED):
                case static_cast<int32_t>(Literal::SYSTEM_ERROR):
                case static_cast<int32_t>(Literal::OFF):
                case static_cast<int32_t>(Literal::ON):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const AutoClimateState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const AutoClimateState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const AutoClimateState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const AutoClimateState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const AutoClimateState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const AutoClimateState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ManualRecircRequest: CommonApiEnumeration<int32_t>  {
        enum Literal : int32_t {
            ON = 0,
            OFF = 1
        };
        
        ManualRecircRequest() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::ON)) {}
        ManualRecircRequest(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::ON):
                case static_cast<int32_t>(Literal::OFF):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ManualRecircRequest &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ManualRecircRequest &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ManualRecircRequest &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ManualRecircRequest &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ManualRecircRequest &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ManualRecircRequest &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ManualRecircState : CommonApiEnumeration<int32_t> {
        enum Literal : int32_t {
            ON = 0,
            OFF = 1,
            DISABLED = 2,
            SYSTEM_ERROR = 3
        };
        
        ManualRecircState() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::ON)) {}
        ManualRecircState(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        ManualRecircState &operator=(const ManualRecircRequest::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::ON):
                case static_cast<int32_t>(Literal::OFF):
                case static_cast<int32_t>(Literal::DISABLED):
                case static_cast<int32_t>(Literal::SYSTEM_ERROR):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ManualRecircState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ManualRecircState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ManualRecircState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ManualRecircState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ManualRecircState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ManualRecircState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct AirDistributionAngleRequest : CommonApiEnumeration<int32_t> {
        enum Literal : int32_t {
            FLOOR = 0,
            VENT = 1,
            DEFROST = 2,
            FLOOR_DEFROST = 3,
            FLOOR_VENT = 4,
            VENT_DEFROST = 5,
            FLOOR_VENT_DEFROST = 6,
            AUTO = 7
        };
        
        AirDistributionAngleRequest() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::FLOOR)) {}
        AirDistributionAngleRequest(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::FLOOR):
                case static_cast<int32_t>(Literal::VENT):
                case static_cast<int32_t>(Literal::DEFROST):
                case static_cast<int32_t>(Literal::FLOOR_DEFROST):
                case static_cast<int32_t>(Literal::FLOOR_VENT):
                case static_cast<int32_t>(Literal::VENT_DEFROST):
                case static_cast<int32_t>(Literal::FLOOR_VENT_DEFROST):
                case static_cast<int32_t>(Literal::AUTO):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const AirDistributionAngleRequest &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const AirDistributionAngleRequest &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const AirDistributionAngleRequest &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const AirDistributionAngleRequest &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const AirDistributionAngleRequest &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const AirDistributionAngleRequest &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct AirDistributionAngle  : CommonApiEnumeration<int32_t>{
        enum Literal : int32_t {
            FLOOR = 0,
            VENT = 1,
            DEFROST = 2,
            FLOOR_DEFROST = 3,
            FLOOR_VENT = 4,
            VENT_DEFROST = 5,
            FLOOR_VENT_DEFROST = 6,
            AUTO = 7,
            DISABLED = 8
        };
        
        AirDistributionAngle() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::FLOOR)) {}
        AirDistributionAngle(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        AirDistributionAngle &operator=(const AirDistributionAngleRequest::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::FLOOR):
                case static_cast<int32_t>(Literal::VENT):
                case static_cast<int32_t>(Literal::DEFROST):
                case static_cast<int32_t>(Literal::FLOOR_DEFROST):
                case static_cast<int32_t>(Literal::FLOOR_VENT):
                case static_cast<int32_t>(Literal::VENT_DEFROST):
                case static_cast<int32_t>(Literal::FLOOR_VENT_DEFROST):
                case static_cast<int32_t>(Literal::AUTO):
                case static_cast<int32_t>(Literal::DISABLED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const AirDistributionAngle &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const AirDistributionAngle &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const AirDistributionAngle &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const AirDistributionAngle &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const AirDistributionAngle &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const AirDistributionAngle &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ElectricDefrosterWindscreenRequest  : CommonApiEnumeration<int32_t>{
        enum Literal : int32_t {
            ON = 0,
            OFF = 1
        };
        
        ElectricDefrosterWindscreenRequest() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::ON)) {}
        ElectricDefrosterWindscreenRequest(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::ON):
                case static_cast<int32_t>(Literal::OFF):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ElectricDefrosterWindscreenRequest &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ElectricDefrosterWindscreenRequest &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ElectricDefrosterWindscreenRequest &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ElectricDefrosterWindscreenRequest &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ElectricDefrosterWindscreenRequest &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ElectricDefrosterWindscreenRequest &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ElectricDefrosterWindscreenState : CommonApiEnumeration<int32_t> {
        enum Literal : int32_t {
            ON = 0,
            OFF = 1,
            DISABLED = 2,
            NOT_PRESENT = 3
        };
        
        ElectricDefrosterWindscreenState() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::ON)) {}
        ElectricDefrosterWindscreenState(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        ElectricDefrosterWindscreenState &operator=(const ElectricDefrosterWindscreenRequest::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::ON):
                case static_cast<int32_t>(Literal::OFF):
                case static_cast<int32_t>(Literal::DISABLED):
                case static_cast<int32_t>(Literal::NOT_PRESENT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ElectricDefrosterWindscreenState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ElectricDefrosterWindscreenState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ElectricDefrosterWindscreenState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ElectricDefrosterWindscreenState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ElectricDefrosterWindscreenState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ElectricDefrosterWindscreenState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ElectricDefrosterRearRequest : CommonApiEnumeration<int32_t> {
        enum Literal : int32_t {
            ON = 0,
            OFF = 1
        };
        
        ElectricDefrosterRearRequest() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::ON)) {}
        ElectricDefrosterRearRequest(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::ON):
                case static_cast<int32_t>(Literal::OFF):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ElectricDefrosterRearRequest &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ElectricDefrosterRearRequest &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ElectricDefrosterRearRequest &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ElectricDefrosterRearRequest &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ElectricDefrosterRearRequest &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ElectricDefrosterRearRequest &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ElectricDefrosterRearState : CommonApiEnumeration<int32_t> {
        enum Literal : int32_t {
            ON = 0,
            OFF = 1,
            DISABLED = 2
        };
        
        ElectricDefrosterRearState() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::ON)) {}
        ElectricDefrosterRearState(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        ElectricDefrosterRearState &operator=(const ElectricDefrosterRearRequest::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::ON):
                case static_cast<int32_t>(Literal::OFF):
                case static_cast<int32_t>(Literal::DISABLED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ElectricDefrosterRearState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ElectricDefrosterRearState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ElectricDefrosterRearState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ElectricDefrosterRearState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ElectricDefrosterRearState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ElectricDefrosterRearState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ElectricDefrosterPopupRequest : CommonApiEnumeration<int32_t> {
        enum Literal : int32_t {
            OFF = 1
        };
        
        ElectricDefrosterPopupRequest() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::OFF)) {}
        ElectricDefrosterPopupRequest(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::OFF):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ElectricDefrosterPopupRequest &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ElectricDefrosterPopupRequest &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ElectricDefrosterPopupRequest &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ElectricDefrosterPopupRequest &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ElectricDefrosterPopupRequest &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ElectricDefrosterPopupRequest &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ElectricDefrosterPopupState : CommonApiEnumeration<int32_t> {
        enum Literal : int32_t {
            OFF = 1,
            ON = 0
        };
        
        ElectricDefrosterPopupState() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::OFF)) {}
        ElectricDefrosterPopupState(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        ElectricDefrosterPopupState &operator=(const ElectricDefrosterPopupRequest::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::OFF):
                case static_cast<int32_t>(Literal::ON):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ElectricDefrosterPopupState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ElectricDefrosterPopupState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ElectricDefrosterPopupState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ElectricDefrosterPopupState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ElectricDefrosterPopupState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ElectricDefrosterPopupState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct MaxDefrosterRequest : CommonApiEnumeration<int32_t> {
        enum Literal : int32_t {
            ON = 0,
            OFF = 1
        };
        
        MaxDefrosterRequest() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::ON)) {}
        MaxDefrosterRequest(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::ON):
                case static_cast<int32_t>(Literal::OFF):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const MaxDefrosterRequest &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const MaxDefrosterRequest &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const MaxDefrosterRequest &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const MaxDefrosterRequest &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const MaxDefrosterRequest &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const MaxDefrosterRequest &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct MaxDefrosterState : CommonApiEnumeration<int32_t> {
        enum Literal : int32_t {
            ON = 0,
            OFF = 1,
            DISABLED = 2
        };
        
        MaxDefrosterState() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::ON)) {}
        MaxDefrosterState(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        MaxDefrosterState &operator=(const MaxDefrosterRequest::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::ON):
                case static_cast<int32_t>(Literal::OFF):
                case static_cast<int32_t>(Literal::DISABLED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const MaxDefrosterState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const MaxDefrosterState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const MaxDefrosterState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const MaxDefrosterState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const MaxDefrosterState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const MaxDefrosterState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct StateType : CommonApiEnumeration<int32_t> {
        enum Literal : int32_t {
            AVAILABLE = 0,
            SYSTEM_ERROR = 1,
            DISABLED = 2,
            NOT_PRESENT = 3
        };
        
        StateType() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::AVAILABLE)) {}
        StateType(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::AVAILABLE):
                case static_cast<int32_t>(Literal::SYSTEM_ERROR):
                case static_cast<int32_t>(Literal::DISABLED):
                case static_cast<int32_t>(Literal::NOT_PRESENT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const StateType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const StateType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const StateType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const StateType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const StateType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const StateType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct Range : CommonAPI::Struct<double, double> {
    	
    	Range() {
    	}
    	Range(const double &_min, const double &_max)
    	{
    		std::get<0>(values_) = _min;
    		std::get<1>(values_) = _max;
    	}
    	inline const double &getMin() const { return std::get<0>(values_); }
    	inline void setMin(const double &_value) { std::get<0>(values_) = _value; }
    	inline const double &getMax() const { return std::get<1>(values_); }
    	inline void setMax(const double &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const Range& _other) const {
                return (getMin() == _other.getMin() && getMax() == _other.getMax());
        }
    	inline bool operator!=(const Range &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct TemperatureAttribute : CommonAPI::Struct<StateType, double, Range> {
    	
    	TemperatureAttribute() {
    	}
    	TemperatureAttribute(const StateType &_currState, const double &_value, const Range &_range)
    	{
    		std::get<0>(values_) = _currState;
    		std::get<1>(values_) = _value;
    		std::get<2>(values_) = _range;
    	}
    	inline const StateType &getCurrState() const { return std::get<0>(values_); }
    	inline void setCurrState(const StateType &_value) { std::get<0>(values_) = _value; }
    	inline const double &getValue() const { return std::get<1>(values_); }
    	inline void setValue(const double &_value) { std::get<1>(values_) = _value; }
    	inline const Range &getRange() const { return std::get<2>(values_); }
    	inline void setRange(const Range &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const TemperatureAttribute& _other) const {
                return (getCurrState() == _other.getCurrState() && getValue() == _other.getValue() && getRange() == _other.getRange());
        }
    	inline bool operator!=(const TemperatureAttribute &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct TemperatureSyncRequest : CommonApiEnumeration<int32_t> {
        enum Literal : int32_t {
            OFF = 0,
            ON = 1
        };
        
        TemperatureSyncRequest() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::OFF)) {}
        TemperatureSyncRequest(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::OFF):
                case static_cast<int32_t>(Literal::ON):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TemperatureSyncRequest &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TemperatureSyncRequest &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TemperatureSyncRequest &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TemperatureSyncRequest &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TemperatureSyncRequest &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TemperatureSyncRequest &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct TemperatureSyncState : CommonApiEnumeration<int32_t> {
        enum Literal : int32_t {
            OFF = 0,
            ON = 1,
            DISABLED = 2,
            SYSTEM_ERROR = 3,
            NOT_PRESENT = 4
        };
        
        TemperatureSyncState() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::OFF)) {}
        TemperatureSyncState(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        TemperatureSyncState &operator=(const TemperatureSyncRequest::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::OFF):
                case static_cast<int32_t>(Literal::ON):
                case static_cast<int32_t>(Literal::DISABLED):
                case static_cast<int32_t>(Literal::SYSTEM_ERROR):
                case static_cast<int32_t>(Literal::NOT_PRESENT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TemperatureSyncState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TemperatureSyncState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TemperatureSyncState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TemperatureSyncState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TemperatureSyncState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TemperatureSyncState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct HeatLevel  : CommonApiEnumeration<int32_t>{
        enum Literal : int32_t {
            OFF = 0,
            LO = 1,
            MED = 2,
            HI = 3
        };
        
        HeatLevel() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::OFF)) {}
        HeatLevel(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::OFF):
                case static_cast<int32_t>(Literal::LO):
                case static_cast<int32_t>(Literal::MED):
                case static_cast<int32_t>(Literal::HI):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const HeatLevel &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const HeatLevel &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const HeatLevel &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const HeatLevel &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const HeatLevel &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const HeatLevel &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct HeatState : CommonApiEnumeration<int32_t> {
        enum Literal : int32_t {
            NOT_PRESENT = 0,
            DISABLED = 1,
            MANUAL = 2,
            AUTO = 3
        };
        
        HeatState() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::NOT_PRESENT)) {}
        HeatState(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::NOT_PRESENT):
                case static_cast<int32_t>(Literal::DISABLED):
                case static_cast<int32_t>(Literal::MANUAL):
                case static_cast<int32_t>(Literal::AUTO):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const HeatState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const HeatState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const HeatState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const HeatState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const HeatState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const HeatState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct HeatAttribute : CommonAPI::Struct<HeatState, HeatLevel> {
    	
    	HeatAttribute() {
    	}
    	HeatAttribute(const HeatState &_heatState, const HeatLevel &_heatLevel)
    	{
    		std::get<0>(values_) = _heatState;
    		std::get<1>(values_) = _heatLevel;
    	}
    	inline const HeatState &getHeatState() const { return std::get<0>(values_); }
    	inline void setHeatState(const HeatState &_value) { std::get<0>(values_) = _value; }
    	inline const HeatLevel &getHeatLevel() const { return std::get<1>(values_); }
    	inline void setHeatLevel(const HeatLevel &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const HeatAttribute& _other) const {
                return (getHeatState() == _other.getHeatState() && getHeatLevel() == _other.getHeatLevel());
        }
    	inline bool operator!=(const HeatAttribute &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct VentLevel : CommonApiEnumeration<int32_t> {
        enum Literal : int32_t {
            OFF = 0,
            LVL1 = 1,
            LVL2 = 2,
            LVL3 = 3
        };
        
        VentLevel() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::OFF)) {}
        VentLevel(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::OFF):
                case static_cast<int32_t>(Literal::LVL1):
                case static_cast<int32_t>(Literal::LVL2):
                case static_cast<int32_t>(Literal::LVL3):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VentLevel &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VentLevel &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VentLevel &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VentLevel &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VentLevel &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VentLevel &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VentState : CommonApiEnumeration<int32_t> {
        enum Literal : int32_t {
            NOT_PRESENT = 0,
            DISABLED = 1,
            MANUAL = 2
        };
        
        VentState() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::NOT_PRESENT)) {}
        VentState(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::NOT_PRESENT):
                case static_cast<int32_t>(Literal::DISABLED):
                case static_cast<int32_t>(Literal::MANUAL):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VentState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VentState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VentState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VentState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VentState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VentState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct VentAttribute : CommonAPI::Struct<VentState, VentLevel> {
    	
    	VentAttribute() {
    	}
    	VentAttribute(const VentState &_ventState, const VentLevel &_ventLevel)
    	{
    		std::get<0>(values_) = _ventState;
    		std::get<1>(values_) = _ventLevel;
    	}
    	inline const VentState &getVentState() const { return std::get<0>(values_); }
    	inline void setVentState(const VentState &_value) { std::get<0>(values_) = _value; }
    	inline const VentLevel &getVentLevel() const { return std::get<1>(values_); }
    	inline void setVentLevel(const VentLevel &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const VentAttribute& _other) const {
                return (getVentState() == _other.getVentState() && getVentLevel() == _other.getVentLevel());
        }
    	inline bool operator!=(const VentAttribute &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct IonizerRequest : CommonApiEnumeration<int32_t> {
        enum Literal : int32_t {
            OFF = 0,
            ON = 1
        };
        
        IonizerRequest() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::OFF)) {}
        IonizerRequest(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::OFF):
                case static_cast<int32_t>(Literal::ON):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const IonizerRequest &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const IonizerRequest &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const IonizerRequest &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const IonizerRequest &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const IonizerRequest &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const IonizerRequest &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct IonizerState : CommonApiEnumeration<int32_t> {
        enum Literal : int32_t {
            OFF = 0,
            ON = 1,
            NOT_PRESENT = 2,
            DISABLED = 3,
            SYSTEM_ERROR = 4
        };
        
        IonizerState() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::OFF)) {}
        IonizerState(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        IonizerState &operator=(const IonizerRequest::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::OFF):
                case static_cast<int32_t>(Literal::ON):
                case static_cast<int32_t>(Literal::NOT_PRESENT):
                case static_cast<int32_t>(Literal::DISABLED):
                case static_cast<int32_t>(Literal::SYSTEM_ERROR):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const IonizerState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const IonizerState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const IonizerState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const IonizerState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const IonizerState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const IonizerState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
};


} // namespace climate
} // namespace volvocars
} // namespace org
} // namespace v0



// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVOCARS_CLIMATE_FIRST_ROW_HPP_
