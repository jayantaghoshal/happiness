/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_ORG_VOLVOCARS_CLIMATE_Common_Types_HPP_
#define V0_ORG_VOLVOCARS_CLIMATE_Common_Types_HPP_

#include "CommonApiEnum.hpp"

namespace v0 {
namespace org {
namespace volvocars {
namespace climate {

struct CommonTypes {
    public:
    
    struct ReturnCode : CommonApiEnumeration<int32_t>  {
        enum Literal : int32_t {
            SUCCESS = 0,
            FUNCTION_NOT_PRESENT = 1,
            SIGNAL_FAULT = 2,
            FUNCTION_IS_DISABLED = 3,
            BAD_ARGUMENTS = 4,
            INVALID_REQUEST = 5,
            NOT_READY = 6,
            TIMESTAMP_INVALID = 7,
            CAR_IN_USE = 8
        };
        
        ReturnCode() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::SUCCESS)) {}
        ReturnCode(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SUCCESS):
                case static_cast<int32_t>(Literal::FUNCTION_NOT_PRESENT):
                case static_cast<int32_t>(Literal::SIGNAL_FAULT):
                case static_cast<int32_t>(Literal::FUNCTION_IS_DISABLED):
                case static_cast<int32_t>(Literal::BAD_ARGUMENTS):
                case static_cast<int32_t>(Literal::INVALID_REQUEST):
                case static_cast<int32_t>(Literal::NOT_READY):
                case static_cast<int32_t>(Literal::TIMESTAMP_INVALID):
                case static_cast<int32_t>(Literal::CAR_IN_USE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ReturnCode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ReturnCode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ReturnCode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ReturnCode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ReturnCode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ReturnCode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct TemperatureState : CommonApiEnumeration<int32_t> {
        enum Literal : int32_t {
            AVAILABLE = 0,
            SYSTEM_ERROR = 1,
            DISABLED = 2,
            NOT_PRESENT = 3
        };
        
        TemperatureState() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::AVAILABLE)) {}
        TemperatureState(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::AVAILABLE):
                case static_cast<int32_t>(Literal::SYSTEM_ERROR):
                case static_cast<int32_t>(Literal::DISABLED):
                case static_cast<int32_t>(Literal::NOT_PRESENT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TemperatureState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TemperatureState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TemperatureState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TemperatureState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TemperatureState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TemperatureState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };

}; // struct CommonTypes

} // namespace climate
} // namespace volvocars
} // namespace org
} // namespace v0

// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVOCARS_CLIMATE_Common_Types_HPP_
