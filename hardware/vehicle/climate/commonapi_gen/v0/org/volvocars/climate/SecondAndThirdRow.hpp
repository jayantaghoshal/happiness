/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#pragma once

#include "CommonApiEnum.hpp"
#include "CommonTypes.hpp"

namespace v0 {
namespace org {
namespace volvocars {
namespace climate {

class SecondAndThirdRow {
  public:
    virtual ~SecondAndThirdRow() {}

    struct FanLevelRearRequest : CommonApiEnumeration<int32_t> {
        enum Literal : int32_t { LVL1 = 1, LVL2 = 2, LVL3 = 3, LVL4 = 4, LVL5 = 5 };

        FanLevelRearRequest() : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::LVL1)) {}
        FanLevelRearRequest(Literal _literal) : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}

        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::LVL1):
                case static_cast<int32_t>(Literal::LVL2):
                case static_cast<int32_t>(Literal::LVL3):
                case static_cast<int32_t>(Literal::LVL4):
                case static_cast<int32_t>(Literal::LVL5):
                    return true;
                default:
                    return false;
            }
        }

        inline bool operator==(const FanLevelRearRequest& _other) const { return (value_ == _other.value_); }
        inline bool operator!=(const FanLevelRearRequest& _other) const { return (value_ != _other.value_); }
        inline bool operator<=(const FanLevelRearRequest& _other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const FanLevelRearRequest& _other) const { return (value_ >= _other.value_); }
        inline bool operator<(const FanLevelRearRequest& _other) const { return (value_ < _other.value_); }
        inline bool operator>(const FanLevelRearRequest& _other) const { return (value_ > _other.value_); }

        inline bool operator==(const Literal& _value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal& _value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal& _value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal& _value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal& _value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal& _value) const { return (value_ > static_cast<int32_t>(_value)); }
    };

    struct FanLevelRearState : CommonApiEnumeration<int32_t> {
        enum Literal : int32_t {
            LVL1 = 1,
            LVL2 = 2,
            LVL3 = 3,
            LVL4 = 4,
            LVL5 = 5,
            OFF = 0,
            DISABLED = 6,
            SYSTEM_ERROR = 7,
            NOT_PRESENT = 8
        };

        FanLevelRearState() : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::LVL1)) {}
        FanLevelRearState(Literal _literal) : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        FanLevelRearState& operator=(const FanLevelRearRequest::Literal& _value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }

        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::LVL1):
                case static_cast<int32_t>(Literal::LVL2):
                case static_cast<int32_t>(Literal::LVL3):
                case static_cast<int32_t>(Literal::LVL4):
                case static_cast<int32_t>(Literal::LVL5):
                case static_cast<int32_t>(Literal::OFF):
                case static_cast<int32_t>(Literal::DISABLED):
                case static_cast<int32_t>(Literal::SYSTEM_ERROR):
                case static_cast<int32_t>(Literal::NOT_PRESENT):
                    return true;
                default:
                    return false;
            }
        }

        inline bool operator==(const FanLevelRearState& _other) const { return (value_ == _other.value_); }
        inline bool operator!=(const FanLevelRearState& _other) const { return (value_ != _other.value_); }
        inline bool operator<=(const FanLevelRearState& _other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const FanLevelRearState& _other) const { return (value_ >= _other.value_); }
        inline bool operator<(const FanLevelRearState& _other) const { return (value_ < _other.value_); }
        inline bool operator>(const FanLevelRearState& _other) const { return (value_ > _other.value_); }

        inline bool operator==(const Literal& _value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal& _value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal& _value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal& _value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal& _value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal& _value) const { return (value_ > static_cast<int32_t>(_value)); }
    };

    struct SecondRowClimateRequest : CommonApiEnumeration<int32_t> {
        enum Literal : int32_t { OFF = 0, ON = 1 };

        SecondRowClimateRequest() : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::OFF)) {}
        SecondRowClimateRequest(Literal _literal) : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}

        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::OFF):
                case static_cast<int32_t>(Literal::ON):
                    return true;
                default:
                    return false;
            }
        }

        inline bool operator==(const SecondRowClimateRequest& _other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SecondRowClimateRequest& _other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SecondRowClimateRequest& _other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SecondRowClimateRequest& _other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SecondRowClimateRequest& _other) const { return (value_ < _other.value_); }
        inline bool operator>(const SecondRowClimateRequest& _other) const { return (value_ > _other.value_); }

        inline bool operator==(const Literal& _value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal& _value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal& _value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal& _value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal& _value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal& _value) const { return (value_ > static_cast<int32_t>(_value)); }
    };

    struct SecondRowClimateState : CommonApiEnumeration<int32_t> {
        enum Literal : int32_t { OFF = 0, ON = 1, DISABLED = 2, SYSTEM_ERROR = 3, NOT_PRESENT = 4 };

        SecondRowClimateState() : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::OFF)) {}
        SecondRowClimateState(Literal _literal) : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        SecondRowClimateState& operator=(const SecondRowClimateRequest::Literal& _value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }

        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::OFF):
                case static_cast<int32_t>(Literal::ON):
                case static_cast<int32_t>(Literal::DISABLED):
                case static_cast<int32_t>(Literal::SYSTEM_ERROR):
                case static_cast<int32_t>(Literal::NOT_PRESENT):
                    return true;
                default:
                    return false;
            }
        }

        inline bool operator==(const SecondRowClimateState& _other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SecondRowClimateState& _other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SecondRowClimateState& _other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SecondRowClimateState& _other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SecondRowClimateState& _other) const { return (value_ < _other.value_); }
        inline bool operator>(const SecondRowClimateState& _other) const { return (value_ > _other.value_); }

        inline bool operator==(const Literal& _value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal& _value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal& _value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal& _value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal& _value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal& _value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct Range : CommonAPI::Struct<double, double> {
        Range() {}
        Range(const double& _min, const double& _max) {
            std::get<0>(values_) = _min;
            std::get<1>(values_) = _max;
        }
        inline const double& getMin() const { return std::get<0>(values_); }
        inline void setMin(const double& _value) { std::get<0>(values_) = _value; }
        inline const double& getMax() const { return std::get<1>(values_); }
        inline void setMax(const double& _value) { std::get<1>(values_) = _value; }
        inline bool operator==(const Range& _other) const {
            return (getMin() == _other.getMin() && getMax() == _other.getMax());
        }
        inline bool operator!=(const Range& _other) const { return !((*this) == _other); }
    };
    struct TemperatureAttribute
            : CommonAPI::Struct<::v0::org::volvocars::climate::CommonTypes::TemperatureState, double, Range> {
        TemperatureAttribute() {}
        TemperatureAttribute(const ::v0::org::volvocars::climate::CommonTypes::TemperatureState& _currState,
                             const double& _value,
                             const Range& _range) {
            std::get<0>(values_) = _currState;
            std::get<1>(values_) = _value;
            std::get<2>(values_) = _range;
        }
        inline const ::v0::org::volvocars::climate::CommonTypes::TemperatureState& getCurrState() const {
            return std::get<0>(values_);
        }
        inline void setCurrState(const ::v0::org::volvocars::climate::CommonTypes::TemperatureState& _value) {
            std::get<0>(values_) = _value;
        }
        inline const double& getValue() const { return std::get<1>(values_); }
        inline void setValue(const double& _value) { std::get<1>(values_) = _value; }
        inline const Range& getRange() const { return std::get<2>(values_); }
        inline void setRange(const Range& _value) { std::get<2>(values_) = _value; }
        inline bool operator==(const TemperatureAttribute& _other) const {
            return (getCurrState() == _other.getCurrState() && getValue() == _other.getValue() &&
                    getRange() == _other.getRange());
        }
        inline bool operator!=(const TemperatureAttribute& _other) const { return !((*this) == _other); }
    };

    struct HeatLevel : CommonApiEnumeration<int32_t> {
        enum Literal : int32_t { OFF = 0, LO = 1, MED = 2, HI = 3 };

        HeatLevel() : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::OFF)) {}
        HeatLevel(Literal _literal) : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}

        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::OFF):
                case static_cast<int32_t>(Literal::LO):
                case static_cast<int32_t>(Literal::MED):
                case static_cast<int32_t>(Literal::HI):
                    return true;
                default:
                    return false;
            }
        }

        inline bool operator==(const HeatLevel& _other) const { return (value_ == _other.value_); }
        inline bool operator!=(const HeatLevel& _other) const { return (value_ != _other.value_); }
        inline bool operator<=(const HeatLevel& _other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const HeatLevel& _other) const { return (value_ >= _other.value_); }
        inline bool operator<(const HeatLevel& _other) const { return (value_ < _other.value_); }
        inline bool operator>(const HeatLevel& _other) const { return (value_ > _other.value_); }

        inline bool operator==(const Literal& _value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal& _value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal& _value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal& _value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal& _value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal& _value) const { return (value_ > static_cast<int32_t>(_value)); }
    };

    struct HeatState : CommonApiEnumeration<int32_t> {
        enum Literal : int32_t { NOT_PRESENT = 0, DISABLED = 1, MANUAL = 2 };

        HeatState() : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::NOT_PRESENT)) {}
        HeatState(Literal _literal) : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}

        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::NOT_PRESENT):
                case static_cast<int32_t>(Literal::DISABLED):
                case static_cast<int32_t>(Literal::MANUAL):
                    return true;
                default:
                    return false;
            }
        }

        inline bool operator==(const HeatState& _other) const { return (value_ == _other.value_); }
        inline bool operator!=(const HeatState& _other) const { return (value_ != _other.value_); }
        inline bool operator<=(const HeatState& _other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const HeatState& _other) const { return (value_ >= _other.value_); }
        inline bool operator<(const HeatState& _other) const { return (value_ < _other.value_); }
        inline bool operator>(const HeatState& _other) const { return (value_ > _other.value_); }

        inline bool operator==(const Literal& _value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal& _value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal& _value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal& _value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal& _value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal& _value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct HeatAttribute : CommonAPI::Struct<HeatState, HeatLevel> {
        HeatAttribute() {}
        HeatAttribute(const HeatState& _heatState, const HeatLevel& _heatLevel) {
            std::get<0>(values_) = _heatState;
            std::get<1>(values_) = _heatLevel;
        }
        inline const HeatState& getHeatState() const { return std::get<0>(values_); }
        inline void setHeatState(const HeatState& _value) { std::get<0>(values_) = _value; }
        inline const HeatLevel& getHeatLevel() const { return std::get<1>(values_); }
        inline void setHeatLevel(const HeatLevel& _value) { std::get<1>(values_) = _value; }
        inline bool operator==(const HeatAttribute& _other) const {
            return (getHeatState() == _other.getHeatState() && getHeatLevel() == _other.getHeatLevel());
        }
        inline bool operator!=(const HeatAttribute& _other) const { return !((*this) == _other); }
    };
};

}  // namespace climate
}  // namespace volvocars
}  // namespace org
}  // namespace v0

namespace CommonAPI {}

// Compatibility
namespace v0_1 = v0;
