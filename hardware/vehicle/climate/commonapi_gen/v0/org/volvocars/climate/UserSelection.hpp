/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_ORG_VOLVOCARS_CLIMATE_USER_SELECTION_HPP_
#define V0_ORG_VOLVOCARS_CLIMATE_USER_SELECTION_HPP_

#include "CommonApiEnum.hpp"
#include "CommonTypes.hpp"

namespace v0 {
namespace org {
namespace volvocars {
namespace climate {

class UserSelection {
public:
        
    
    struct StateType  : CommonApiEnumeration<int32_t>{
        enum Literal : int32_t {
            AVAILABLE = 0,
            SYSTEM_ERROR = 1,
            DISABLED = 2,
            NOT_PRESENT = 3
        };
        
        StateType() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::AVAILABLE)) {}
        StateType(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::AVAILABLE):
                case static_cast<int32_t>(Literal::SYSTEM_ERROR):
                case static_cast<int32_t>(Literal::DISABLED):
                case static_cast<int32_t>(Literal::NOT_PRESENT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const StateType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const StateType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const StateType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const StateType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const StateType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const StateType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct OffOnType  : CommonApiEnumeration<int32_t>{
        enum Literal : int32_t {
            OFF = 0,
            ON = 1
        };
        
        OffOnType() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::OFF)) {}
        OffOnType(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::OFF):
                case static_cast<int32_t>(Literal::ON):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const OffOnType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const OffOnType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const OffOnType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const OffOnType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const OffOnType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const OffOnType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct LevelType  : CommonApiEnumeration<int32_t>{
        enum Literal : int32_t {
            LO = 0,
            MED = 1,
            HI = 2
        };
        
        LevelType() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::LO)) {}
        LevelType(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::LO):
                case static_cast<int32_t>(Literal::MED):
                case static_cast<int32_t>(Literal::HI):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const LevelType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const LevelType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const LevelType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const LevelType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const LevelType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const LevelType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct LevelSelection : CommonAPI::Struct<StateType, LevelType> {
    	
    	LevelSelection() {
    	}
    	LevelSelection(const StateType &_currentState, const LevelType &_currentLevel)
    	{
    		std::get<0>(values_) = _currentState;
    		std::get<1>(values_) = _currentLevel;
    	}
    	inline const StateType &getCurrentState() const { return std::get<0>(values_); }
    	inline void setCurrentState(const StateType &_value) { std::get<0>(values_) = _value; }
    	inline const LevelType &getCurrentLevel() const { return std::get<1>(values_); }
    	inline void setCurrentLevel(const LevelType &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const LevelSelection& _other) const {
                return (getCurrentState() == _other.getCurrentState() && getCurrentLevel() == _other.getCurrentLevel());
        }
    	inline bool operator!=(const LevelSelection &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct OffOnSelection : CommonAPI::Struct<StateType, OffOnType> {
    	
    	OffOnSelection() {
    	}
    	OffOnSelection(const StateType &_currentState, const OffOnType &_currentSelection)
    	{
    		std::get<0>(values_) = _currentState;
    		std::get<1>(values_) = _currentSelection;
    	}
    	inline const StateType &getCurrentState() const { return std::get<0>(values_); }
    	inline void setCurrentState(const StateType &_value) { std::get<0>(values_) = _value; }
    	inline const OffOnType &getCurrentSelection() const { return std::get<1>(values_); }
    	inline void setCurrentSelection(const OffOnType &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const OffOnSelection& _other) const {
                return (getCurrentState() == _other.getCurrentState() && getCurrentSelection() == _other.getCurrentSelection());
        }
    	inline bool operator!=(const OffOnSelection &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct PreconditioningHeatSourceEnum  : CommonApiEnumeration<int32_t>{
        enum Literal : int32_t {
            AUTO = 0,
            FUEL = 1,
            ELECTRIC = 2
        };
        
        PreconditioningHeatSourceEnum() 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(Literal::AUTO)) {}
        PreconditioningHeatSourceEnum(Literal _literal) 
            : CommonApiEnumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::AUTO):
                case static_cast<int32_t>(Literal::FUEL):
                case static_cast<int32_t>(Literal::ELECTRIC):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PreconditioningHeatSourceEnum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PreconditioningHeatSourceEnum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PreconditioningHeatSourceEnum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PreconditioningHeatSourceEnum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PreconditioningHeatSourceEnum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PreconditioningHeatSourceEnum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct PreconditioningHeatSourceStruct : CommonAPI::Struct<StateType, PreconditioningHeatSourceEnum> {
    	
    	PreconditioningHeatSourceStruct() {
    	}
    	PreconditioningHeatSourceStruct(const StateType &_currentState, const PreconditioningHeatSourceEnum &_currentSelection)
    	{
    		std::get<0>(values_) = _currentState;
    		std::get<1>(values_) = _currentSelection;
    	}
    	inline const StateType &getCurrentState() const { return std::get<0>(values_); }
    	inline void setCurrentState(const StateType &_value) { std::get<0>(values_) = _value; }
    	inline const PreconditioningHeatSourceEnum &getCurrentSelection() const { return std::get<1>(values_); }
    	inline void setCurrentSelection(const PreconditioningHeatSourceEnum &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const PreconditioningHeatSourceStruct& _other) const {
                return (getCurrentState() == _other.getCurrentState() && getCurrentSelection() == _other.getCurrentSelection());
        }
    	inline bool operator!=(const PreconditioningHeatSourceStruct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
};


} // namespace climate
} // namespace volvocars
} // namespace org
} // namespace v0

namespace CommonAPI {
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_VOLVOCARS_CLIMATE_USER_SELECTION_HPP_
